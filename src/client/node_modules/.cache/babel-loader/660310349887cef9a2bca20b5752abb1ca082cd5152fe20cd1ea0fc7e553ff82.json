{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { digitsOnlyWithDecimalPoint, maxCurrency, required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nconst salComponentModel = {\n  name: '',\n  salaryAmount: '',\n  comment: '',\n  payGradeId: null,\n  payFrequencyId: null,\n  currencyId: null\n};\nconst directDepositModel = {\n  directDepositAccount: '',\n  directDepositAccountType: null,\n  directDepositRoutingNumber: '',\n  directDepositAmount: ''\n};\nexport default {\n  name: 'EditSalaryComponent',\n  components: {\n    'oxd-switch-input': OxdSwitchInput\n  },\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    data: {\n      type: Object,\n      required: true\n    },\n    paygrades: {\n      type: Array,\n      default: () => []\n    },\n    payFrequencies: {\n      type: Array,\n      default: () => []\n    },\n    currencies: {\n      type: Array,\n      default: () => []\n    },\n    accountTypes: {\n      type: Array,\n      default: () => []\n    }\n  },\n  emits: ['close'],\n  data() {\n    return {\n      isLoading: false,\n      includeDirectDeposit: false,\n      salaryComponent: {\n        ...salComponentModel\n      },\n      directDeposit: {\n        ...directDepositModel\n      },\n      accountType: '',\n      usableCurrencies: [],\n      rules: {\n        name: [required, shouldNotExceedCharLength(100)],\n        salaryAmount: [required, digitsOnlyWithDecimalPoint, maxCurrency(1000000000)],\n        comment: [shouldNotExceedCharLength(250)],\n        currencyId: [required],\n        directDepositAccount: [required, shouldNotExceedCharLength(100)],\n        directDepositAccountType: [required],\n        accountType: [required, shouldNotExceedCharLength(20)],\n        directDepositRoutingNumber: [required, shouldNotExceedCharLength(9), digitsOnlyWithDecimalPoint],\n        directDepositAmount: [required, digitsOnlyWithDecimalPoint, maxCurrency(1000000000)]\n      }\n    };\n  },\n  computed: {\n    showOptionalAccountType() {\n      return this.directDeposit.directDepositAccountType?.id == 'OTHER';\n    },\n    minAmount() {\n      return this.currencyInfo?.minAmount;\n    },\n    maxAmount() {\n      return this.currencyInfo?.maxAmount;\n    },\n    currenciesOpts() {\n      const paygrade = this.salaryComponent.payGradeId?.id;\n      if (!paygrade) {\n        return this.currencies;\n      } else if (paygrade && this.usableCurrencies.length > 0) {\n        return this.currencies.filter(item => this.usableCurrencies.findIndex(currency => currency.id === item.id) > -1);\n      } else {\n        return [];\n      }\n    },\n    currencyInfo() {\n      return this.usableCurrencies.find(item => item.id === this.salaryComponent.currencyId?.id);\n    }\n  },\n  watch: {\n    'salaryComponent.payGradeId': function (newVal) {\n      if (newVal?.id) {\n        this.isLoading = true;\n        this.http.request({\n          url: `/api/v2/admin/pay-grades/${newVal.id}/currencies`,\n          method: 'GET',\n          params: {\n            limit: 0\n          }\n        }).then(response => {\n          const {\n            data\n          } = response.data;\n          this.usableCurrencies = data.map(item => {\n            return {\n              id: item.currencyType.id,\n              name: item.currencyType.name,\n              minAmount: item.minSalary,\n              maxAmount: item.maxSalary\n            };\n          });\n          const currency = this.salaryComponent.currencyId;\n          const currencyIndex = this.usableCurrencies.findIndex(item => item.id === currency?.id);\n          this.salaryComponent.currencyId = currencyIndex === -1 ? [] : this.salaryComponent.currencyId;\n        }).then(() => {\n          this.isLoading = false;\n        });\n      } else {\n        this.usableCurrencies = [];\n      }\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.rules.salaryAmount.push(v => {\n        const min = this.minAmount ? this.minAmount : 0;\n        return v >= min || this.$t('pim.should_be_within_min_max_values');\n      });\n      this.rules.salaryAmount.push(v => {\n        const max = this.maxAmount ? this.maxAmount : 999999999;\n        return v <= max || this.$t('pim.should_be_within_min_max_values');\n      });\n    });\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.data.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.salaryComponent.name = data.salaryName;\n      this.salaryComponent.salaryAmount = data.amount;\n      this.salaryComponent.comment = data.comment ? data.comment : '';\n      this.salaryComponent.payGradeId = this.paygrades.find(item => item.id === data.payGrade?.id);\n      this.salaryComponent.payFrequencyId = this.payFrequencies.find(item => item.id === data.payPeriod?.id);\n      this.salaryComponent.currencyId = this.currencies.find(item => item.id === data.currencyType?.id);\n      if (data.directDebit.id !== null) {\n        this.includeDirectDeposit = true;\n        this.directDeposit.directDepositAccount = data.directDebit.account;\n        const accountType = this.accountTypes.find(item => item.id === data.directDebit.accountType);\n        this.directDeposit.directDepositAccountType = accountType ? accountType : {\n          id: 'OTHER',\n          label: this.$t('pim.other')\n        };\n        this.accountType = accountType.length === 0 ? data.directDebit.accountType : '';\n        this.directDeposit.directDepositRoutingNumber = data.directDebit.routingNumber;\n        this.directDeposit.directDepositAmount = data.directDebit.amount;\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      const accountType = this.showOptionalAccountType ? this.accountType : this.directDeposit.directDepositAccountType?.id;\n      this.http.update(this.data.id, {\n        // Paygrade fields\n        salaryComponent: this.salaryComponent.name,\n        salaryAmount: this.salaryComponent.salaryAmount,\n        payGradeId: this.salaryComponent.payGradeId?.id,\n        currencyId: this.salaryComponent.currencyId?.id,\n        payFrequencyId: this.salaryComponent.payFrequencyId?.id,\n        comment: this.salaryComponent.comment ? this.salaryComponent.comment : null,\n        addDirectDeposit: this.includeDirectDeposit,\n        // Directdeposi fields\n        directDepositAccount: this.includeDirectDeposit ? this.directDeposit.directDepositAccount : undefined,\n        directDepositAccountType: this.includeDirectDeposit ? accountType : undefined,\n        directDepositAmount: this.includeDirectDeposit ? this.directDeposit.directDepositAmount : undefined,\n        directDepositRoutingNumber: this.includeDirectDeposit ? this.directDeposit.directDepositRoutingNumber : undefined\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["digitsOnlyWithDecimalPoint","maxCurrency","required","shouldNotExceedCharLength","OxdSwitchInput","salComponentModel","name","salaryAmount","comment","payGradeId","payFrequencyId","currencyId","directDepositModel","directDepositAccount","directDepositAccountType","directDepositRoutingNumber","directDepositAmount","components","props","http","type","Object","data","paygrades","Array","default","payFrequencies","currencies","accountTypes","emits","isLoading","includeDirectDeposit","salaryComponent","directDeposit","accountType","usableCurrencies","rules","computed","showOptionalAccountType","id","minAmount","currencyInfo","maxAmount","currenciesOpts","paygrade","length","filter","item","findIndex","currency","find","watch","newVal","request","url","method","params","limit","then","response","map","currencyType","minSalary","maxSalary","currencyIndex","mounted","$nextTick","push","v","min","$t","max","beforeMount","get","salaryName","amount","payGrade","payPeriod","directDebit","account","label","routingNumber","finally","methods","onSave","update","addDirectDeposit","undefined","$toast","updateSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\EditSalaryComponent.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-horizontal-padding orangehrm-vertical-padding\">\n    <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n      {{ $t('pim.edit_salary_component') }}\n    </oxd-text>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"salaryComponent.name\"\n              :label=\"$t('pim.salary_component')\"\n              :rules=\"rules.name\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"salaryComponent.payGradeId\"\n              type=\"select\"\n              :label=\"$t('general.pay_grade')\"\n              :options=\"paygrades\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"salaryComponent.payFrequencyId\"\n              type=\"select\"\n              :label=\"$t('pim.pay_frequency')\"\n              :options=\"payFrequencies\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              :key=\"currenciesOpts\"\n              v-model=\"salaryComponent.currencyId\"\n              type=\"select\"\n              :label=\"$t('general.currency')\"\n              :options=\"currenciesOpts\"\n              :rules=\"rules.currencyId\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"salaryComponent.salaryAmount\"\n              :label=\"$t('general.amount')\"\n              :rules=\"rules.salaryAmount\"\n              required\n            />\n            <oxd-text\n              v-if=\"minAmount !== undefined || maxAmount !== undefined\"\n              class=\"orangehrm-input-hint\"\n              tag=\"p\"\n            >\n              Min: {{ minAmount ?? 0 }} - Max: {{ maxAmount ?? 0 }}\n            </oxd-text>\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item class=\"--span-column-2\">\n            <oxd-input-field\n              v-model=\"salaryComponent.comment\"\n              type=\"textarea\"\n              :label=\"$t('general.comments')\"\n              :rules=\"rules.comment\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-row class=\"directdeposit-form-header\">\n        <oxd-text class=\"directdeposit-form-header-text\" tag=\"p\">\n          {{ $t('pim.include_direct_deposit_details') }}\n        </oxd-text>\n        <oxd-switch-input v-model=\"includeDirectDeposit\" />\n      </oxd-form-row>\n\n      <oxd-form-row v-if=\"includeDirectDeposit\">\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"directDeposit.directDepositAccount\"\n              :label=\"$t('pim.account_number')\"\n              :rules=\"rules.directDepositAccount\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"directDeposit.directDepositAccountType\"\n              type=\"select\"\n              :label=\"$t('pim.account_type')\"\n              :rules=\"rules.directDepositAccountType\"\n              :options=\"accountTypes\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item v-if=\"showOptionalAccountType\">\n            <oxd-input-field\n              v-model=\"accountType\"\n              :label=\"$t('pim.please_specify')\"\n              :rules=\"rules.accountType\"\n              required\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"directDeposit.directDepositRoutingNumber\"\n              :label=\"$t('pim.routing_number')\"\n              :rules=\"rules.directDepositRoutingNumber\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"directDeposit.directDepositAmount\"\n              :label=\"$t('general.amount')\"\n              :rules=\"rules.directDepositAmount\"\n              required\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </div>\n  <oxd-divider />\n</template>\n\n<script>\nimport {\n  digitsOnlyWithDecimalPoint,\n  maxCurrency,\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport {OxdSwitchInput} from '@ohrm/oxd';\n\nconst salComponentModel = {\n  name: '',\n  salaryAmount: '',\n  comment: '',\n  payGradeId: null,\n  payFrequencyId: null,\n  currencyId: null,\n};\n\nconst directDepositModel = {\n  directDepositAccount: '',\n  directDepositAccountType: null,\n  directDepositRoutingNumber: '',\n  directDepositAmount: '',\n};\n\nexport default {\n  name: 'EditSalaryComponent',\n\n  components: {\n    'oxd-switch-input': OxdSwitchInput,\n  },\n\n  props: {\n    http: {\n      type: Object,\n      required: true,\n    },\n    data: {\n      type: Object,\n      required: true,\n    },\n    paygrades: {\n      type: Array,\n      default: () => [],\n    },\n    payFrequencies: {\n      type: Array,\n      default: () => [],\n    },\n    currencies: {\n      type: Array,\n      default: () => [],\n    },\n    accountTypes: {\n      type: Array,\n      default: () => [],\n    },\n  },\n\n  emits: ['close'],\n\n  data() {\n    return {\n      isLoading: false,\n      includeDirectDeposit: false,\n      salaryComponent: {...salComponentModel},\n      directDeposit: {...directDepositModel},\n      accountType: '',\n      usableCurrencies: [],\n      rules: {\n        name: [required, shouldNotExceedCharLength(100)],\n        salaryAmount: [\n          required,\n          digitsOnlyWithDecimalPoint,\n          maxCurrency(1000000000),\n        ],\n        comment: [shouldNotExceedCharLength(250)],\n        currencyId: [required],\n        directDepositAccount: [required, shouldNotExceedCharLength(100)],\n        directDepositAccountType: [required],\n        accountType: [required, shouldNotExceedCharLength(20)],\n        directDepositRoutingNumber: [\n          required,\n          shouldNotExceedCharLength(9),\n          digitsOnlyWithDecimalPoint,\n        ],\n        directDepositAmount: [\n          required,\n          digitsOnlyWithDecimalPoint,\n          maxCurrency(1000000000),\n        ],\n      },\n    };\n  },\n\n  computed: {\n    showOptionalAccountType() {\n      return this.directDeposit.directDepositAccountType?.id == 'OTHER';\n    },\n    minAmount() {\n      return this.currencyInfo?.minAmount;\n    },\n    maxAmount() {\n      return this.currencyInfo?.maxAmount;\n    },\n    currenciesOpts() {\n      const paygrade = this.salaryComponent.payGradeId?.id;\n      if (!paygrade) {\n        return this.currencies;\n      } else if (paygrade && this.usableCurrencies.length > 0) {\n        return this.currencies.filter(\n          (item) =>\n            this.usableCurrencies.findIndex(\n              (currency) => currency.id === item.id,\n            ) > -1,\n        );\n      } else {\n        return [];\n      }\n    },\n    currencyInfo() {\n      return this.usableCurrencies.find(\n        (item) => item.id === this.salaryComponent.currencyId?.id,\n      );\n    },\n  },\n\n  watch: {\n    'salaryComponent.payGradeId': function (newVal) {\n      if (newVal?.id) {\n        this.isLoading = true;\n        this.http\n          .request({\n            url: `/api/v2/admin/pay-grades/${newVal.id}/currencies`,\n            method: 'GET',\n            params: {limit: 0},\n          })\n          .then((response) => {\n            const {data} = response.data;\n            this.usableCurrencies = data.map((item) => {\n              return {\n                id: item.currencyType.id,\n                name: item.currencyType.name,\n                minAmount: item.minSalary,\n                maxAmount: item.maxSalary,\n              };\n            });\n            const currency = this.salaryComponent.currencyId;\n            const currencyIndex = this.usableCurrencies.findIndex(\n              (item) => item.id === currency?.id,\n            );\n            this.salaryComponent.currencyId =\n              currencyIndex === -1 ? [] : this.salaryComponent.currencyId;\n          })\n          .then(() => {\n            this.isLoading = false;\n          });\n      } else {\n        this.usableCurrencies = [];\n      }\n    },\n  },\n\n  mounted() {\n    this.$nextTick(() => {\n      this.rules.salaryAmount.push((v) => {\n        const min = this.minAmount ? this.minAmount : 0;\n        return v >= min || this.$t('pim.should_be_within_min_max_values');\n      });\n      this.rules.salaryAmount.push((v) => {\n        const max = this.maxAmount ? this.maxAmount : 999999999;\n        return v <= max || this.$t('pim.should_be_within_min_max_values');\n      });\n    });\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.data.id)\n      .then((response) => {\n        const {data} = response.data;\n        this.salaryComponent.name = data.salaryName;\n        this.salaryComponent.salaryAmount = data.amount;\n        this.salaryComponent.comment = data.comment ? data.comment : '';\n        this.salaryComponent.payGradeId = this.paygrades.find(\n          (item) => item.id === data.payGrade?.id,\n        );\n        this.salaryComponent.payFrequencyId = this.payFrequencies.find(\n          (item) => item.id === data.payPeriod?.id,\n        );\n        this.salaryComponent.currencyId = this.currencies.find(\n          (item) => item.id === data.currencyType?.id,\n        );\n        if (data.directDebit.id !== null) {\n          this.includeDirectDeposit = true;\n          this.directDeposit.directDepositAccount = data.directDebit.account;\n          const accountType = this.accountTypes.find(\n            (item) => item.id === data.directDebit.accountType,\n          );\n          this.directDeposit.directDepositAccountType = accountType\n            ? accountType\n            : {id: 'OTHER', label: this.$t('pim.other')};\n          this.accountType =\n            accountType.length === 0 ? data.directDebit.accountType : '';\n          this.directDeposit.directDepositRoutingNumber =\n            data.directDebit.routingNumber;\n          this.directDeposit.directDepositAmount = data.directDebit.amount;\n        }\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      const accountType = this.showOptionalAccountType\n        ? this.accountType\n        : this.directDeposit.directDepositAccountType?.id;\n      this.http\n        .update(this.data.id, {\n          // Paygrade fields\n          salaryComponent: this.salaryComponent.name,\n          salaryAmount: this.salaryComponent.salaryAmount,\n          payGradeId: this.salaryComponent.payGradeId?.id,\n          currencyId: this.salaryComponent.currencyId?.id,\n          payFrequencyId: this.salaryComponent.payFrequencyId?.id,\n          comment: this.salaryComponent.comment\n            ? this.salaryComponent.comment\n            : null,\n          addDirectDeposit: this.includeDirectDeposit,\n          // Directdeposi fields\n          directDepositAccount: this.includeDirectDeposit\n            ? this.directDeposit.directDepositAccount\n            : undefined,\n          directDepositAccountType: this.includeDirectDeposit\n            ? accountType\n            : undefined,\n          directDepositAmount: this.includeDirectDeposit\n            ? this.directDeposit.directDepositAmount\n            : undefined,\n          directDepositRoutingNumber: this.includeDirectDeposit\n            ? this.directDeposit.directDepositRoutingNumber\n            : undefined,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.directdeposit-form-header {\n  display: flex;\n  padding: 1rem;\n  &-text {\n    font-size: 0.8rem;\n    margin-right: 1rem;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}