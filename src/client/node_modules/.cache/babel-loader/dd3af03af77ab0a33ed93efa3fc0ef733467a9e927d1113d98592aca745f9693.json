{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport PasswordInput from '@/core/components/inputs/PasswordInput';\nimport { required, validSelection, shouldNotExceedCharLength, shouldNotLessThanCharLength } from '@/core/util/validation/rules';\nimport { promiseDebounce } from '@ohrm/oxd';\nconst userModel = {\n  username: '',\n  role: null,\n  employee: null,\n  status: null,\n  password: '',\n  passwordConfirm: ''\n};\nexport default {\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete,\n    'password-input': PasswordInput\n  },\n  props: {\n    isPasswordRequired: {\n      type: Boolean,\n      default: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/users');\n    http.setIgnorePath('/api/v2/admin/validation/user-name');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      user: {\n        ...userModel\n      },\n      rules: {\n        username: [required, shouldNotLessThanCharLength(5), shouldNotExceedCharLength(40), promiseDebounce(this.validateUserName, 500)],\n        role: [required],\n        employee: [required, validSelection],\n        status: [required]\n      },\n      userRoles: [{\n        id: 1,\n        label: this.$t('general.admin')\n      }, {\n        id: 2,\n        label: this.$t('general.ess')\n      }],\n      userStatuses: [{\n        id: 1,\n        label: this.$t('general.enabled')\n      }, {\n        id: 2,\n        label: this.$t('general.disabled')\n      }]\n    };\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/viewSystemUsers');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        username: this.user.username.trim(),\n        password: this.user.password,\n        status: this.user.status && this.user.status.id === 1,\n        userRoleId: this.user.role?.id,\n        empNumber: this.user.employee?.id\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        // go back\n        this.onCancel();\n      });\n    },\n    validateUserName(user) {\n      return new Promise(resolve => {\n        if (user) {\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/admin/validation/user-name`,\n            params: {\n              userName: this.user.username.trim()\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            return data.valid === true ? resolve(true) : resolve(this.$t('general.already_exists'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["APIService","navigate","EmployeeAutocomplete","PasswordInput","required","validSelection","shouldNotExceedCharLength","shouldNotLessThanCharLength","promiseDebounce","userModel","username","role","employee","status","password","passwordConfirm","components","props","isPasswordRequired","type","Boolean","default","setup","http","window","appGlobal","baseUrl","setIgnorePath","data","isLoading","user","rules","validateUserName","userRoles","id","label","$t","userStatuses","methods","onCancel","onSave","create","trim","userRoleId","empNumber","then","$toast","saveSuccess","Promise","resolve","request","method","url","params","userName","response","valid"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\pages\\systemUser\\SaveSystemUser.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">{{\n        $t('admin.add_user')\n      }}</oxd-text>\n      <oxd-divider />\n\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"user.role\"\n                type=\"select\"\n                :label=\"$t('general.user_role')\"\n                :rules=\"rules.role\"\n                :options=\"userRoles\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <employee-autocomplete\n                v-model=\"user.employee\"\n                :rules=\"rules.employee\"\n                required\n              />\n            </oxd-grid-item>\n\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"user.status\"\n                type=\"select\"\n                :label=\"$t('general.status')\"\n                :rules=\"rules.status\"\n                :options=\"userStatuses\"\n                required\n              />\n            </oxd-grid-item>\n\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"user.username\"\n                :label=\"$t('general.username')\"\n                :rules=\"rules.username\"\n                required\n                autocomplete=\"off\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <password-input\n          v-model:password=\"user.password\"\n          v-model:passwordConfirm=\"user.passwordConfirm\"\n          :is-password-required=\"isPasswordRequired\"\n        />\n\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            type=\"button\"\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {APIService} from '@/core/util/services/api.service';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport PasswordInput from '@/core/components/inputs/PasswordInput';\nimport {\n  required,\n  validSelection,\n  shouldNotExceedCharLength,\n  shouldNotLessThanCharLength,\n} from '@/core/util/validation/rules';\nimport {promiseDebounce} from '@ohrm/oxd';\n\nconst userModel = {\n  username: '',\n  role: null,\n  employee: null,\n  status: null,\n  password: '',\n  passwordConfirm: '',\n};\n\nexport default {\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete,\n    'password-input': PasswordInput,\n  },\n\n  props: {\n    isPasswordRequired: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/admin/users',\n    );\n    http.setIgnorePath('/api/v2/admin/validation/user-name');\n    return {\n      http,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      user: {...userModel},\n      rules: {\n        username: [\n          required,\n          shouldNotLessThanCharLength(5),\n          shouldNotExceedCharLength(40),\n          promiseDebounce(this.validateUserName, 500),\n        ],\n        role: [required],\n        employee: [required, validSelection],\n        status: [required],\n      },\n      userRoles: [\n        {id: 1, label: this.$t('general.admin')},\n        {id: 2, label: this.$t('general.ess')},\n      ],\n      userStatuses: [\n        {id: 1, label: this.$t('general.enabled')},\n        {id: 2, label: this.$t('general.disabled')},\n      ],\n    };\n  },\n\n  methods: {\n    onCancel() {\n      navigate('/admin/viewSystemUsers');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .create({\n          username: this.user.username.trim(),\n          password: this.user.password,\n          status: this.user.status && this.user.status.id === 1,\n          userRoleId: this.user.role?.id,\n          empNumber: this.user.employee?.id,\n        })\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          // go back\n          this.onCancel();\n        });\n    },\n    validateUserName(user) {\n      return new Promise((resolve) => {\n        if (user) {\n          this.http\n            .request({\n              method: 'GET',\n              url: `/api/v2/admin/validation/user-name`,\n              params: {\n                userName: this.user.username.trim(),\n              },\n            })\n            .then((response) => {\n              const {data} = response.data;\n              return data.valid === true\n                ? resolve(true)\n                : resolve(this.$t('general.already_exists'));\n            });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}