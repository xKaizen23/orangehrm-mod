{"ast":null,"code":"import { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nexport default {\n  name: 'EditProvider',\n  props: {\n    id: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/auth/openid-providers');\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const providerNameUniqueValidation = createUniqueValidator('OpenIdProvider', 'providerName', {\n      entityId: props.id,\n      matchByField: 'status',\n      matchByValue: 1\n    });\n    return {\n      http,\n      providerNameUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      secretPlaceholder: '',\n      authProvider: {\n        name: '',\n        url: '',\n        clientId: '',\n        clientSecret: ''\n      },\n      rules: {\n        name: [required, this.providerNameUniqueValidation, shouldNotExceedCharLength(40)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.authProvider.name = data.providerName;\n      this.authProvider.url = data.providerUrl;\n      this.authProvider.clientId = data.clientId;\n      this.secretPlaceholder = data.clientId ? '******' : '';\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/openIdProvider');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.id, {\n        name: this.authProvider.name,\n        url: this.authProvider.url,\n        clientId: this.authProvider.clientId,\n        clientSecret: this.authProvider.clientSecret === '' ? null : this.authProvider.clientSecret\n      }).then(() => {\n        this.isLoading = false;\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["navigate","APIService","required","shouldNotExceedCharLength","useServerValidation","name","props","id","type","Number","setup","http","window","appGlobal","baseUrl","createUniqueValidator","providerNameUniqueValidation","entityId","matchByField","matchByValue","data","isLoading","secretPlaceholder","authProvider","url","clientId","clientSecret","rules","beforeMount","get","then","response","providerName","providerUrl","finally","methods","onCancel","onSave","update","$toast","updateSuccess"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\pages\\socialMediaAuth\\EditProvider.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('admin.edit_provider') }}\n      </oxd-text>\n      <oxd-divider />\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"authProvider.name\"\n                :rules=\"rules.name\"\n                :label=\"$t('general.name')\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"authProvider.url\"\n                :label=\"$t('admin.url')\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"authProvider.clientId\"\n                :label=\"$t('admin.client_id')\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"authProvider.clientSecret\"\n                :label=\"$t('admin.client_secret')\"\n                :placeholder=\"secretPlaceholder\"\n                required\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            type=\"button\"\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {APIService} from '@/core/util/services/api.service';\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\n\nexport default {\n  name: 'EditProvider',\n  props: {\n    id: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/auth/openid-providers',\n    );\n    const {createUniqueValidator} = useServerValidation(http);\n    const providerNameUniqueValidation = createUniqueValidator(\n      'OpenIdProvider',\n      'providerName',\n      {entityId: props.id, matchByField: 'status', matchByValue: 1},\n    );\n\n    return {\n      http,\n      providerNameUniqueValidation,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      secretPlaceholder: '',\n      authProvider: {\n        name: '',\n        url: '',\n        clientId: '',\n        clientSecret: '',\n      },\n      rules: {\n        name: [\n          required,\n          this.providerNameUniqueValidation,\n          shouldNotExceedCharLength(40),\n        ],\n      },\n    };\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.id)\n      .then((response) => {\n        const {data} = response.data;\n        this.authProvider.name = data.providerName;\n        this.authProvider.url = data.providerUrl;\n        this.authProvider.clientId = data.clientId;\n        this.secretPlaceholder = data.clientId ? '******' : '';\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/openIdProvider');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.id, {\n          name: this.authProvider.name,\n          url: this.authProvider.url,\n          clientId: this.authProvider.clientId,\n          clientSecret:\n            this.authProvider.clientSecret === ''\n              ? null\n              : this.authProvider.clientSecret,\n        })\n        .then(() => {\n          this.isLoading = false;\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}