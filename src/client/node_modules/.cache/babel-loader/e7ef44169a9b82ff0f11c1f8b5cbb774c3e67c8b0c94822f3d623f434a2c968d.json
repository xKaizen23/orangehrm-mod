{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3d5611d2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"orangehrm-paper-container\"\n};\nconst _hoisted_2 = {\n  class: \"orangehrm-header-container\"\n};\nconst _hoisted_3 = {\n  class: \"orangehrm-container\"\n};\nconst _hoisted_4 = {\n  class: \"orangehrm-bottom-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_text = _resolveComponent(\"oxd-text\");\n  const _component_table_header = _resolveComponent(\"table-header\");\n  const _component_oxd_card_table = _resolveComponent(\"oxd-card-table\");\n  const _component_oxd_pagination = _resolveComponent(\"oxd-pagination\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_oxd_text, {\n    tag: \"h6\",\n    class: \"orangehrm-main-title\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('recruitment.candidate_history')), 1)]),\n    _: 1\n  })]), _createVNode(_component_table_header, {\n    selected: 0,\n    total: $setup.total,\n    loading: $setup.isLoading\n  }, null, 8, [\"total\", \"loading\"]), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_oxd_card_table, {\n    headers: $data.headers,\n    items: $setup.items?.data,\n    clickable: false,\n    selectable: false,\n    loading: $setup.isLoading,\n    \"row-decorator\": \"oxd-table-decorator-card\"\n  }, null, 8, [\"headers\", \"items\", \"loading\"])]), _createElementVNode(\"div\", _hoisted_4, [$setup.showPaginator ? (_openBlock(), _createBlock(_component_oxd_pagination, {\n    key: 0,\n    current: $setup.currentPage,\n    \"onUpdate:current\": _cache[0] || (_cache[0] = $event => $setup.currentPage = $event),\n    length: $setup.pages\n  }, null, 8, [\"current\", \"length\"])) : _createCommentVNode(\"\", true)])]);\n}","map":{"version":3,"mappings":";;;EAoBOA,KAAK,EAAC;AAA2B;;EAC/BA,KAAK,EAAC;AAA4B;;EAUlCA,KAAK,EAAC;AAAqB;;EAU3BA,KAAK,EAAC;AAA4B;;;;;;uBArBzCC,oBA4BM,OA5BNC,UA4BM,GA3BJC,oBAIM,OAJNC,UAIM,GAHJC,aAEWC;IAFDC,GAAG,EAAC,IAAI;IAACP,KAAK,EAAC;;sBACvB,MAAyC,mCAAtCQ,OAAE;;QAGTH,aAIgBI;IAHbC,QAAQ,EAAE,CAAC;IACXC,KAAK,EAAEC,YAAK;IACZC,OAAO,EAAED;qCAEZT,oBASM,OATNW,UASM,GARJT,aAOEU;IANCC,OAAO,EAAEC,aAAO;IAChBC,KAAK,EAAEN,YAAK,EAAEO,IAAI;IAClBC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE,KAAK;IACjBR,OAAO,EAAED,gBAAS;IACnB,eAAa,EAAC;kDAGlBT,oBAMM,OANNmB,UAMM,GAJIV,oBAAa,kBADrBW,aAIEC;;IAFQC,OAAO,EAAEb,kBAAW;4DAAXA,kBAAW;IAC3Bc,MAAM,EAAEd","names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_oxd_text","tag","_ctx","_component_table_header","selected","total","$setup","loading","_hoisted_3","_component_oxd_card_table","headers","$data","items","data","clickable","selectable","_hoisted_4","_createBlock","_component_oxd_pagination","current","length"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmRecruitmentPlugin\\components\\HistoryTable.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-paper-container\">\n    <div class=\"orangehrm-header-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('recruitment.candidate_history') }}\n      </oxd-text>\n    </div>\n    <table-header\n      :selected=\"0\"\n      :total=\"total\"\n      :loading=\"isLoading\"\n    ></table-header>\n    <div class=\"orangehrm-container\">\n      <oxd-card-table\n        :headers=\"headers\"\n        :items=\"items?.data\"\n        :clickable=\"false\"\n        :selectable=\"false\"\n        :loading=\"isLoading\"\n        row-decorator=\"oxd-table-decorator-card\"\n      />\n    </div>\n    <div class=\"orangehrm-bottom-container\">\n      <oxd-pagination\n        v-if=\"showPaginator\"\n        v-model:current=\"currentPage\"\n        :length=\"pages\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport {APIService} from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useLocale from '@/core/util/composable/useLocale';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport {formatDate, parseDate} from '@/core/util/helper/datefns';\nimport {navigate} from '@/core/util/helper/navigation';\nimport usei18n from '@/core/util/composable/usei18n';\n\nconst ACTION_ASSIGNED_VACANCY = 1;\nconst ACTION_SHORTLISTED = 2;\nconst ACTION_REJECTED = 3;\nconst ACTION_INTERVIEW_SCHEDULED = 4;\nconst ACTION_INTERVIEW_PASSED = 5;\nconst ACTION_INTERVIEW_FAILED = 6;\nconst ACTION_JOB_OFFERED = 7;\nconst ACTION_OFFER_DECLINED = 8;\nconst ACTION_HIRED = 9;\nconst ACTION_REMOVED = 15;\nconst ACTION_ADDED = 16;\nconst ACTION_APPLIED = 17;\n\nexport default {\n  name: 'HistoryTable',\n  props: {\n    candidate: {\n      type: Object,\n      required: true,\n    },\n  },\n  setup(props) {\n    const {$t} = usei18n();\n    const {locale} = useLocale();\n    const {jsDateFormat} = useDateFormat();\n    const {$tEmpName} = useEmployeeNameTranslate();\n\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/recruitment/candidates/${props.candidate?.id}/history`,\n    );\n\n    const historyDataNormalizer = (data) => {\n      const candidateName = `${props.candidate?.firstName} ${\n        props.candidate?.middleName || ''\n      } ${props.candidate?.lastName}`;\n      return data.map((item) => {\n        let description = null;\n        const interview = {\n          name: '',\n          data: '',\n          interviewers: '',\n        };\n        const performerName = $tEmpName(item.performedBy, {\n          includeMiddle: true,\n          excludePastEmpTag: false,\n        });\n        if (item.interview) {\n          interview.name = item.interview.name;\n          interview.date = item.interview.date;\n          const interviewers = item.interview.interviewers.map(\n            (interviewer) => {\n              return $tEmpName(interviewer, {\n                includeMiddle: true,\n                excludePastEmpTag: false,\n              });\n            },\n          );\n          interview.interviewers = interviewers.join(', ');\n        }\n\n        switch (item?.action.id) {\n          case ACTION_APPLIED:\n            description = $t('recruitment.candidate_applied_for_the_vacancy', {\n              candidate: candidateName,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_ADDED:\n            description = $t('recruitment.employee_added_candidate', {\n              employee: performerName,\n              candidate: candidateName,\n            });\n            break;\n          case ACTION_ASSIGNED_VACANCY:\n            description = $t(\n              'recruitment.employee_assigned_vacancy_to_candidate',\n              {\n                employee: performerName,\n                vacancy: item.vacancyName,\n              },\n            );\n            break;\n          case ACTION_SHORTLISTED:\n            description = $t(\n              'recruitment.candidate_shortlisted_for_vacancy_by_employee',\n              {\n                vacancy: item.vacancyName,\n                employee: performerName,\n              },\n            );\n            break;\n          case ACTION_REJECTED:\n            description = $t('recruitment.employee_rejected_the_candidate', {\n              employee: performerName,\n              candidate: candidateName,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_INTERVIEW_SCHEDULED:\n            description = $t(\n              'recruitment.employee_schedule_interview_with_interviewers',\n              {\n                employee: performerName,\n                interview: interview.name,\n                interviewDate: interview.date,\n                interviewers: interview.interviewers,\n                vacancy: item.vacancyName,\n              },\n            );\n            break;\n          case ACTION_INTERVIEW_PASSED:\n            description = $t('recruitment.employee_marked_interveiw_passed', {\n              employee: performerName,\n              interview: interview.name,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_INTERVIEW_FAILED:\n            description = $t('recruitment.employee_marked_interveiw_failed', {\n              employee: performerName,\n              interview: interview.name,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_JOB_OFFERED:\n            description = $t('recruitment.employee_offered_the_job', {\n              employee: performerName,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_OFFER_DECLINED:\n            description = $t('recruitment.employee_marked_the_offer_declined', {\n              employee: performerName,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_HIRED:\n            description = $t('recruitment.employee_hired_the_candidate', {\n              employee: performerName,\n              candidate: candidateName,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_REMOVED:\n            description = $t(\n              'recruitment.employee_removed_candidate_from_vacancy',\n              {\n                employee: performerName,\n                candidate: candidateName,\n                vacancy: item.vacancyName,\n              },\n            );\n            break;\n        }\n\n        return {\n          ...item,\n          description: description,\n          performedDate: formatDate(\n            parseDate(item.performedDate),\n            jsDateFormat,\n            {\n              locale,\n            },\n          ),\n        };\n      });\n    };\n\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery,\n    } = usePaginate(http, {normalizer: historyDataNormalizer});\n\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n    };\n  },\n\n  data() {\n    return {\n      headers: [\n        {\n          name: 'performedDate',\n          slot: 'title',\n          title: this.$t('recruitment.performed_date'),\n          style: {flex: '20%'},\n        },\n        {\n          name: 'description',\n          title: this.$t('general.description'),\n          style: {flex: '65%'},\n        },\n        {\n          name: 'actions',\n          slot: 'action',\n          title: this.$t('general.actions'),\n          style: {flex: '15%'},\n          cellType: 'oxd-table-cell-actions',\n          cellRenderer: this.cellRenderer,\n        },\n      ],\n    };\n  },\n  watch: {\n    candidate() {\n      this.execQuery();\n    },\n  },\n  methods: {\n    cellRenderer(...[, , , row]) {\n      const cellConfig = {};\n\n      if (\n        row.action?.id != ACTION_ASSIGNED_VACANCY &&\n        row.action?.id != ACTION_ADDED &&\n        row.action?.id != ACTION_REMOVED &&\n        row.action?.id != ACTION_APPLIED &&\n        row.editable\n      ) {\n        cellConfig.edit = {\n          onClick: this.onClickEdit,\n          props: {\n            name: 'pencil-fill',\n          },\n        };\n      }\n\n      if (\n        (row.action?.id === ACTION_INTERVIEW_SCHEDULED ||\n          row.action?.id === ACTION_INTERVIEW_PASSED ||\n          row.action?.id === ACTION_INTERVIEW_FAILED) &&\n        row.editable\n      ) {\n        cellConfig.attachment = {\n          onClick: this.onClickAttachment,\n          props: {\n            name: 'paperclip',\n          },\n        };\n      }\n\n      return {\n        props: {\n          header: {\n            cellConfig,\n          },\n        },\n      };\n    },\n\n    onClickEdit(item) {\n      navigate('/recruitment/candidateHistory/{candidateId}/{historyId}', {\n        candidateId: this.candidate.id,\n        historyId: item.id,\n      });\n    },\n\n    onClickAttachment(item) {\n      navigate('/recruitment/interviewAttachments/{interviewId}', {\n        interviewId: item.interview?.id,\n      });\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.orangehrm-card-container {\n  padding: 1.2rem 0;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}