{"ast":null,"code":"import { ref, watchEffect } from 'vue';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nexport default {\n  name: 'LeaveTypeDropdown',\n  props: {\n    eligibleOnly: {\n      type: Boolean,\n      default: true\n    },\n    employeeId: {\n      type: Number,\n      required: false,\n      default: null\n    },\n    showEmptySelector: {\n      type: Boolean,\n      default: true\n    },\n    includeAllocated: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props, context) {\n    const options = ref([]);\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/leave/leave-types${props.eligibleOnly ? '/eligible' : ''}`);\n    watchEffect(async () => {\n      if (!props.eligibleOnly && props.includeAllocated) {\n        // eslint-disable-next-line no-console\n        console.error('`includeAllocated` prop can true only if `eligibleOnly` prop true');\n      }\n      http.getAll({\n        empNumber: props.employeeId,\n        includeAllocated: props.eligibleOnly && props.includeAllocated ? true : undefined,\n        ...(props.eligibleOnly === false && {\n          limit: 0\n        })\n      }).then(({\n        data\n      }) => {\n        options.value = data.data.map(item => {\n          return {\n            id: item.id,\n            label: item.name,\n            isDeleted: item.deleted\n          };\n        });\n        if (!props.showEmptySelector && options.value.length > 0) {\n          // this $event is only fired to default select first option\n          // where --select-- options is not shown\n          // eslint-disable-next-line vue/require-explicit-emits\n          context.emit('update:modelValue', options.value[0]);\n        }\n      });\n    });\n    return {\n      options\n    };\n  }\n};","map":{"version":3,"mappings":"AAoCA,SAAQA,GAAG,EAAEC,WAAW,QAAO,KAAK;AACpC,SAAQC,UAAU,QAAO,sCAAsC;AAC/D,eAAe;EACbC,IAAI,EAAE,mBAAmB;EACzBC,KAAK,EAAE;IACLC,YAAY,EAAE;MACZC,IAAI,EAAEC,OAAO;MACbC,OAAO,EAAE;IACX,CAAC;IACDC,UAAU,EAAE;MACVH,IAAI,EAAEI,MAAM;MACZC,QAAQ,EAAE,KAAK;MACfH,OAAO,EAAE;IACX,CAAC;IACDI,iBAAiB,EAAE;MACjBN,IAAI,EAAEC,OAAO;MACbC,OAAO,EAAE;IACX,CAAC;IACDK,gBAAgB,EAAE;MAChBP,IAAI,EAAEC,OAAO;MACbC,OAAO,EAAE;IACX;EACF,CAAC;EACDM,KAAK,CAACV,KAAK,EAAEW,OAAO,EAAE;IACpB,MAAMC,OAAM,GAAIhB,GAAG,CAAC,EAAE,CAAC;IACvB,MAAMiB,IAAG,GAAI,IAAIf,UAAU,CACzBgB,MAAM,CAACC,SAAS,CAACC,OAAO,EACvB,4BAA2BhB,KAAK,CAACC,YAAW,GAAI,WAAU,GAAI,EAAG,EAAC,CACpE;IAEDJ,WAAW,CAAC,YAAY;MACtB,IAAI,CAACG,KAAK,CAACC,YAAW,IAAKD,KAAK,CAACS,gBAAgB,EAAE;QACjD;QACAQ,OAAO,CAACC,KAAK,CACX,mEAAmE,CACpE;MACH;MACAL,IAAG,CACAM,MAAM,CAAC;QACNC,SAAS,EAAEpB,KAAK,CAACK,UAAU;QAC3BI,gBAAgB,EACdT,KAAK,CAACC,YAAW,IAAKD,KAAK,CAACS,gBAAe,GAAI,IAAG,GAAIY,SAAS;QACjE,IAAIrB,KAAK,CAACC,YAAW,KAAM,KAAI,IAAK;UAACqB,KAAK,EAAE;QAAC,CAAC;MAChD,CAAC,EACAC,IAAI,CAAC,CAAC;QAACC;MAAI,CAAC,KAAK;QAChBZ,OAAO,CAACa,KAAI,GAAID,IAAI,CAACA,IAAI,CAACE,GAAG,CAAEC,IAAI,IAAK;UACtC,OAAO;YACLC,EAAE,EAAED,IAAI,CAACC,EAAE;YACXC,KAAK,EAAEF,IAAI,CAAC5B,IAAI;YAChB+B,SAAS,EAAEH,IAAI,CAACI;UAClB,CAAC;QACH,CAAC,CAAC;QACF,IAAI,CAAC/B,KAAK,CAACQ,iBAAgB,IAAKI,OAAO,CAACa,KAAK,CAACO,MAAK,GAAI,CAAC,EAAE;UACxD;UACA;UACA;UACArB,OAAO,CAACsB,IAAI,CAAC,mBAAmB,EAAErB,OAAO,CAACa,KAAK,CAAC,CAAC,CAAC,CAAC;QACrD;MACF,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,OAAO;MACLb;IACF,CAAC;EACH;AACF,CAAC","names":["ref","watchEffect","APIService","name","props","eligibleOnly","type","Boolean","default","employeeId","Number","required","showEmptySelector","includeAllocated","setup","context","options","http","window","appGlobal","baseUrl","console","error","getAll","empNumber","undefined","limit","then","data","value","map","item","id","label","isDeleted","deleted","length","emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmLeavePlugin\\components\\LeaveTypeDropdown.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-input-field\n    type=\"select\"\n    :label=\"$t('leave.leave_type')\"\n    :options=\"options\"\n    :show-empty-selector=\"showEmptySelector\"\n  >\n    <template #option=\"{data}\">\n      <span>{{ data.label }}</span>\n      <div v-if=\"data.isDeleted\" class=\"deleted-tag\">\n        {{ $t('general.deleted') }}\n      </div>\n    </template>\n  </oxd-input-field>\n</template>\n\n<script>\nimport {ref, watchEffect} from 'vue';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nexport default {\n  name: 'LeaveTypeDropdown',\n  props: {\n    eligibleOnly: {\n      type: Boolean,\n      default: true,\n    },\n    employeeId: {\n      type: Number,\n      required: false,\n      default: null,\n    },\n    showEmptySelector: {\n      type: Boolean,\n      default: true,\n    },\n    includeAllocated: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props, context) {\n    const options = ref([]);\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/leave/leave-types${props.eligibleOnly ? '/eligible' : ''}`,\n    );\n\n    watchEffect(async () => {\n      if (!props.eligibleOnly && props.includeAllocated) {\n        // eslint-disable-next-line no-console\n        console.error(\n          '`includeAllocated` prop can true only if `eligibleOnly` prop true',\n        );\n      }\n      http\n        .getAll({\n          empNumber: props.employeeId,\n          includeAllocated:\n            props.eligibleOnly && props.includeAllocated ? true : undefined,\n          ...(props.eligibleOnly === false && {limit: 0}),\n        })\n        .then(({data}) => {\n          options.value = data.data.map((item) => {\n            return {\n              id: item.id,\n              label: item.name,\n              isDeleted: item.deleted,\n            };\n          });\n          if (!props.showEmptySelector && options.value.length > 0) {\n            // this $event is only fired to default select first option\n            // where --select-- options is not shown\n            // eslint-disable-next-line vue/require-explicit-emits\n            context.emit('update:modelValue', options.value[0]);\n          }\n        });\n    });\n\n    return {\n      options,\n    };\n  },\n};\n</script>\n\n<style scoped>\n.deleted-tag {\n  margin-left: auto;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}