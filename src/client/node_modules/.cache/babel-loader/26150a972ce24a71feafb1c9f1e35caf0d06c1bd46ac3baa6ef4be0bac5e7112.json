{"ast":null,"code":"import { required, shouldNotExceedCharLength, validDateFormat, endDateShouldBeAfterStartDate } from '@ohrm/core/util/validation/rules';\nimport { yearRange } from '@ohrm/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst immigrationModel = {\n  number: '',\n  issuedDate: '',\n  expiryDate: '',\n  type: 1,\n  status: '',\n  reviewDate: '',\n  countryCode: null,\n  comment: ''\n};\nexport default {\n  name: 'SaveImmigration',\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    countries: {\n      type: Array,\n      default: () => []\n    }\n  },\n  emits: ['close'],\n  setup() {\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      immigration: {\n        ...immigrationModel\n      },\n      yearArray: [...yearRange()],\n      rules: {\n        number: [required, shouldNotExceedCharLength(30)],\n        expiryDate: [validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.immigration.issuedDate, this.$t('pim.expiry_date_should_be_after_issued_date'))],\n        status: [shouldNotExceedCharLength(30)],\n        issuedDate: [validDateFormat(this.userDateFormat)],\n        reviewDate: [validDateFormat(this.userDateFormat)],\n        comment: [shouldNotExceedCharLength(250)]\n      }\n    };\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        ...this.immigration,\n        countryCode: this.immigration.countryCode?.id\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.immigration = {\n          ...immigrationModel\n        };\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"AA4HA,SACEA,QAAQ,EACRC,yBAAyB,EACzBC,eAAe,EACfC,6BAA6B,QACxB,kCAAkC;AACzC,SAAQC,SAAS,QAAO,mCAAmC;AAC3D,OAAOC,aAAY,MAAO,sCAAsC;AAEhE,MAAMC,gBAAe,GAAI;EACvBC,MAAM,EAAE,EAAE;EACVC,UAAU,EAAE,EAAE;EACdC,UAAU,EAAE,EAAE;EACdC,IAAI,EAAE,CAAC;EACPC,MAAM,EAAE,EAAE;EACVC,UAAU,EAAE,EAAE;EACdC,WAAW,EAAE,IAAI;EACjBC,OAAO,EAAE;AACX,CAAC;AAED,eAAe;EACbC,IAAI,EAAE,iBAAiB;EAEvBC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJP,IAAI,EAAEQ,MAAM;MACZlB,QAAQ,EAAE;IACZ,CAAC;IACDmB,SAAS,EAAE;MACTT,IAAI,EAAEU,KAAK;MACXC,OAAO,EAAE,MAAM;IACjB;EACF,CAAC;EAEDC,KAAK,EAAE,CAAC,OAAO,CAAC;EAEhBC,KAAK,GAAG;IACN,MAAM;MAACC;IAAc,IAAInB,aAAa,EAAE;IAExC,OAAO;MACLmB;IACF,CAAC;EACH,CAAC;EAEDC,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,WAAW,EAAE;QAAC,GAAGrB;MAAgB,CAAC;MAClCsB,SAAS,EAAE,CAAC,GAAGxB,SAAS,EAAE,CAAC;MAC3ByB,KAAK,EAAE;QACLtB,MAAM,EAAE,CAACP,QAAQ,EAAEC,yBAAyB,CAAC,EAAE,CAAC,CAAC;QACjDQ,UAAU,EAAE,CACVP,eAAe,CAAC,IAAI,CAACsB,cAAc,CAAC,EACpCrB,6BAA6B,CAC3B,MAAM,IAAI,CAACwB,WAAW,CAACnB,UAAU,EACjC,IAAI,CAACsB,EAAE,CAAC,6CAA6C,CAAC,CACvD,CACF;QACDnB,MAAM,EAAE,CAACV,yBAAyB,CAAC,EAAE,CAAC,CAAC;QACvCO,UAAU,EAAE,CAACN,eAAe,CAAC,IAAI,CAACsB,cAAc,CAAC,CAAC;QAClDZ,UAAU,EAAE,CAACV,eAAe,CAAC,IAAI,CAACsB,cAAc,CAAC,CAAC;QAClDV,OAAO,EAAE,CAACb,yBAAyB,CAAC,GAAG,CAAC;MAC1C;IACF,CAAC;EACH,CAAC;EAED8B,OAAO,EAAE;IACPC,MAAM,GAAG;MACP,IAAI,CAACN,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACT,IAAG,CACLgB,MAAM,CAAC;QACN,GAAG,IAAI,CAACN,WAAW;QACnBd,WAAW,EAAE,IAAI,CAACc,WAAW,CAACd,WAAW,EAAEqB;MAC7C,CAAC,EACAC,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACC,MAAM,CAACC,WAAW,EAAE;MAClC,CAAC,EACAF,IAAI,CAAC,MAAM;QACV,IAAI,CAACR,WAAU,GAAI;UAAC,GAAGrB;QAAgB,CAAC;QACxC,IAAI,CAACgC,QAAQ,EAAE;MACjB,CAAC,CAAC;IACN,CAAC;IACDA,QAAQ,GAAG;MACT,IAAI,CAACC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;IAC3B;EACF;AACF,CAAC","names":["required","shouldNotExceedCharLength","validDateFormat","endDateShouldBeAfterStartDate","yearRange","useDateFormat","immigrationModel","number","issuedDate","expiryDate","type","status","reviewDate","countryCode","comment","name","props","http","Object","countries","Array","default","emits","setup","userDateFormat","data","isLoading","immigration","yearArray","rules","$t","methods","onSave","create","id","then","$toast","saveSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\SaveImmigration.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-horizontal-padding orangehrm-vertical-padding\">\n    <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n      {{ $t('pim.add_immigration') }}\n    </oxd-text>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-group\n              :label=\"$t('pim.document')\"\n              :classes=\"{wrapper: '--gender-grouped-field'}\"\n            >\n              <oxd-input-field\n                v-model=\"immigration.type\"\n                type=\"radio\"\n                :option-label=\"$t('pim.passport')\"\n                value=\"1\"\n              />\n              <oxd-input-field\n                v-model=\"immigration.type\"\n                type=\"radio\"\n                :option-label=\"$t('pim.visa')\"\n                value=\"2\"\n              />\n            </oxd-input-group>\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"immigration.number\"\n              :label=\"$t('pim.number')\"\n              :rules=\"rules.number\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <date-input\n              v-model=\"immigration.issuedDate\"\n              :label=\"$t('pim.issued_date')\"\n              :rules=\"rules.issuedDate\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <date-input\n              v-model=\"immigration.expiryDate\"\n              :label=\"$t('general.expiry_date')\"\n              :years=\"yearArray\"\n              :rules=\"rules.expiryDate\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"immigration.status\"\n              :label=\"$t('pim.eligible_status')\"\n              :rules=\"rules.status\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"immigration.countryCode\"\n              type=\"select\"\n              :label=\"$t('pim.issued_by')\"\n              :options=\"countries\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <date-input\n              v-model=\"immigration.reviewDate\"\n              :label=\"$t('pim.eligible_review_date')\"\n              :rules=\"rules.reviewDate\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"immigration.comment\"\n              type=\"textarea\"\n              :label=\"$t('general.comments')\"\n              :placeholder=\"$t('general.type_comments_here')\"\n              :rules=\"rules.comment\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </div>\n  <oxd-divider />\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n  validDateFormat,\n  endDateShouldBeAfterStartDate,\n} from '@ohrm/core/util/validation/rules';\nimport {yearRange} from '@ohrm/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\n\nconst immigrationModel = {\n  number: '',\n  issuedDate: '',\n  expiryDate: '',\n  type: 1,\n  status: '',\n  reviewDate: '',\n  countryCode: null,\n  comment: '',\n};\n\nexport default {\n  name: 'SaveImmigration',\n\n  props: {\n    http: {\n      type: Object,\n      required: true,\n    },\n    countries: {\n      type: Array,\n      default: () => [],\n    },\n  },\n\n  emits: ['close'],\n\n  setup() {\n    const {userDateFormat} = useDateFormat();\n\n    return {\n      userDateFormat,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      immigration: {...immigrationModel},\n      yearArray: [...yearRange()],\n      rules: {\n        number: [required, shouldNotExceedCharLength(30)],\n        expiryDate: [\n          validDateFormat(this.userDateFormat),\n          endDateShouldBeAfterStartDate(\n            () => this.immigration.issuedDate,\n            this.$t('pim.expiry_date_should_be_after_issued_date'),\n          ),\n        ],\n        status: [shouldNotExceedCharLength(30)],\n        issuedDate: [validDateFormat(this.userDateFormat)],\n        reviewDate: [validDateFormat(this.userDateFormat)],\n        comment: [shouldNotExceedCharLength(250)],\n      },\n    };\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .create({\n          ...this.immigration,\n          countryCode: this.immigration.countryCode?.id,\n        })\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          this.immigration = {...immigrationModel};\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}