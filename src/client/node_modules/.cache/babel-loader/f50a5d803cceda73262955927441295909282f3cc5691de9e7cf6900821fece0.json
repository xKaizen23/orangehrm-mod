{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { promiseDebounce } from '@ohrm/oxd';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePasswordPolicy from '@/core/util/composable/usePasswordPolicy';\nimport PasswordStrengthIndicator from '@/core/components/labels/PasswordStrengthIndicator';\nexport default {\n  name: 'PasswordInput',\n  components: {\n    'password-strength-indicator': PasswordStrengthIndicator\n  },\n  props: {\n    password: {\n      type: String,\n      required: true\n    },\n    passwordConfirm: {\n      type: String,\n      required: true\n    },\n    isPasswordRequired: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: ['update:password', 'update:passwordConfirm'],\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {\n      passwordStrength,\n      validatePassword\n    } = usePasswordPolicy(http);\n    return {\n      passwordStrength,\n      validatePassword\n    };\n  },\n  data() {\n    return {\n      rules: {\n        password: [v => this.isPasswordRequired ? required(v) : true, shouldNotExceedCharLength(64), promiseDebounce(this.validatePassword, 500)],\n        passwordConfirm: [v => {\n          if (this.isPasswordRequired || this.password.length > 0) {\n            return !!v && v === this.password || this.$t('general.passwords_do_not_match');\n          } else {\n            return true;\n          }\n        }]\n      }\n    };\n  },\n  watch: {\n    password(value) {\n      if (!!this.passwordConfirm && value !== this.passwordConfirm || !!this.passwordConfirm && value === this.passwordConfirm) {\n        this.$nextTick(this.$refs.passwordConfirm.triggerUpdate);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AA4DA,SACEA,QAAQ,EACRC,yBAAyB,QACpB,kCAAkC;AACzC,SAAQC,eAAe,QAAO,WAAW;AACzC,SAAQC,UAAU,QAAO,kCAAkC;AAC3D,OAAOC,iBAAgB,MAAO,0CAA0C;AACxE,OAAOC,yBAAwB,MAAO,oDAAoD;AAE1F,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,UAAU,EAAE;IACV,6BAA6B,EAAEF;EACjC,CAAC;EACDG,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEC,MAAM;MACZX,QAAQ,EAAE;IACZ,CAAC;IACDY,eAAe,EAAE;MACfF,IAAI,EAAEC,MAAM;MACZX,QAAQ,EAAE;IACZ,CAAC;IACDa,kBAAkB,EAAE;MAClBH,IAAI,EAAEI,OAAO;MACbC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,KAAK,EAAE,CAAC,iBAAiB,EAAE,wBAAwB,CAAC;EACpDC,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIf,UAAU,CAACgB,MAAM,CAACC,SAAS,CAACC,OAAO,EAAE,EAAE,CAAC;IACzD,MAAM;MAACC,gBAAgB;MAAEC;IAAgB,IAAInB,iBAAiB,CAACc,IAAI,CAAC;IAEpE,OAAO;MACLI,gBAAgB;MAChBC;IACF,CAAC;EACH,CAAC;EACDC,IAAI,GAAG;IACL,OAAO;MACLC,KAAK,EAAE;QACLhB,QAAQ,EAAE,CACPiB,CAAC,IAAM,IAAI,CAACb,kBAAiB,GAAIb,QAAQ,CAAC0B,CAAC,IAAI,IAAK,EACrDzB,yBAAyB,CAAC,EAAE,CAAC,EAC7BC,eAAe,CAAC,IAAI,CAACqB,gBAAgB,EAAE,GAAG,CAAC,CAC5C;QACDX,eAAe,EAAE,CACdc,CAAC,IAAK;UACL,IAAI,IAAI,CAACb,kBAAiB,IAAK,IAAI,CAACJ,QAAQ,CAACkB,MAAK,GAAI,CAAC,EAAE;YACvD,OACG,CAAC,CAACD,KAAKA,MAAM,IAAI,CAACjB,QAAQ,IAC3B,IAAI,CAACmB,EAAE,CAAC,gCAAgC;UAE5C,OAAO;YACL,OAAO,IAAI;UACb;QACF,CAAC;MAEL;IACF,CAAC;EACH,CAAC;EAEDC,KAAK,EAAE;IACLpB,QAAQ,CAACqB,KAAK,EAAE;MACd,IACG,CAAC,CAAC,IAAI,CAAClB,eAAc,IAAKkB,KAAI,KAAM,IAAI,CAAClB,eAAe,IACxD,CAAC,CAAC,IAAI,CAACA,eAAc,IAAKkB,KAAI,KAAM,IAAI,CAAClB,eAAe,EACzD;QACA,IAAI,CAACmB,SAAS,CAAC,IAAI,CAACC,KAAK,CAACpB,eAAe,CAACqB,aAAa,CAAC;MAC1D;IACF;EACF;AACF,CAAC","names":["required","shouldNotExceedCharLength","promiseDebounce","APIService","usePasswordPolicy","PasswordStrengthIndicator","name","components","props","password","type","String","passwordConfirm","isPasswordRequired","Boolean","default","emits","setup","http","window","appGlobal","baseUrl","passwordStrength","validatePassword","data","rules","v","length","$t","watch","value","$nextTick","$refs","triggerUpdate"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\core\\components\\inputs\\PasswordInput.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <!-- Always use inside OXD-Form -->\n  <oxd-form-row class=\"user-password-row\">\n    <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n      <oxd-grid-item class=\"user-password-cell\">\n        <password-strength-indicator\n          v-if=\"password\"\n          :password-strength=\"passwordStrength\"\n        >\n        </password-strength-indicator>\n        <oxd-input-field\n          type=\"password\"\n          autocomplete=\"off\"\n          :required=\"isPasswordRequired\"\n          :model-value=\"password\"\n          :rules=\"rules.password\"\n          :label=\"$t('general.password')\"\n          @update:model-value=\"$emit('update:password', $event)\"\n        />\n        <oxd-text class=\"user-password-hint\" tag=\"p\">\n          {{ $t('general.password_strength_message') }}\n        </oxd-text>\n      </oxd-grid-item>\n\n      <oxd-grid-item>\n        <oxd-input-field\n          ref=\"passwordConfirm\"\n          type=\"password\"\n          autocomplete=\"off\"\n          :required=\"isPasswordRequired\"\n          :model-value=\"passwordConfirm\"\n          :rules=\"rules.passwordConfirm\"\n          :label=\"$t('general.confirm_password')\"\n          @update:model-value=\"$emit('update:passwordConfirm', $event)\"\n        />\n      </oxd-grid-item>\n    </oxd-grid>\n  </oxd-form-row>\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport {promiseDebounce} from '@ohrm/oxd';\nimport {APIService} from '@/core/util/services/api.service';\nimport usePasswordPolicy from '@/core/util/composable/usePasswordPolicy';\nimport PasswordStrengthIndicator from '@/core/components/labels/PasswordStrengthIndicator';\n\nexport default {\n  name: 'PasswordInput',\n  components: {\n    'password-strength-indicator': PasswordStrengthIndicator,\n  },\n  props: {\n    password: {\n      type: String,\n      required: true,\n    },\n    passwordConfirm: {\n      type: String,\n      required: true,\n    },\n    isPasswordRequired: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  emits: ['update:password', 'update:passwordConfirm'],\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {passwordStrength, validatePassword} = usePasswordPolicy(http);\n\n    return {\n      passwordStrength,\n      validatePassword,\n    };\n  },\n  data() {\n    return {\n      rules: {\n        password: [\n          (v) => (this.isPasswordRequired ? required(v) : true),\n          shouldNotExceedCharLength(64),\n          promiseDebounce(this.validatePassword, 500),\n        ],\n        passwordConfirm: [\n          (v) => {\n            if (this.isPasswordRequired || this.password.length > 0) {\n              return (\n                (!!v && v === this.password) ||\n                this.$t('general.passwords_do_not_match')\n              );\n            } else {\n              return true;\n            }\n          },\n        ],\n      },\n    };\n  },\n\n  watch: {\n    password(value) {\n      if (\n        (!!this.passwordConfirm && value !== this.passwordConfirm) ||\n        (!!this.passwordConfirm && value === this.passwordConfirm)\n      ) {\n        this.$nextTick(this.$refs.passwordConfirm.triggerUpdate);\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.user-password {\n  &-row {\n    padding: 10px;\n    background-color: $oxd-background-white-shadow-color;\n    border-radius: 0.75rem;\n    ::v-deep(.orangehrm-password-chip) {\n      top: -5px;\n      right: 8px;\n    }\n  }\n  &-hint {\n    font-size: 0.75rem;\n  }\n  &-cell {\n    position: relative;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}