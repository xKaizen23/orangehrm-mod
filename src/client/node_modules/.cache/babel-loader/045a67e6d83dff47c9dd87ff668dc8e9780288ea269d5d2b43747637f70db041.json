{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"orangehrm-background-container\"\n};\nconst _hoisted_2 = {\n  class: \"orangehrm-card-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_text = _resolveComponent(\"oxd-text\");\n  const _component_oxd_divider = _resolveComponent(\"oxd-divider\");\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  const _component_oxd_grid_item = _resolveComponent(\"oxd-grid-item\");\n  const _component_oxd_grid = _resolveComponent(\"oxd-grid\");\n  const _component_oxd_form_row = _resolveComponent(\"oxd-form-row\");\n  const _component_required_text = _resolveComponent(\"required-text\");\n  const _component_oxd_button = _resolveComponent(\"oxd-button\");\n  const _component_submit_button = _resolveComponent(\"submit-button\");\n  const _component_oxd_form_actions = _resolveComponent(\"oxd-form-actions\");\n  const _component_oxd_form = _resolveComponent(\"oxd-form\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_oxd_text, {\n    tag: \"h6\",\n    class: \"orangehrm-main-title\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('admin.edit_provider')), 1)]),\n    _: 1\n  }), _createVNode(_component_oxd_divider), _createVNode(_component_oxd_form, {\n    loading: $data.isLoading,\n    onSubmitValid: $options.onSave\n  }, {\n    default: _withCtx(() => [_createVNode(_component_oxd_form_row, null, {\n      default: _withCtx(() => [_createVNode(_component_oxd_grid, {\n        cols: 2,\n        class: \"orangehrm-full-width-grid\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.authProvider.name,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.authProvider.name = $event),\n            rules: $data.rules.name,\n            label: _ctx.$t('general.name'),\n            required: \"\"\n          }, null, 8, [\"modelValue\", \"rules\", \"label\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.authProvider.url,\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.authProvider.url = $event),\n            label: _ctx.$t('admin.url'),\n            required: \"\"\n          }, null, 8, [\"modelValue\", \"label\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.authProvider.clientId,\n            \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.authProvider.clientId = $event),\n            label: _ctx.$t('admin.client_id'),\n            required: \"\"\n          }, null, 8, [\"modelValue\", \"label\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.authProvider.clientSecret,\n            \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.authProvider.clientSecret = $event),\n            label: _ctx.$t('admin.client_secret'),\n            placeholder: $data.secretPlaceholder,\n            required: \"\"\n          }, null, 8, [\"modelValue\", \"label\", \"placeholder\"])]),\n          _: 1\n        })]),\n        _: 1\n      })]),\n      _: 1\n    }), _createVNode(_component_oxd_divider), _createVNode(_component_oxd_form_actions, null, {\n      default: _withCtx(() => [_createVNode(_component_required_text), _createVNode(_component_oxd_button, {\n        type: \"button\",\n        \"display-type\": \"ghost\",\n        label: _ctx.$t('general.cancel'),\n        onClick: $options.onCancel\n      }, null, 8, [\"label\", \"onClick\"]), _createVNode(_component_submit_button)]),\n      _: 1\n    })]),\n    _: 1\n  }, 8, [\"loading\", \"onSubmitValid\"])])]);\n}","map":{"version":3,"mappings":";;EAoBOA,KAAK,EAAC;AAAgC;;EACpCA,KAAK,EAAC;AAA0B;;;;;;;;;;;;;uBADvCC,oBAuDM,OAvDNC,UAuDM,GAtDJC,oBAqDM,OArDNC,UAqDM,GApDJC,aAEWC;IAFDC,GAAG,EAAC,IAAI;IAACP,KAAK,EAAC;;sBACvB,MAA+B,mCAA5BQ,OAAE;;MAEPH,aAAeI,yBACfJ,aA+CWK;IA/CAC,OAAO,EAAEC,eAAS;IAAGC,aAAY,EAAEC;;sBAC5C,MAiCe,CAjCfT,aAiCeU;wBAhCb,MA+BW,CA/BXV,aA+BWW;QA/BAC,IAAI,EAAE,CAAC;QAAEjB,KAAK,EAAC;;0BACxB,MAOgB,CAPhBK,aAOgBa;4BANd,MAKE,CALFb,aAKEc;wBAJSP,kBAAY,CAACQ,IAAI;uEAAjBR,kBAAY,CAACQ,IAAI;YACzBC,KAAK,EAAET,WAAK,CAACQ,IAAI;YACjBE,KAAK,EAAEd,OAAE;YACVe,QAAQ,EAAR;;;YAGJlB,aAMgBa;4BALd,MAIE,CAJFb,aAIEc;wBAHSP,kBAAY,CAACY,GAAG;uEAAhBZ,kBAAY,CAACY,GAAG;YACxBF,KAAK,EAAEd,OAAE;YACVe,QAAQ,EAAR;;;YAGJlB,aAMgBa;4BALd,MAIE,CAJFb,aAIEc;wBAHSP,kBAAY,CAACa,QAAQ;uEAArBb,kBAAY,CAACa,QAAQ;YAC7BH,KAAK,EAAEd,OAAE;YACVe,QAAQ,EAAR;;;YAGJlB,aAOgBa;4BANd,MAKE,CALFb,aAKEc;wBAJSP,kBAAY,CAACc,YAAY;uEAAzBd,kBAAY,CAACc,YAAY;YACjCJ,KAAK,EAAEd,OAAE;YACTmB,WAAW,EAAEf,uBAAiB;YAC/BW,QAAQ,EAAR;;;;;;;QAMRlB,aAAeI,yBACfJ,aASmBuB;wBARjB,MAAiB,CAAjBvB,aAAiBwB,2BACjBxB,aAKEyB;QAJAC,IAAI,EAAC,QAAQ;QACb,cAAY,EAAC,OAAO;QACnBT,KAAK,EAAEd,OAAE;QACTwB,OAAK,EAAElB;yCAEVT,aAAiB4B","names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_oxd_text","tag","_ctx","_component_oxd_divider","_component_oxd_form","loading","$data","onSubmitValid","$options","_component_oxd_form_row","_component_oxd_grid","cols","_component_oxd_grid_item","_component_oxd_input_field","name","rules","label","required","url","clientId","clientSecret","placeholder","_component_oxd_form_actions","_component_required_text","_component_oxd_button","type","onClick","_component_submit_button"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\pages\\socialMediaAuth\\EditProvider.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('admin.edit_provider') }}\n      </oxd-text>\n      <oxd-divider />\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"authProvider.name\"\n                :rules=\"rules.name\"\n                :label=\"$t('general.name')\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"authProvider.url\"\n                :label=\"$t('admin.url')\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"authProvider.clientId\"\n                :label=\"$t('admin.client_id')\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"authProvider.clientSecret\"\n                :label=\"$t('admin.client_secret')\"\n                :placeholder=\"secretPlaceholder\"\n                required\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            type=\"button\"\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {APIService} from '@/core/util/services/api.service';\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\n\nexport default {\n  name: 'EditProvider',\n  props: {\n    id: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/auth/openid-providers',\n    );\n    const {createUniqueValidator} = useServerValidation(http);\n    const providerNameUniqueValidation = createUniqueValidator(\n      'OpenIdProvider',\n      'providerName',\n      {entityId: props.id, matchByField: 'status', matchByValue: 1},\n    );\n\n    return {\n      http,\n      providerNameUniqueValidation,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      secretPlaceholder: '',\n      authProvider: {\n        name: '',\n        url: '',\n        clientId: '',\n        clientSecret: '',\n      },\n      rules: {\n        name: [\n          required,\n          this.providerNameUniqueValidation,\n          shouldNotExceedCharLength(40),\n        ],\n      },\n    };\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.id)\n      .then((response) => {\n        const {data} = response.data;\n        this.authProvider.name = data.providerName;\n        this.authProvider.url = data.providerUrl;\n        this.authProvider.clientId = data.clientId;\n        this.secretPlaceholder = data.clientId ? '******' : '';\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/openIdProvider');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.id, {\n          name: this.authProvider.name,\n          url: this.authProvider.url,\n          clientId: this.authProvider.clientId,\n          clientSecret:\n            this.authProvider.clientSecret === ''\n              ? null\n              : this.authProvider.clientSecret,\n        })\n        .then(() => {\n          this.isLoading = false;\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}