{"ast":null,"code":"import { required, shouldNotExceedCharLength, validSelection } from '@ohrm/core/util/validation/rules';\nimport ReportToEmployeeAutocomplete from '@/orangehrmPimPlugin/components/ReportToEmployeeAutocomplete';\nconst reportToModel = {\n  employee: null,\n  reportingMethod: null\n};\nexport default {\n  name: 'EditEmployeeReportTo',\n  components: {\n    'report-to-employee-autocomplete': ReportToEmployeeAutocomplete\n  },\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    data: {\n      type: Object,\n      required: true\n    },\n    reportingMethods: {\n      type: Array,\n      required: true\n    },\n    type: {\n      type: String,\n      required: true\n    },\n    empNumber: {\n      type: String,\n      required: true\n    },\n    api: {\n      type: String,\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    const allowedEmployeesApi = `/api/v2/pim/employees/${props.empNumber}/report-to/allowed`;\n    return {\n      allowedEmployeesApi\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      reportTo: {\n        ...reportToModel\n      },\n      rules: {\n        employee: [required, shouldNotExceedCharLength(100), validSelection],\n        reportingMethod: [required]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.request({\n      method: 'GET',\n      url: this.type === 'Supervisor' ? `${this.api}${this.data.supervisorEmpNumber}` : `${this.api}${this.data.subordinateEmpNumber}`\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.reportTo.employee = {\n        id: this.type === 'Supervisor' ? data.supervisor.empNumber : data.subordinate.empNumber,\n        label: this.type === 'Supervisor' ? `${data.supervisor.firstName} ${data.supervisor.middleName} ${data.supervisor.lastName}` : `${data.subordinate.firstName} ${data.subordinate.middleName} ${data.subordinate.lastName}`,\n        isPastEmployee: this.type === 'Supervisor' ? data.supervisor.terminationId : data.subordinate.terminationId\n      };\n      this.reportTo.reportingMethod = this.reportingMethods.find(item => item.id === data.reportingMethod.id);\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      const id = this.type === 'Supervisor' ? this.data.supervisorEmpNumber : this.data.subordinateEmpNumber;\n      this.http.update(id, {\n        reportingMethodId: this.reportTo.reportingMethod?.id\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["required","shouldNotExceedCharLength","validSelection","ReportToEmployeeAutocomplete","reportToModel","employee","reportingMethod","name","components","props","http","type","Object","data","reportingMethods","Array","String","empNumber","api","emits","setup","allowedEmployeesApi","isLoading","reportTo","rules","beforeMount","request","method","url","supervisorEmpNumber","subordinateEmpNumber","then","response","id","supervisor","subordinate","label","firstName","middleName","lastName","isPastEmployee","terminationId","find","item","finally","methods","onSave","update","reportingMethodId","$toast","updateSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\EditEmployeeReportTo.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-horizontal-padding orangehrm-top-padding\">\n    <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n      {{ $t('general.edit') }} {{ type }}\n    </oxd-text>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <report-to-employee-autocomplete\n              v-model=\"reportTo.employee\"\n              required\n              disabled\n              :api=\"allowedEmployeesApi\"\n              :rules=\"rules.employee\"\n              :clear=\"false\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"reportTo.reportingMethod\"\n              type=\"select\"\n              :label=\"$t('pim.reporting_method')\"\n              :rules=\"rules.reportingMethod\"\n              :options=\"reportingMethods\"\n              required\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n    <oxd-divider />\n  </div>\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n  validSelection,\n} from '@ohrm/core/util/validation/rules';\nimport ReportToEmployeeAutocomplete from '@/orangehrmPimPlugin/components/ReportToEmployeeAutocomplete';\n\nconst reportToModel = {\n  employee: null,\n  reportingMethod: null,\n};\nexport default {\n  name: 'EditEmployeeReportTo',\n\n  components: {\n    'report-to-employee-autocomplete': ReportToEmployeeAutocomplete,\n  },\n\n  props: {\n    http: {\n      type: Object,\n      required: true,\n    },\n    data: {\n      type: Object,\n      required: true,\n    },\n    reportingMethods: {\n      type: Array,\n      required: true,\n    },\n    type: {\n      type: String,\n      required: true,\n    },\n    empNumber: {\n      type: String,\n      required: true,\n    },\n    api: {\n      type: String,\n      required: true,\n    },\n  },\n\n  emits: ['close'],\n  setup(props) {\n    const allowedEmployeesApi = `/api/v2/pim/employees/${props.empNumber}/report-to/allowed`;\n    return {\n      allowedEmployeesApi,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      reportTo: {...reportToModel},\n      rules: {\n        employee: [required, shouldNotExceedCharLength(100), validSelection],\n        reportingMethod: [required],\n      },\n    };\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .request({\n        method: 'GET',\n        url:\n          this.type === 'Supervisor'\n            ? `${this.api}${this.data.supervisorEmpNumber}`\n            : `${this.api}${this.data.subordinateEmpNumber}`,\n      })\n      .then((response) => {\n        const {data} = response.data;\n        this.reportTo.employee = {\n          id:\n            this.type === 'Supervisor'\n              ? data.supervisor.empNumber\n              : data.subordinate.empNumber,\n          label:\n            this.type === 'Supervisor'\n              ? `${data.supervisor.firstName} ${data.supervisor.middleName} ${data.supervisor.lastName}`\n              : `${data.subordinate.firstName} ${data.subordinate.middleName} ${data.subordinate.lastName}`,\n          isPastEmployee:\n            this.type === 'Supervisor'\n              ? data.supervisor.terminationId\n              : data.subordinate.terminationId,\n        };\n        this.reportTo.reportingMethod = this.reportingMethods.find(\n          (item) => item.id === data.reportingMethod.id,\n        );\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      const id =\n        this.type === 'Supervisor'\n          ? this.data.supervisorEmpNumber\n          : this.data.subordinateEmpNumber;\n      this.http\n        .update(id, {\n          reportingMethodId: this.reportTo.reportingMethod?.id,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}