{"ast":null,"code":"import { APIService } from '@ohrm/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { OxdDialog, promiseDebounce } from '@ohrm/oxd';\nconst customerModel = {\n  id: '',\n  name: '',\n  description: ''\n};\nexport default {\n  name: 'AddCustomerModal',\n  components: {\n    'oxd-dialog': OxdDialog\n  },\n  emits: ['close'],\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/time/customers');\n    http.setIgnorePath('/api/v2/time/validation/customer-name');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      customer: {\n        ...customerModel\n      },\n      rules: {\n        name: [required, shouldNotExceedCharLength(50), promiseDebounce(this.validateCustomerName, 500)],\n        description: [shouldNotExceedCharLength(255)]\n      }\n    };\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        name: this.customer.name,\n        description: this.customer.description\n      }).then(response => {\n        const {\n          data\n        } = response.data;\n        this.$toast.saveSuccess();\n        this.$emit('close', data);\n      });\n    },\n    onCancel() {\n      this.$emit('close');\n    },\n    validateCustomerName(customer) {\n      return new Promise(resolve => {\n        if (customer) {\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/time/validation/customer-name`,\n            params: {\n              customerName: this.customer.name.trim()\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            return data.valid === true ? resolve(true) : resolve(this.$t('general.already_exists'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAgDA,SAAQA,UAAU,QAAO,sCAAsC;AAC/D,SACEC,QAAQ,EACRC,yBAAyB,QACpB,kCAAkC;AACzC,SAAQC,SAAS,EAAEC,eAAe,QAAO,WAAW;AAEpD,MAAMC,aAAY,GAAI;EACpBC,EAAE,EAAE,EAAE;EACNC,IAAI,EAAE,EAAE;EACRC,WAAW,EAAE;AACf,CAAC;AAED,eAAe;EACbD,IAAI,EAAE,kBAAkB;EACxBE,UAAU,EAAE;IACV,YAAY,EAAEN;EAChB,CAAC;EACDO,KAAK,EAAE,CAAC,OAAO,CAAC;EAChBC,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIZ,UAAU,CACzBa,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,wBAAwB,CACzB;IACDH,IAAI,CAACI,aAAa,CAAC,uCAAuC,CAAC;IAC3D,OAAO;MACLJ;IACF,CAAC;EACH,CAAC;EACDK,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,QAAQ,EAAE;QAAC,GAAGd;MAAa,CAAC;MAC5Be,KAAK,EAAE;QACLb,IAAI,EAAE,CACJN,QAAQ,EACRC,yBAAyB,CAAC,EAAE,CAAC,EAC7BE,eAAe,CAAC,IAAI,CAACiB,oBAAoB,EAAE,GAAG,CAAC,CAChD;QACDb,WAAW,EAAE,CAACN,yBAAyB,CAAC,GAAG,CAAC;MAC9C;IACF,CAAC;EACH,CAAC;EACDoB,OAAO,EAAE;IACPC,MAAM,GAAG;MACP,IAAI,CAACL,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACN,IAAG,CACLY,MAAM,CAAC;QACNjB,IAAI,EAAE,IAAI,CAACY,QAAQ,CAACZ,IAAI;QACxBC,WAAW,EAAE,IAAI,CAACW,QAAQ,CAACX;MAC7B,CAAC,EACAiB,IAAI,CAAEC,QAAQ,IAAK;QAClB,MAAM;UAACT;QAAI,IAAIS,QAAQ,CAACT,IAAI;QAC5B,IAAI,CAACU,MAAM,CAACC,WAAW,EAAE;QACzB,IAAI,CAACC,KAAK,CAAC,OAAO,EAAEZ,IAAI,CAAC;MAC3B,CAAC,CAAC;IACN,CAAC;IACDa,QAAQ,GAAG;MACT,IAAI,CAACD,KAAK,CAAC,OAAO,CAAC;IACrB,CAAC;IACDR,oBAAoB,CAACF,QAAQ,EAAE;MAC7B,OAAO,IAAIY,OAAO,CAAEC,OAAO,IAAK;QAC9B,IAAIb,QAAQ,EAAE;UACZ,IAAI,CAACP,IAAG,CACLqB,OAAO,CAAC;YACPC,MAAM,EAAE,KAAK;YACbC,GAAG,EAAG,uCAAsC;YAC5CC,MAAM,EAAE;cACNC,YAAY,EAAE,IAAI,CAAClB,QAAQ,CAACZ,IAAI,CAAC+B,IAAI;YACvC;UACF,CAAC,EACAb,IAAI,CAAEC,QAAQ,IAAK;YAClB,MAAM;cAACT;YAAI,IAAIS,QAAQ,CAACT,IAAI;YAC5B,OAAOA,IAAI,CAACsB,KAAI,KAAM,IAAG,GACrBP,OAAO,CAAC,IAAI,IACZA,OAAO,CAAC,IAAI,CAACQ,EAAE,CAAC,wBAAwB,CAAC,CAAC;UAChD,CAAC,CAAC;QACN,OAAO;UACLR,OAAO,CAAC,IAAI,CAAC;QACf;MACF,CAAC,CAAC;IACJ;EACF;AACF,CAAC","names":["APIService","required","shouldNotExceedCharLength","OxdDialog","promiseDebounce","customerModel","id","name","description","components","emits","setup","http","window","appGlobal","baseUrl","setIgnorePath","data","isLoading","customer","rules","validateCustomerName","methods","onSave","create","then","response","$toast","saveSuccess","$emit","onCancel","Promise","resolve","request","method","url","params","customerName","trim","valid","$t"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmTimePlugin\\components\\AddCustomerModal.vue"],"sourcesContent":["<template>\n  <oxd-dialog\n    :style=\"{width: '90%', maxWidth: '450px'}\"\n    @update:show=\"onCancel\"\n  >\n    <div class=\"orangehrm-modal-header\">\n      <oxd-text type=\"card-title\">\n        {{ $t('time.add_customer') }}\n      </oxd-text>\n    </div>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-input-field\n          v-model=\"customer.name\"\n          :label=\"$t('general.name')\"\n          :rules=\"rules.name\"\n          required\n        />\n      </oxd-form-row>\n      <oxd-form-row>\n        <oxd-input-field\n          v-model=\"customer.description\"\n          type=\"textarea\"\n          :label=\"$t('general.description')\"\n          placeholder=\"Type description here\"\n          :rules=\"rules.description\"\n        />\n      </oxd-form-row>\n      <oxd-divider />\n      <oxd-form-actions class=\"orangehrm-form-action\">\n        <required-text />\n        <oxd-button\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <oxd-button\n          display-type=\"secondary\"\n          :label=\"$t('general.save')\"\n          type=\"submit\"\n        />\n      </oxd-form-actions>\n    </oxd-form>\n  </oxd-dialog>\n</template>\n\n<script>\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport {OxdDialog, promiseDebounce} from '@ohrm/oxd';\n\nconst customerModel = {\n  id: '',\n  name: '',\n  description: '',\n};\n\nexport default {\n  name: 'AddCustomerModal',\n  components: {\n    'oxd-dialog': OxdDialog,\n  },\n  emits: ['close'],\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/time/customers',\n    );\n    http.setIgnorePath('/api/v2/time/validation/customer-name');\n    return {\n      http,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      customer: {...customerModel},\n      rules: {\n        name: [\n          required,\n          shouldNotExceedCharLength(50),\n          promiseDebounce(this.validateCustomerName, 500),\n        ],\n        description: [shouldNotExceedCharLength(255)],\n      },\n    };\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .create({\n          name: this.customer.name,\n          description: this.customer.description,\n        })\n        .then((response) => {\n          const {data} = response.data;\n          this.$toast.saveSuccess();\n          this.$emit('close', data);\n        });\n    },\n    onCancel() {\n      this.$emit('close');\n    },\n    validateCustomerName(customer) {\n      return new Promise((resolve) => {\n        if (customer) {\n          this.http\n            .request({\n              method: 'GET',\n              url: `/api/v2/time/validation/customer-name`,\n              params: {\n                customerName: this.customer.name.trim(),\n              },\n            })\n            .then((response) => {\n              const {data} = response.data;\n              return data.valid === true\n                ? resolve(true)\n                : resolve(this.$t('general.already_exists'));\n            });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}