{"ast":null,"code":"import { computed, ref } from 'vue';\nimport useSort from '@/core/util/composable/useSort';\nimport { navigate } from '@/core/util/helper/navigation';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { shouldNotExceedCharLength, validSelection } from '@/core/util/validation/rules';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@/core/util/composable/usePaginate';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nconst defaultFilters = {\n  empNumber: null\n};\nconst defaultSortOrder = {\n  'performanceTracker.modifiedDate': 'DESC',\n  'employee.lastName': 'ASC',\n  'performanceTracker.trackerName': 'ASC',\n  'performanceTracker.addedDate': 'DESC'\n};\nexport default {\n  name: 'TrackerList',\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'employee-autocomplete': EmployeeAutocomplete\n  },\n  props: {\n    unselectableIds: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup() {\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const trackerNormalizer = data => {\n      return data.map(row => {\n        return {\n          id: row.id,\n          tracker: row.trackerName,\n          addDate: formatDate(parseDate(row.addedDate), jsDateFormat, {\n            locale\n          }),\n          modifiedDate: formatDate(parseDate(row.modifiedDate), jsDateFormat, {\n            locale\n          }),\n          empName: $tEmpName(row.employee, {\n            includeMiddle: false,\n            excludePastEmpTag: false\n          })\n        };\n      });\n    };\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/performance/config/trackers');\n    const filters = ref({\n      ...defaultFilters\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        empNumber: filters.value.empNumber?.id,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n        includeEmployees: filters.value.includeEmployees?.param\n      };\n    });\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      response,\n      pages,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: trackerNormalizer,\n      prefetch: true,\n      toastNoRecords: true\n    });\n    onSort(execQuery);\n    return {\n      http,\n      total,\n      isLoading,\n      showPaginator,\n      currentPage,\n      pages,\n      response,\n      execQuery,\n      sortDefinition,\n      filters\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'empName',\n        title: this.$t('general.employee'),\n        slot: 'title',\n        sortField: 'employee.lastName',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'tracker',\n        title: this.$t('performance.tracker'),\n        style: {\n          flex: 1\n        },\n        sortField: 'performanceTracker.trackerName'\n      }, {\n        name: 'addDate',\n        title: this.$t('performance.added_date'),\n        sortField: 'performanceTracker.addedDate',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'modifiedDate',\n        title: this.$t('performance.modified_date'),\n        sortField: 'performanceTracker.modifiedDate',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      checkedItems: [],\n      rules: {\n        employee: [shouldNotExceedCharLength(100), validSelection]\n      }\n    };\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/performance/addPerformanceTracker');\n    },\n    onClickEdit(item) {\n      navigate('/performance/addPerformanceTracker/{id}', {\n        id: item.id\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.response?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      const isSelectable = this.unselectableIds.findIndex(id => id == item.id);\n      if (isSelectable > -1) {\n        return this.$toast.cannotDelete();\n      }\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.filterItems();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["computed","ref","useSort","navigate","useLocale","shouldNotExceedCharLength","validSelection","APIService","usePaginate","useDateFormat","formatDate","parseDate","EmployeeAutocomplete","useEmployeeNameTranslate","DeleteConfirmationDialog","defaultFilters","empNumber","defaultSortOrder","name","components","props","unselectableIds","type","Array","default","setup","locale","jsDateFormat","$tEmpName","trackerNormalizer","data","map","row","id","tracker","trackerName","addDate","addedDate","modifiedDate","empName","employee","includeMiddle","excludePastEmpTag","http","window","appGlobal","baseUrl","filters","sortDefinition","sortField","sortOrder","onSort","serializedFilters","value","includeEmployees","param","showPaginator","currentPage","total","response","pages","isLoading","execQuery","query","normalizer","prefetch","toastNoRecords","headers","title","$t","slot","style","flex","cellType","cellConfig","delete","onClick","onClickDelete","component","edit","onClickEdit","checkedItems","rules","methods","onClickAdd","item","onClickDeleteSelected","ids","index","$refs","deleteDialog","showDialog","then","confirmation","deleteItems","isSelectable","findIndex","$toast","cannotDelete","items","deleteAll","deleteSuccess","resetDataTable","filterItems","onClickReset"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPerformancePlugin\\pages\\PerformanceTrackers.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n<template>\n  <div class=\"orangehrm-background-container\">\n    <oxd-table-filter :filter-title=\"$t('performance.performance_trackers')\">\n      <oxd-form @submit-valid=\"filterItems\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"4\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <employee-autocomplete\n                v-model=\"filters.empNumber\"\n                :rules=\"rules.employee\"\n                :params=\"{\n                  includeEmployees: 'currentAndPast',\n                }\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <oxd-divider />\n        <oxd-form-actions>\n          <oxd-button\n            display-type=\"ghost\"\n            :label=\"$t('general.reset')\"\n            @click=\"onClickReset\"\n          />\n          <oxd-button\n            class=\"orangehrm-left-space\"\n            display-type=\"secondary\"\n            :label=\"$t('general.search')\"\n            type=\"submit\"\n          />\n        </oxd-form-actions>\n      </oxd-form>\n    </oxd-table-filter>\n    <br />\n    <div class=\"orangehrm-paper-container\">\n      <div class=\"orangehrm-header-container\">\n        <oxd-button\n          display-type=\"secondary\"\n          icon-name=\"plus\"\n          :label=\"$t('general.add')\"\n          @click=\"onClickAdd\"\n        />\n      </div>\n      <table-header\n        :loading=\"isLoading\"\n        :selected=\"checkedItems.length\"\n        :total=\"total\"\n        @delete=\"onClickDeleteSelected\"\n      ></table-header>\n      <div class=\"orangehrm-container\">\n        <oxd-card-table\n          v-model:order=\"sortDefinition\"\n          v-model:selected=\"checkedItems\"\n          :clickable=\"false\"\n          :headers=\"headers\"\n          :items=\"response?.data\"\n          :loading=\"isLoading\"\n          :selectable=\"true\"\n          row-decorator=\"oxd-table-decorator-card\"\n        />\n      </div>\n      <div class=\"orangehrm-bottom-container\">\n        <oxd-pagination\n          v-if=\"showPaginator\"\n          v-model:current=\"currentPage\"\n          :length=\"pages\"\n        ></oxd-pagination>\n      </div>\n    </div>\n    <delete-confirmation ref=\"deleteDialog\"></delete-confirmation>\n  </div>\n</template>\n\n<script>\nimport {computed, ref} from 'vue';\nimport useSort from '@/core/util/composable/useSort';\nimport {navigate} from '@/core/util/helper/navigation';\nimport useLocale from '@/core/util/composable/useLocale';\nimport {\n  shouldNotExceedCharLength,\n  validSelection,\n} from '@/core/util/validation/rules';\nimport {APIService} from '@/core/util/services/api.service';\nimport usePaginate from '@/core/util/composable/usePaginate';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport {formatDate, parseDate} from '@ohrm/core/util/helper/datefns';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\n\nconst defaultFilters = {\n  empNumber: null,\n};\n\nconst defaultSortOrder = {\n  'performanceTracker.modifiedDate': 'DESC',\n  'employee.lastName': 'ASC',\n  'performanceTracker.trackerName': 'ASC',\n  'performanceTracker.addedDate': 'DESC',\n};\n\nexport default {\n  name: 'TrackerList',\n\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'employee-autocomplete': EmployeeAutocomplete,\n  },\n  props: {\n    unselectableIds: {\n      type: Array,\n      default: () => [],\n    },\n  },\n\n  setup() {\n    const {locale} = useLocale();\n    const {jsDateFormat} = useDateFormat();\n    const {$tEmpName} = useEmployeeNameTranslate();\n\n    const trackerNormalizer = (data) => {\n      return data.map((row) => {\n        return {\n          id: row.id,\n          tracker: row.trackerName,\n          addDate: formatDate(parseDate(row.addedDate), jsDateFormat, {\n            locale,\n          }),\n          modifiedDate: formatDate(parseDate(row.modifiedDate), jsDateFormat, {\n            locale,\n          }),\n          empName: $tEmpName(row.employee, {\n            includeMiddle: false,\n            excludePastEmpTag: false,\n          }),\n        };\n      });\n    };\n\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/performance/config/trackers',\n    );\n\n    const filters = ref({...defaultFilters});\n\n    const {sortDefinition, sortField, sortOrder, onSort} = useSort({\n      sortDefinition: defaultSortOrder,\n    });\n\n    const serializedFilters = computed(() => {\n      return {\n        empNumber: filters.value.empNumber?.id,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n        includeEmployees: filters.value.includeEmployees?.param,\n      };\n    });\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      response,\n      pages,\n      isLoading,\n      execQuery,\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: trackerNormalizer,\n      prefetch: true,\n      toastNoRecords: true,\n    });\n\n    onSort(execQuery);\n\n    return {\n      http,\n      total,\n      isLoading,\n      showPaginator,\n      currentPage,\n      pages,\n      response,\n      execQuery,\n      sortDefinition,\n      filters,\n    };\n  },\n\n  data() {\n    return {\n      headers: [\n        {\n          name: 'empName',\n          title: this.$t('general.employee'),\n          slot: 'title',\n          sortField: 'employee.lastName',\n          style: {flex: 1},\n        },\n        {\n          name: 'tracker',\n          title: this.$t('performance.tracker'),\n          style: {flex: 1},\n          sortField: 'performanceTracker.trackerName',\n        },\n        {\n          name: 'addDate',\n          title: this.$t('performance.added_date'),\n          sortField: 'performanceTracker.addedDate',\n          style: {flex: 1},\n        },\n        {\n          name: 'modifiedDate',\n          title: this.$t('performance.modified_date'),\n          sortField: 'performanceTracker.modifiedDate',\n          style: {flex: 1},\n        },\n        {\n          name: 'actions',\n          slot: 'action',\n          title: this.$t('general.actions'),\n          style: {flex: 1},\n          cellType: 'oxd-table-cell-actions',\n          cellConfig: {\n            delete: {\n              onClick: this.onClickDelete,\n              component: 'oxd-icon-button',\n              props: {\n                name: 'trash',\n              },\n            },\n            edit: {\n              onClick: this.onClickEdit,\n              props: {\n                name: 'pencil-fill',\n              },\n            },\n          },\n        },\n      ],\n      checkedItems: [],\n      rules: {\n        employee: [shouldNotExceedCharLength(100), validSelection],\n      },\n    };\n  },\n\n  methods: {\n    onClickAdd() {\n      navigate('/performance/addPerformanceTracker');\n    },\n    onClickEdit(item) {\n      navigate('/performance/addPerformanceTracker/{id}', {id: item.id});\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map((index) => {\n        return this.response?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      const isSelectable = this.unselectableIds.findIndex(\n        (id) => id == item.id,\n      );\n      if (isSelectable > -1) {\n        return this.$toast.cannotDelete();\n      }\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http\n          .deleteAll({\n            ids: items,\n          })\n          .then(() => {\n            return this.$toast.deleteSuccess();\n          })\n          .then(() => {\n            this.isLoading = false;\n            this.resetDataTable();\n          });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {...defaultFilters};\n      this.filterItems();\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}