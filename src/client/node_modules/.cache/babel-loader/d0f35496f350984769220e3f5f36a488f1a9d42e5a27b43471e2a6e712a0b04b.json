{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { required, validSelection, validDateFormat, validTimeFormat, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport { navigate } from '@/core/util/helper/navigation';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { APIService } from '@/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport CandidateActionLayout from '@/orangehrmRecruitmentPlugin/components/CandidateActionLayout.vue';\nimport InterviewerAutocomplete from '@/orangehrmRecruitmentPlugin/components/InterviewerAutocomplete.vue';\nconst actionHistoryModel = {\n  id: null,\n  action: {\n    id: null,\n    label: null\n  },\n  performedBy: {\n    empNumber: null,\n    lastName: null,\n    firstName: null,\n    middleName: null,\n    terminationId: null\n  },\n  interview: {\n    id: null\n  },\n  performedDate: null,\n  note: null\n};\nconst interviewModel = {\n  interviewName: null,\n  interviewDate: null,\n  interviewTime: null\n};\nexport default {\n  components: {\n    'candidate-action-layout': CandidateActionLayout,\n    'interviewer-autocomplete': InterviewerAutocomplete\n  },\n  props: {\n    candidateId: {\n      type: Number,\n      required: true\n    },\n    historyId: {\n      type: Number,\n      required: true\n    },\n    editable: {\n      type: Boolean,\n      required: false,\n      default: true\n    }\n  },\n  setup(props) {\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/recruitment/candidates/${props.candidateId}/history`);\n    return {\n      http,\n      locale,\n      jsDateFormat,\n      userDateFormat,\n      translateEmpName: $tEmpName\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      history: {\n        ...actionHistoryModel\n      },\n      interview: {\n        ...interviewModel\n      },\n      interviewers: [],\n      rules: {\n        interviewName: [required, shouldNotExceedCharLength(100)],\n        interviewDate: [required, validDateFormat(this.userDateFormat)],\n        interviewTime: [validTimeFormat],\n        interviewerName: [required, validSelection, value => {\n          return this.interviewers.filter(interviewer => interviewer && interviewer.id === value?.id).length < 2 ? true : this.$t('general.already_exists');\n        }],\n        note: [shouldNotExceedCharLength(2000)]\n      },\n      statuses: [{\n        id: 1,\n        label: this.$t('recruitment.application_initiated')\n      }, {\n        id: 2,\n        label: this.$t('recruitment.shortlist')\n      }, {\n        id: 3,\n        label: this.$t('general.reject')\n      }, {\n        id: 4,\n        label: this.$t('recruitment.schedule_interview')\n      }, {\n        id: 5,\n        label: this.$t('recruitment.mark_interview_passed')\n      }, {\n        id: 6,\n        label: this.$t('recruitment.mark_interview_failed')\n      }, {\n        id: 7,\n        label: this.$t('recruitment.offer_job')\n      }, {\n        id: 8,\n        label: this.$t('recruitment.decline_offer')\n      }, {\n        id: 9,\n        label: this.$t('recruitment.hire')\n      }],\n      disabled: false\n    };\n  },\n  computed: {\n    performedBy() {\n      return this.translateEmpName(this.history.performedBy, {\n        includeMiddle: true,\n        excludePastEmpTag: false\n      });\n    },\n    performedDate() {\n      return formatDate(parseDate(this.history.performedDate), this.jsDateFormat, {\n        locale: this.locale\n      });\n    },\n    performedAction() {\n      return this.statuses.find(item => item.id === this.history.action.id)?.label || null;\n    },\n    isScheduleInterview() {\n      return this.history.interview?.id && this.history.action?.id === 4;\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.historyId).then(response => {\n      const {\n        data,\n        meta\n      } = response.data;\n      this.history = {\n        ...data\n      };\n      this.disabled = meta.disabled;\n      return this.isScheduleInterview ? this.http.request({\n        method: 'GET',\n        url: `/api/v2/recruitment/candidates/${this.candidateId}/interviews/${this.history.interview.id}`\n      }) : null;\n    }).then(response => {\n      if (response) {\n        const {\n          data\n        } = response.data;\n        this.interview.interviewName = data.name;\n        this.interview.interviewDate = data.interviewDate;\n        this.interview.interviewTime = data.interviewTime;\n        this.history.note = data.note;\n        if (Array.isArray(data.interviewers)) {\n          this.interviewers = data.interviewers.map(interviewer => ({\n            id: interviewer.empNumber,\n            label: this.translateEmpName(interviewer, {\n              includeMiddle: true,\n              excludePastEmpTag: true\n            }),\n            isPastEmployee: interviewer.terminationId ? true : false\n          }));\n        }\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onAddAnother() {\n      if (this.interviewers.length < 5) {\n        this.interviewers.push(null);\n      }\n    },\n    onRemoveInterviewer(index) {\n      this.interviewers.splice(index, 1);\n    },\n    onSave() {\n      this.loading = true;\n      this.http.update(this.historyId, {\n        note: this.history.note\n      }).then(() => {\n        return this.isScheduleInterview ? this.http.request({\n          method: 'PUT',\n          url: `/api/v2/recruitment/candidates/${this.candidateId}/interviews/${this.history.interview.id}`,\n          data: {\n            ...this.interview,\n            note: this.history.note,\n            interviewerEmpNumbers: this.interviewers.map(interviewer => interviewer?.id).filter(Number)\n          }\n        }) : null;\n      }).then(() => {\n        this.loading = false;\n        this.$toast.saveSuccess();\n      });\n    },\n    onClickBack() {\n      navigate('/recruitment/addCandidate/{id}', {\n        id: this.candidateId\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["required","validSelection","validDateFormat","validTimeFormat","shouldNotExceedCharLength","navigate","useLocale","APIService","useDateFormat","formatDate","parseDate","useEmployeeNameTranslate","CandidateActionLayout","InterviewerAutocomplete","actionHistoryModel","id","action","label","performedBy","empNumber","lastName","firstName","middleName","terminationId","interview","performedDate","note","interviewModel","interviewName","interviewDate","interviewTime","components","props","candidateId","type","Number","historyId","editable","Boolean","default","setup","locale","jsDateFormat","userDateFormat","$tEmpName","http","window","appGlobal","baseUrl","translateEmpName","data","isLoading","history","interviewers","rules","interviewerName","value","filter","interviewer","length","$t","statuses","disabled","computed","includeMiddle","excludePastEmpTag","performedAction","find","item","isScheduleInterview","beforeMount","get","then","response","meta","request","method","url","name","Array","isArray","map","isPastEmployee","finally","methods","onAddAnother","push","onRemoveInterviewer","index","splice","onSave","loading","update","interviewerEmpNumbers","$toast","saveSuccess","onClickBack"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmRecruitmentPlugin\\pages\\ViewActionHistory.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <candidate-action-layout\n      :loading=\"isLoading\"\n      :candidate-id=\"candidateId\"\n      :title=\"$t('recruitment.view_action_history')\"\n      @submit-valid=\"onSave\"\n    >\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              :label=\"$t('recruitment.performed_action')\"\n              :value=\"performedAction\"\n              readonly\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              :label=\"$t('general.performed_by')\"\n              :value=\"performedBy\"\n              readonly\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              :label=\"$t('recruitment.performed_date')\"\n              :value=\"performedDate\"\n              readonly\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-row v-if=\"isScheduleInterview\">\n        <oxd-grid :cols=\"3\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"interview.interviewName\"\n              :rules=\"rules.interviewName\"\n              :label=\"$t('recruitment.interview_title')\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item class=\"--offset-row-2\">\n            <interviewer-autocomplete\n              v-for=\"(interviewer, index) in interviewers\"\n              :key=\"index\"\n              v-model=\"interviewers[index]\"\n              :show-delete=\"index > 0\"\n              :rules=\"\n                rules.interviewerName.filter((_, i) => index === 0 || i > 0)\n              \"\n              include-employees=\"onlyCurrent\"\n              required\n              :disabled=\"!editable\"\n              @remove=\"onRemoveInterviewer(index)\"\n            />\n            <oxd-button\n              v-if=\"interviewers.length < 5 && editable\"\n              icon-name=\"plus\"\n              display-type=\"text\"\n              class=\"orangehrm-input-field-bottom-space\"\n              :label=\"$t('general.add_another')\"\n              @click=\"onAddAnother\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item class=\"--offset-row-2\">\n            <date-input\n              v-model=\"interview.interviewDate\"\n              :rules=\"rules.interviewDate\"\n              :label=\"$t('general.date')\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item class=\"--offset-row-2\">\n            <time-input\n              v-model=\"interview.interviewTime\"\n              :rules=\"rules.interviewTime\"\n              :label=\"$t('general.time')\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\">\n          <oxd-grid-item class=\"--span-column-2\">\n            <oxd-input-field\n              v-model=\"history.note\"\n              :rules=\"rules.note\"\n              :label=\"$t('general.notes')\"\n              :placeholder=\"$t('general.type_here')\"\n              type=\"textarea\"\n              :disabled=\"disabled\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-divider />\n      <oxd-form-actions>\n        <oxd-button\n          display-type=\"ghost\"\n          :label=\"$t('general.back')\"\n          @click=\"onClickBack\"\n        />\n        <submit-button v-if=\"!disabled\" :label=\"$t('general.save')\" />\n      </oxd-form-actions>\n    </candidate-action-layout>\n  </div>\n</template>\n\n<script>\nimport {\n  required,\n  validSelection,\n  validDateFormat,\n  validTimeFormat,\n  shouldNotExceedCharLength,\n} from '@/core/util/validation/rules';\nimport {navigate} from '@/core/util/helper/navigation';\nimport useLocale from '@/core/util/composable/useLocale';\nimport {APIService} from '@/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport {formatDate, parseDate} from '@/core/util/helper/datefns';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport CandidateActionLayout from '@/orangehrmRecruitmentPlugin/components/CandidateActionLayout.vue';\nimport InterviewerAutocomplete from '@/orangehrmRecruitmentPlugin/components/InterviewerAutocomplete.vue';\n\nconst actionHistoryModel = {\n  id: null,\n  action: {\n    id: null,\n    label: null,\n  },\n  performedBy: {\n    empNumber: null,\n    lastName: null,\n    firstName: null,\n    middleName: null,\n    terminationId: null,\n  },\n  interview: {\n    id: null,\n  },\n  performedDate: null,\n  note: null,\n};\n\nconst interviewModel = {\n  interviewName: null,\n  interviewDate: null,\n  interviewTime: null,\n};\n\nexport default {\n  components: {\n    'candidate-action-layout': CandidateActionLayout,\n    'interviewer-autocomplete': InterviewerAutocomplete,\n  },\n\n  props: {\n    candidateId: {\n      type: Number,\n      required: true,\n    },\n    historyId: {\n      type: Number,\n      required: true,\n    },\n    editable: {\n      type: Boolean,\n      required: false,\n      default: true,\n    },\n  },\n\n  setup(props) {\n    const {locale} = useLocale();\n    const {jsDateFormat, userDateFormat} = useDateFormat();\n    const {$tEmpName} = useEmployeeNameTranslate();\n\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/recruitment/candidates/${props.candidateId}/history`,\n    );\n\n    return {\n      http,\n      locale,\n      jsDateFormat,\n      userDateFormat,\n      translateEmpName: $tEmpName,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      history: {...actionHistoryModel},\n      interview: {...interviewModel},\n      interviewers: [],\n      rules: {\n        interviewName: [required, shouldNotExceedCharLength(100)],\n        interviewDate: [required, validDateFormat(this.userDateFormat)],\n        interviewTime: [validTimeFormat],\n        interviewerName: [\n          required,\n          validSelection,\n          (value) => {\n            return this.interviewers.filter(\n              (interviewer) => interviewer && interviewer.id === value?.id,\n            ).length < 2\n              ? true\n              : this.$t('general.already_exists');\n          },\n        ],\n        note: [shouldNotExceedCharLength(2000)],\n      },\n      statuses: [\n        {id: 1, label: this.$t('recruitment.application_initiated')},\n        {id: 2, label: this.$t('recruitment.shortlist')},\n        {id: 3, label: this.$t('general.reject')},\n        {id: 4, label: this.$t('recruitment.schedule_interview')},\n        {id: 5, label: this.$t('recruitment.mark_interview_passed')},\n        {id: 6, label: this.$t('recruitment.mark_interview_failed')},\n        {id: 7, label: this.$t('recruitment.offer_job')},\n        {id: 8, label: this.$t('recruitment.decline_offer')},\n        {id: 9, label: this.$t('recruitment.hire')},\n      ],\n      disabled: false,\n    };\n  },\n\n  computed: {\n    performedBy() {\n      return this.translateEmpName(this.history.performedBy, {\n        includeMiddle: true,\n        excludePastEmpTag: false,\n      });\n    },\n    performedDate() {\n      return formatDate(\n        parseDate(this.history.performedDate),\n        this.jsDateFormat,\n        {locale: this.locale},\n      );\n    },\n    performedAction() {\n      return (\n        this.statuses.find((item) => item.id === this.history.action.id)\n          ?.label || null\n      );\n    },\n    isScheduleInterview() {\n      return this.history.interview?.id && this.history.action?.id === 4;\n    },\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.historyId)\n      .then((response) => {\n        const {data, meta} = response.data;\n        this.history = {...data};\n        this.disabled = meta.disabled;\n        return this.isScheduleInterview\n          ? this.http.request({\n              method: 'GET',\n              url: `/api/v2/recruitment/candidates/${this.candidateId}/interviews/${this.history.interview.id}`,\n            })\n          : null;\n      })\n      .then((response) => {\n        if (response) {\n          const {data} = response.data;\n          this.interview.interviewName = data.name;\n          this.interview.interviewDate = data.interviewDate;\n          this.interview.interviewTime = data.interviewTime;\n          this.history.note = data.note;\n          if (Array.isArray(data.interviewers)) {\n            this.interviewers = data.interviewers.map((interviewer) => ({\n              id: interviewer.empNumber,\n              label: this.translateEmpName(interviewer, {\n                includeMiddle: true,\n                excludePastEmpTag: true,\n              }),\n              isPastEmployee: interviewer.terminationId ? true : false,\n            }));\n          }\n        }\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onAddAnother() {\n      if (this.interviewers.length < 5) {\n        this.interviewers.push(null);\n      }\n    },\n    onRemoveInterviewer(index) {\n      this.interviewers.splice(index, 1);\n    },\n    onSave() {\n      this.loading = true;\n      this.http\n        .update(this.historyId, {\n          note: this.history.note,\n        })\n        .then(() => {\n          return this.isScheduleInterview\n            ? this.http.request({\n                method: 'PUT',\n                url: `/api/v2/recruitment/candidates/${this.candidateId}/interviews/${this.history.interview.id}`,\n                data: {\n                  ...this.interview,\n                  note: this.history.note,\n                  interviewerEmpNumbers: this.interviewers\n                    .map((interviewer) => interviewer?.id)\n                    .filter(Number),\n                },\n              })\n            : null;\n        })\n        .then(() => {\n          this.loading = false;\n          this.$toast.saveSuccess();\n        });\n    },\n    onClickBack() {\n      navigate('/recruitment/addCandidate/{id}', {id: this.candidateId});\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}