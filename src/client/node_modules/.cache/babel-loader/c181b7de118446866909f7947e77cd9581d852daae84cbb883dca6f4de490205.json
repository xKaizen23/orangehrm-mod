{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed, ref } from 'vue';\nimport { validSelection } from '@/core/util/validation/rules';\nimport { APIService } from '@/core/util/services/api.service';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport ReportAutocomplete from '@/orangehrmPimPlugin/components/ReportAutocomplete';\nconst defaultFilters = {\n  report: null\n};\nconst defaultSortOrder = {\n  'report.name': 'ASC'\n};\nexport default {\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'report-autocomplete': ReportAutocomplete\n  },\n  setup() {\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const filters = ref({\n      ...defaultFilters\n    });\n    const serializedFilters = computed(() => {\n      return {\n        reportId: filters.value.report?.id,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/pim/reports/defined');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      sortDefinition\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'name',\n        slot: 'title',\n        title: this.$t('general.name'),\n        style: {\n          flex: '85%'\n        },\n        sortField: 'report.name'\n      }, {\n        name: 'actions',\n        title: this.$t('general.actions'),\n        slot: 'action',\n        style: {\n          flex: '15%'\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          },\n          view: {\n            onClick: this.onClickView,\n            props: {\n              name: 'file-text-fill'\n            }\n          }\n        }\n      }],\n      checkedItems: [],\n      rules: {\n        report: [validSelection]\n      }\n    };\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/pim/definePredefinedReport');\n    },\n    onClickEdit(item) {\n      navigate('/pim/definePredefinedReport/{id}', {\n        id: item.id\n      });\n    },\n    onClickView(item) {\n      navigate('/pim/displayPredefinedReport/{id}', {\n        id: item.id\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = [];\n      this.checkedItems.forEach(index => {\n        ids.push(this.items?.data[index].id);\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.filterItems();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["computed","ref","validSelection","APIService","useSort","navigate","usePaginate","DeleteConfirmationDialog","ReportAutocomplete","defaultFilters","report","defaultSortOrder","components","setup","sortDefinition","sortField","sortOrder","onSort","filters","serializedFilters","reportId","value","id","http","window","appGlobal","baseUrl","showPaginator","currentPage","total","pages","pageSize","response","isLoading","execQuery","query","items","data","headers","name","slot","title","$t","style","flex","cellType","cellConfig","delete","onClick","onClickDelete","component","props","edit","onClickEdit","view","onClickView","checkedItems","rules","methods","onClickAdd","item","onClickDeleteSelected","ids","forEach","index","push","$refs","deleteDialog","showDialog","then","confirmation","deleteItems","Array","deleteAll","$toast","deleteSuccess","resetDataTable","filterItems","onClickReset"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\pages\\reports\\EmployeeReport.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <oxd-table-filter :filter-title=\"$t('general.employee_reports')\">\n      <oxd-form @submit-valid=\"filterItems\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <report-autocomplete\n                v-model=\"filters.report\"\n                :rules=\"rules.report\"\n              ></report-autocomplete>\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-divider />\n\n        <oxd-form-actions>\n          <oxd-button\n            display-type=\"ghost\"\n            :label=\"$t('general.reset')\"\n            @click=\"onClickReset\"\n          />\n          <oxd-button\n            class=\"orangehrm-left-space\"\n            display-type=\"secondary\"\n            :label=\"$t('general.search')\"\n            type=\"submit\"\n          />\n        </oxd-form-actions>\n      </oxd-form>\n    </oxd-table-filter>\n\n    <br />\n\n    <div class=\"orangehrm-paper-container\">\n      <div class=\"orangehrm-header-container\">\n        <oxd-button\n          :label=\"$t('general.add')\"\n          icon-name=\"plus\"\n          display-type=\"secondary\"\n          @click=\"onClickAdd\"\n        />\n      </div>\n      <table-header\n        :selected=\"checkedItems.length\"\n        :total=\"total\"\n        :loading=\"isLoading\"\n        @delete=\"onClickDeleteSelected\"\n      ></table-header>\n      <div class=\"orangehrm-container\">\n        <oxd-card-table\n          v-model:selected=\"checkedItems\"\n          v-model:order=\"sortDefinition\"\n          :headers=\"headers\"\n          :items=\"items?.data\"\n          :selectable=\"true\"\n          :clickable=\"false\"\n          :loading=\"isLoading\"\n          row-decorator=\"oxd-table-decorator-card\"\n        />\n      </div>\n      <div class=\"orangehrm-bottom-container\">\n        <oxd-pagination\n          v-if=\"showPaginator\"\n          v-model:current=\"currentPage\"\n          :length=\"pages\"\n        />\n      </div>\n    </div>\n\n    <delete-confirmation ref=\"deleteDialog\"></delete-confirmation>\n  </div>\n</template>\n\n<script>\nimport {computed, ref} from 'vue';\nimport {validSelection} from '@/core/util/validation/rules';\nimport {APIService} from '@/core/util/services/api.service';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport ReportAutocomplete from '@/orangehrmPimPlugin/components/ReportAutocomplete';\n\nconst defaultFilters = {\n  report: null,\n};\n\nconst defaultSortOrder = {\n  'report.name': 'ASC',\n};\n\nexport default {\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'report-autocomplete': ReportAutocomplete,\n  },\n\n  setup() {\n    const {sortDefinition, sortField, sortOrder, onSort} = useSort({\n      sortDefinition: defaultSortOrder,\n    });\n    const filters = ref({...defaultFilters});\n    const serializedFilters = computed(() => {\n      return {\n        reportId: filters.value.report?.id,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n      };\n    });\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/pim/reports/defined',\n    );\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery,\n    } = usePaginate(http, {\n      query: serializedFilters,\n    });\n\n    onSort(execQuery);\n\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      sortDefinition,\n    };\n  },\n\n  data() {\n    return {\n      headers: [\n        {\n          name: 'name',\n          slot: 'title',\n          title: this.$t('general.name'),\n          style: {flex: '85%'},\n          sortField: 'report.name',\n        },\n        {\n          name: 'actions',\n          title: this.$t('general.actions'),\n          slot: 'action',\n          style: {flex: '15%'},\n          cellType: 'oxd-table-cell-actions',\n          cellConfig: {\n            delete: {\n              onClick: this.onClickDelete,\n              component: 'oxd-icon-button',\n              props: {\n                name: 'trash',\n              },\n            },\n            edit: {\n              onClick: this.onClickEdit,\n              props: {\n                name: 'pencil-fill',\n              },\n            },\n            view: {\n              onClick: this.onClickView,\n              props: {\n                name: 'file-text-fill',\n              },\n            },\n          },\n        },\n      ],\n      checkedItems: [],\n      rules: {\n        report: [validSelection],\n      },\n    };\n  },\n\n  methods: {\n    onClickAdd() {\n      navigate('/pim/definePredefinedReport');\n    },\n    onClickEdit(item) {\n      navigate('/pim/definePredefinedReport/{id}', {id: item.id});\n    },\n    onClickView(item) {\n      navigate('/pim/displayPredefinedReport/{id}', {id: item.id});\n    },\n    onClickDeleteSelected() {\n      const ids = [];\n      this.checkedItems.forEach((index) => {\n        ids.push(this.items?.data[index].id);\n      });\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http\n          .deleteAll({\n            ids: items,\n          })\n          .then(() => {\n            return this.$toast.deleteSuccess();\n          })\n          .then(() => {\n            this.isLoading = false;\n            this.resetDataTable();\n          });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {...defaultFilters};\n      this.filterItems();\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}