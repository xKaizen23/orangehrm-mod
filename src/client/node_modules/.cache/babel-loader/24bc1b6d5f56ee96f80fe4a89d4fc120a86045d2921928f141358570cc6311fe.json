{"ast":null,"code":"import ReportToEmployeeAutocomplete from '@/orangehrmPimPlugin/components/ReportToEmployeeAutocomplete';\nimport { required, shouldNotExceedCharLength, validSelection } from '@ohrm/core/util/validation/rules';\nconst reportToModel = {\n  employee: null,\n  reportingMethod: null\n};\nexport default {\n  name: 'SaveEmployeeReportTo',\n  components: {\n    'report-to-employee-autocomplete': ReportToEmployeeAutocomplete\n  },\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    reportingMethods: {\n      type: Array,\n      required: true\n    },\n    type: {\n      type: String,\n      required: true\n    },\n    empNumber: {\n      type: String,\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    const api = `/api/v2/pim/employees/${props.empNumber}/report-to/allowed`;\n    return {\n      api\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      reportTo: {\n        ...reportToModel\n      },\n      rules: {\n        employee: [required, shouldNotExceedCharLength(100), validSelection],\n        reportingMethod: [required]\n      }\n    };\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        empNumber: this.reportTo.employee?.id,\n        reportingMethodId: this.reportTo.reportingMethod?.id\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"AA4EA,OAAOA,4BAA2B,MAAO,8DAA8D;AACvG,SACEC,QAAQ,EACRC,yBAAyB,EACzBC,cAAc,QACT,kCAAkC;AAEzC,MAAMC,aAAY,GAAI;EACpBC,QAAQ,EAAE,IAAI;EACdC,eAAe,EAAE;AACnB,CAAC;AAED,eAAe;EACbC,IAAI,EAAE,sBAAsB;EAE5BC,UAAU,EAAE;IACV,iCAAiC,EAAER;EACrC,CAAC;EAEDS,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MAAM;MACZX,QAAQ,EAAE;IACZ,CAAC;IACDY,gBAAgB,EAAE;MAChBF,IAAI,EAAEG,KAAK;MACXb,QAAQ,EAAE;IACZ,CAAC;IACDU,IAAI,EAAE;MACJA,IAAI,EAAEI,MAAM;MACZd,QAAQ,EAAE;IACZ,CAAC;IACDe,SAAS,EAAE;MACTL,IAAI,EAAEI,MAAM;MACZd,QAAQ,EAAE;IACZ;EACF,CAAC;EAEDgB,KAAK,EAAE,CAAC,OAAO,CAAC;EAEhBC,KAAK,CAACT,KAAK,EAAE;IACX,MAAMU,GAAE,GAAK,yBAAwBV,KAAK,CAACO,SAAU,oBAAmB;IACxE,OAAO;MACLG;IACF,CAAC;EACH,CAAC;EAEDC,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,QAAQ,EAAE;QAAC,GAAGlB;MAAa,CAAC;MAC5BmB,KAAK,EAAE;QACLlB,QAAQ,EAAE,CAACJ,QAAQ,EAAEC,yBAAyB,CAAC,GAAG,CAAC,EAAEC,cAAc,CAAC;QACpEG,eAAe,EAAE,CAACL,QAAQ;MAC5B;IACF,CAAC;EACH,CAAC;EAEDuB,OAAO,EAAE;IACPC,MAAM,GAAG;MACP,IAAI,CAACJ,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACX,IAAG,CACLgB,MAAM,CAAC;QACNV,SAAS,EAAE,IAAI,CAACM,QAAQ,CAACjB,QAAQ,EAAEsB,EAAE;QACrCC,iBAAiB,EAAE,IAAI,CAACN,QAAQ,CAAChB,eAAe,EAAEqB;MACpD,CAAC,EACAE,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACC,MAAM,CAACC,WAAW,EAAE;MAClC,CAAC,EACAF,IAAI,CAAC,MAAM;QACV,IAAI,CAACG,QAAQ,EAAE;MACjB,CAAC,CAAC;IACN,CAAC;IACDA,QAAQ,GAAG;MACT,IAAI,CAACC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;IAC3B;EACF;AACF,CAAC","names":["ReportToEmployeeAutocomplete","required","shouldNotExceedCharLength","validSelection","reportToModel","employee","reportingMethod","name","components","props","http","type","Object","reportingMethods","Array","String","empNumber","emits","setup","api","data","isLoading","reportTo","rules","methods","onSave","create","id","reportingMethodId","then","$toast","saveSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\SaveEmployeeReportTo.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-horizontal-padding orangehrm-top-padding\">\n    <oxd-text\n      v-if=\"type === 'Supervisor'\"\n      tag=\"h6\"\n      class=\"orangehrm-main-title\"\n    >\n      {{ $t('pim.add_supervisor') }}\n    </oxd-text>\n    <oxd-text\n      v-if=\"type === 'Subordinate'\"\n      tag=\"h6\"\n      class=\"orangehrm-main-title\"\n    >\n      {{ $t('pim.add_subordinate') }}\n    </oxd-text>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <report-to-employee-autocomplete\n              v-model=\"reportTo.employee\"\n              :rules=\"rules.employee\"\n              :api=\"api\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"reportTo.reportingMethod\"\n              type=\"select\"\n              :label=\"$t('pim.reporting_method')\"\n              :rules=\"rules.reportingMethod\"\n              :options=\"reportingMethods\"\n              required\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          label=\"Cancel\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n    <oxd-divider />\n  </div>\n</template>\n\n<script>\nimport ReportToEmployeeAutocomplete from '@/orangehrmPimPlugin/components/ReportToEmployeeAutocomplete';\nimport {\n  required,\n  shouldNotExceedCharLength,\n  validSelection,\n} from '@ohrm/core/util/validation/rules';\n\nconst reportToModel = {\n  employee: null,\n  reportingMethod: null,\n};\n\nexport default {\n  name: 'SaveEmployeeReportTo',\n\n  components: {\n    'report-to-employee-autocomplete': ReportToEmployeeAutocomplete,\n  },\n\n  props: {\n    http: {\n      type: Object,\n      required: true,\n    },\n    reportingMethods: {\n      type: Array,\n      required: true,\n    },\n    type: {\n      type: String,\n      required: true,\n    },\n    empNumber: {\n      type: String,\n      required: true,\n    },\n  },\n\n  emits: ['close'],\n\n  setup(props) {\n    const api = `/api/v2/pim/employees/${props.empNumber}/report-to/allowed`;\n    return {\n      api,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      reportTo: {...reportToModel},\n      rules: {\n        employee: [required, shouldNotExceedCharLength(100), validSelection],\n        reportingMethod: [required],\n      },\n    };\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .create({\n          empNumber: this.reportTo.employee?.id,\n          reportingMethodId: this.reportTo.reportingMethod?.id,\n        })\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}