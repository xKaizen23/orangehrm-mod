{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"orangehrm-background-container\"\n};\nconst _hoisted_2 = {\n  class: \"orangehrm-card-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_text = _resolveComponent(\"oxd-text\");\n  const _component_oxd_divider = _resolveComponent(\"oxd-divider\");\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  const _component_oxd_grid_item = _resolveComponent(\"oxd-grid-item\");\n  const _component_employee_autocomplete = _resolveComponent(\"employee-autocomplete\");\n  const _component_oxd_grid = _resolveComponent(\"oxd-grid\");\n  const _component_oxd_form_row = _resolveComponent(\"oxd-form-row\");\n  const _component_password_input = _resolveComponent(\"password-input\");\n  const _component_required_text = _resolveComponent(\"required-text\");\n  const _component_oxd_button = _resolveComponent(\"oxd-button\");\n  const _component_submit_button = _resolveComponent(\"submit-button\");\n  const _component_oxd_form_actions = _resolveComponent(\"oxd-form-actions\");\n  const _component_oxd_form = _resolveComponent(\"oxd-form\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_oxd_text, {\n    tag: \"h6\",\n    class: \"orangehrm-main-title\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('admin.edit_user')), 1)]),\n    _: 1\n  }), _createVNode(_component_oxd_divider), _createVNode(_component_oxd_form, {\n    loading: $data.isLoading,\n    onSubmitValid: $options.onSave\n  }, {\n    default: _withCtx(() => [_createVNode(_component_oxd_form_row, null, {\n      default: _withCtx(() => [_createVNode(_component_oxd_grid, {\n        cols: 2,\n        class: \"orangehrm-full-width-grid\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.user.role,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.user.role = $event),\n            type: \"select\",\n            label: _ctx.$t('general.user_role'),\n            rules: $data.rules.role,\n            options: $data.userRoles,\n            required: \"\"\n          }, null, 8, [\"modelValue\", \"label\", \"rules\", \"options\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_employee_autocomplete, {\n            modelValue: $data.user.employee,\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.user.employee = $event),\n            rules: $data.rules.employee,\n            required: \"\"\n          }, null, 8, [\"modelValue\", \"rules\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.user.status,\n            \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.user.status = $event),\n            type: \"select\",\n            label: _ctx.$t('general.status'),\n            rules: $data.rules.status,\n            options: $data.userStatuses,\n            required: \"\"\n          }, null, 8, [\"modelValue\", \"label\", \"rules\", \"options\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.user.username,\n            \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.user.username = $event),\n            label: _ctx.$t('general.username'),\n            rules: $data.rules.username,\n            required: \"\",\n            autocomplete: \"off\"\n          }, null, 8, [\"modelValue\", \"label\", \"rules\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.user.changePassword,\n            \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.user.changePassword = $event),\n            type: \"checkbox\",\n            value: \"true\",\n            \"true-value\": true,\n            \"false-value\": false,\n            \"option-label\": \"Yes\",\n            label: _ctx.$t('general.change_password_question')\n          }, null, 8, [\"modelValue\", \"label\"])]),\n          _: 1\n        })]),\n        _: 1\n      })]),\n      _: 1\n    }), $data.user.changePassword ? (_openBlock(), _createBlock(_component_password_input, {\n      key: 0,\n      password: $data.user.password,\n      \"onUpdate:password\": _cache[5] || (_cache[5] = $event => $data.user.password = $event),\n      passwordConfirm: $data.user.passwordConfirm,\n      \"onUpdate:passwordConfirm\": _cache[6] || (_cache[6] = $event => $data.user.passwordConfirm = $event),\n      \"is-password-required\": $props.isPasswordRequired\n    }, null, 8, [\"password\", \"passwordConfirm\", \"is-password-required\"])) : _createCommentVNode(\"\", true), _createVNode(_component_oxd_divider), _createVNode(_component_oxd_form_actions, null, {\n      default: _withCtx(() => [_createVNode(_component_required_text), _createVNode(_component_oxd_button, {\n        type: \"button\",\n        \"display-type\": \"ghost\",\n        label: _ctx.$t('general.cancel'),\n        onClick: $options.onCancel\n      }, null, 8, [\"label\", \"onClick\"]), _createVNode(_component_submit_button)]),\n      _: 1\n    })]),\n    _: 1\n  }, 8, [\"loading\", \"onSubmitValid\"])])]);\n}","map":{"version":3,"mappings":";;EAoBOA,KAAK,EAAC;AAAgC;;EACpCA,KAAK,EAAC;AAA0B;;;;;;;;;;;;;;;uBADvCC,oBAmFM,OAnFNC,UAmFM,GAlFJC,oBAiFM,OAjFNC,UAiFM,GAhFJC,aAEaC;IAFHC,GAAG,EAAC,IAAI;IAACP,KAAK,EAAC;;sBAAuB,MAE9C,mCADAQ,OAAE;;MAEJH,aAAeI,yBAEfJ,aA0EWK;IA1EAC,OAAO,EAAEC,eAAS;IAAGC,aAAY,EAAEC;;sBAC5C,MAqDe,CArDfT,aAqDeU;wBApDb,MAmDW,CAnDXV,aAmDWW;QAnDAC,IAAI,EAAE,CAAC;QAAEjB,KAAK,EAAC;;0BACxB,MASgB,CAThBK,aASgBa;4BARd,MAOE,CAPFb,aAOEc;wBANSP,UAAI,CAACQ,IAAI;uEAATR,UAAI,CAACQ,IAAI;YAClBC,IAAI,EAAC,QAAQ;YACZC,KAAK,EAAEd,OAAE;YACTe,KAAK,EAAEX,WAAK,CAACQ,IAAI;YACjBI,OAAO,EAAEZ,eAAS;YACnBa,QAAQ,EAAR;;;YAGJpB,aAMgBa;4BALd,MAIE,CAJFb,aAIEqB;wBAHSd,UAAI,CAACe,QAAQ;uEAAbf,UAAI,CAACe,QAAQ;YACrBJ,KAAK,EAAEX,WAAK,CAACe,QAAQ;YACtBF,QAAQ,EAAR;;;YAIJpB,aASgBa;4BARd,MAOE,CAPFb,aAOEc;wBANSP,UAAI,CAACgB,MAAM;uEAAXhB,UAAI,CAACgB,MAAM;YACpBP,IAAI,EAAC,QAAQ;YACZC,KAAK,EAAEd,OAAE;YACTe,KAAK,EAAEX,WAAK,CAACgB,MAAM;YACnBJ,OAAO,EAAEZ,kBAAY;YACtBa,QAAQ,EAAR;;;YAIJpB,aAQgBa;4BAPd,MAME,CANFb,aAMEc;wBALSP,UAAI,CAACiB,QAAQ;uEAAbjB,UAAI,CAACiB,QAAQ;YACrBP,KAAK,EAAEd,OAAE;YACTe,KAAK,EAAEX,WAAK,CAACiB,QAAQ;YACtBJ,QAAQ,EAAR,EAAQ;YACRK,YAAY,EAAC;;;YAIjBzB,aAUgBa;4BATd,MAQE,CARFb,aAQEc;wBAPSP,UAAI,CAACmB,cAAc;uEAAnBnB,UAAI,CAACmB,cAAc;YAC5BV,IAAI,EAAC,UAAU;YACfW,KAAK,EAAC,MAAM;YACX,YAAU,EAAE,IAAI;YAChB,aAAW,EAAE,KAAK;YACnB,cAAY,EAAC,KAAK;YACjBV,KAAK,EAAEd,OAAE;;;;;;;QAOVI,UAAI,CAACmB,cAAc,kBAD3BE,aAKEC;;MAHQC,QAAQ,EAAEvB,UAAI,CAACuB,QAAQ;+DAAbvB,UAAI,CAACuB,QAAQ;MACvBC,eAAe,EAAExB,UAAI,CAACwB,eAAe;sEAApBxB,UAAI,CAACwB,eAAe;MAC5C,sBAAoB,EAAEC;2GAGzBhC,aAAeI,yBACfJ,aASmBiC;wBARjB,MAAiB,CAAjBjC,aAAiBkC,2BACjBlC,aAKEmC;QAJAnB,IAAI,EAAC,QAAQ;QACb,cAAY,EAAC,OAAO;QACnBC,KAAK,EAAEd,OAAE;QACTiC,OAAK,EAAE3B;yCAEVT,aAAiBqC","names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_oxd_text","tag","_ctx","_component_oxd_divider","_component_oxd_form","loading","$data","onSubmitValid","$options","_component_oxd_form_row","_component_oxd_grid","cols","_component_oxd_grid_item","_component_oxd_input_field","role","type","label","rules","options","required","_component_employee_autocomplete","employee","status","username","autocomplete","changePassword","value","_createBlock","_component_password_input","password","passwordConfirm","$props","_component_oxd_form_actions","_component_required_text","_component_oxd_button","onClick","_component_submit_button"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\pages\\systemUser\\EditSystemUser.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">{{\n        $t('admin.edit_user')\n      }}</oxd-text>\n      <oxd-divider />\n\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"user.role\"\n                type=\"select\"\n                :label=\"$t('general.user_role')\"\n                :rules=\"rules.role\"\n                :options=\"userRoles\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <employee-autocomplete\n                v-model=\"user.employee\"\n                :rules=\"rules.employee\"\n                required\n              />\n            </oxd-grid-item>\n\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"user.status\"\n                type=\"select\"\n                :label=\"$t('general.status')\"\n                :rules=\"rules.status\"\n                :options=\"userStatuses\"\n                required\n              />\n            </oxd-grid-item>\n\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"user.username\"\n                :label=\"$t('general.username')\"\n                :rules=\"rules.username\"\n                required\n                autocomplete=\"off\"\n              />\n            </oxd-grid-item>\n\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"user.changePassword\"\n                type=\"checkbox\"\n                value=\"true\"\n                :true-value=\"true\"\n                :false-value=\"false\"\n                option-label=\"Yes\"\n                :label=\"$t('general.change_password_question')\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <password-input\n          v-if=\"user.changePassword\"\n          v-model:password=\"user.password\"\n          v-model:passwordConfirm=\"user.passwordConfirm\"\n          :is-password-required=\"isPasswordRequired\"\n        />\n\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            type=\"button\"\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {APIService} from '@/core/util/services/api.service';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport PasswordInput from '@/core/components/inputs/PasswordInput';\nimport {\n  required,\n  validSelection,\n  shouldNotExceedCharLength,\n  shouldNotLessThanCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport {promiseDebounce} from '@ohrm/oxd';\n\nconst userModel = {\n  id: '',\n  username: '',\n  role: null,\n  employee: null,\n  status: null,\n  changePassword: false,\n  password: '',\n  passwordConfirm: '',\n};\n\nexport default {\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete,\n    'password-input': PasswordInput,\n  },\n  props: {\n    systemUserId: {\n      type: Number,\n      required: true,\n    },\n    isPasswordRequired: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/admin/users',\n    );\n    http.setIgnorePath('/api/v2/admin/validation/user-name');\n    return {\n      http,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      user: {...userModel},\n      rules: {\n        username: [\n          required,\n          shouldNotLessThanCharLength(5),\n          shouldNotExceedCharLength(40),\n          promiseDebounce(this.validateUserName, 500),\n        ],\n        role: [required],\n        employee: [required, validSelection],\n        status: [required],\n      },\n      userRoles: [\n        {id: 1, label: this.$t('general.admin')},\n        {id: 2, label: this.$t('general.ess')},\n      ],\n      userStatuses: [\n        {id: 1, label: this.$t('general.enabled')},\n        {id: 2, label: this.$t('general.disabled')},\n      ],\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.systemUserId)\n      .then((response) => {\n        const {data} = response.data;\n        this.user.id = data.id;\n        this.user.username = data.userName;\n        this.user.role = this.userRoles.find(\n          (item) => item.id === data.userRole.id,\n        );\n        this.user.employee = {\n          id: data.employee.empNumber,\n          label: `${data.employee.firstName} ${data.employee.middleName} ${data.employee.lastName}`,\n          isPastEmployee: data.employee.terminationId,\n        };\n        if (data.status) {\n          this.user.status = {id: 1, label: this.$t('general.enabled')};\n        } else {\n          this.user.status = {id: 2, label: this.$t('general.disabled')};\n        }\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onCancel() {\n      navigate('/admin/viewSystemUsers');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.systemUserId, {\n          username: this.user.username.trim(),\n          password: this.user.password,\n          status: this.user.status && this.user.status.id === 1,\n          userRoleId: this.user.role?.id,\n          empNumber: this.user.employee?.id,\n          changePassword: this.user.changePassword,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n    validateUserName(user) {\n      return new Promise((resolve) => {\n        if (user) {\n          this.http\n            .request({\n              method: 'GET',\n              url: `/api/v2/admin/validation/user-name`,\n              params: {\n                userName: this.user.username.trim(),\n                userId: this.systemUserId,\n              },\n            })\n            .then((response) => {\n              const {data} = response.data;\n              return data.valid === true\n                ? resolve(true)\n                : resolve(this.$t('general.already_exists'));\n            });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}