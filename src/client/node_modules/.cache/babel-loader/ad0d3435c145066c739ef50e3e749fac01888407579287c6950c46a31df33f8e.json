{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  return _openBlock(), _createBlock(_component_oxd_input_field, {\n    type: \"input\",\n    rules: $data.rules.langStringTarget\n  }, null, 8, [\"rules\"]);\n}","map":{"version":3,"mappings":";;;uBAoBEA,aAAgEC;IAA/CC,IAAI,EAAC,OAAO;IAAEC,KAAK,EAAEC,WAAK,CAACC","names":["_createBlock","_component_oxd_input_field","type","rules","$data","langStringTarget"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\components\\LangStringTargetInput.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-input-field type=\"input\" :rules=\"rules.langStringTarget\" />\n</template>\n\n<script>\nimport {promiseDebounce} from '@ohrm/oxd';\nimport {APIService} from '@/core/util/services/api.service';\nimport usei18n from '@/core/util/composable/usei18n';\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@/core/util/validation/rules';\n\nexport default {\n  props: {\n    langStringId: {\n      type: Number,\n      required: true,\n    },\n    required: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props) {\n    const {$t} = usei18n();\n\n    const validateLangString = (value) => {\n      return new Promise((resolve) => {\n        if (value) {\n          const http = new APIService(\n            window.appGlobal.baseUrl,\n            `/api/v2/admin/i18n/translation/${props.langStringId}/validate`,\n          );\n          http\n            .request({\n              method: 'GET',\n              params: {\n                translation: value,\n              },\n            })\n            .then((response) => {\n              const {data} = response.data;\n              return data.valid === true\n                ? resolve(true)\n                : resolve($t('admin.' + data.code));\n            });\n        } else {\n          resolve(true);\n        }\n      });\n    };\n\n    return {\n      validateLangString,\n    };\n  },\n  data() {\n    return {\n      rules: {\n        langStringTarget: this.required\n          ? [\n              required,\n              shouldNotExceedCharLength(1000),\n              promiseDebounce(this.validateLangString, 500),\n            ]\n          : [\n              shouldNotExceedCharLength(1000),\n              promiseDebounce(this.validateLangString, 500),\n            ],\n      },\n    };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}