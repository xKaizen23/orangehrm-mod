{"ast":null,"code":"import { APIService } from '@ohrm/core/util/services/api.service';\nimport EditEmployeeLayout from '@/orangehrmPimPlugin/components/EditEmployeeLayout';\nimport { shouldNotExceedCharLength, validPhoneNumberFormat, validEmailFormat } from '@ohrm/core/util/validation/rules';\nimport { promiseDebounce } from '@ohrm/oxd';\nconst contactDetailsModel = {\n  street1: '',\n  street2: '',\n  city: '',\n  province: '',\n  countryCode: [],\n  zipCode: '',\n  homeTelephone: '',\n  workTelephone: '',\n  mobile: '',\n  workEmail: '',\n  otherEmail: ''\n};\nexport default {\n  components: {\n    'edit-employee-layout': EditEmployeeLayout\n  },\n  props: {\n    empNumber: {\n      type: String,\n      required: true\n    },\n    countries: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/pim/employee/${props.empNumber}/contact-details`);\n    http.setIgnorePath('/api/v2/pim/employees/[0-9]+/contact-details/validation/(work-emails|other-emails)');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      contact: {\n        ...contactDetailsModel\n      },\n      rules: {\n        street1: [shouldNotExceedCharLength(70)],\n        street2: [shouldNotExceedCharLength(70)],\n        city: [shouldNotExceedCharLength(70)],\n        province: [shouldNotExceedCharLength(70)],\n        zipCode: [shouldNotExceedCharLength(10)],\n        homeTelephone: [shouldNotExceedCharLength(25), validPhoneNumberFormat],\n        mobile: [shouldNotExceedCharLength(25), validPhoneNumberFormat],\n        workTelephone: [shouldNotExceedCharLength(25), validPhoneNumberFormat],\n        workEmail: [shouldNotExceedCharLength(50), validEmailFormat, promiseDebounce(this.validateWorkEmail, 500)],\n        otherEmail: [shouldNotExceedCharLength(50), validEmailFormat, promiseDebounce(this.validateOtherEmail, 500)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.getAll().then(response => {\n      this.updateModel(response);\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'PUT',\n        data: {\n          ...this.contact,\n          countryCode: this.contact.countryCode?.id\n        }\n      }).then(response => {\n        this.updateModel(response);\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.isLoading = false;\n      });\n    },\n    validateWorkEmail(contact) {\n      return new Promise(resolve => {\n        if (contact) {\n          const sameAsOtherEmail = this.contact.workEmail === this.contact.otherEmail;\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/pim/employees/${this.empNumber}/contact-details/validation/work-emails`,\n            params: {\n              workEmail: this.contact.workEmail\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            if (data.valid === true) {\n              return sameAsOtherEmail ? resolve(this.$t('pim.work_email_and_other_email_cannot_be_the_same')) : resolve(true);\n            }\n            return resolve(this.$t('general.already_exists'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n    validateOtherEmail(contact) {\n      return new Promise(resolve => {\n        if (contact) {\n          const sameAsWorkEmail = this.contact.otherEmail === this.contact.workEmail;\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/pim/employees/${this.empNumber}/contact-details/validation/other-emails`,\n            params: {\n              otherEmail: this.contact.otherEmail\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            if (data.valid === true) {\n              return sameAsWorkEmail ? resolve(this.$t('pim.work_email_and_other_email_cannot_be_the_same')) : resolve(true);\n            }\n            return resolve(this.$t('general.already_exists'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n    validateEmailDifferent(email) {\n      return v => {\n        const resolvedEmail = email();\n        if (resolvedEmail === null || resolvedEmail === '') {\n          return true;\n        }\n        return v !== resolvedEmail || this.$t('pim.work_email_and_other_email_cannot_be_the_same');\n      };\n    },\n    updateModel(response) {\n      const {\n        data\n      } = response.data;\n      this.contact = {\n        ...contactDetailsModel,\n        ...data\n      };\n      this.contact.countryCode = this.countries.find(item => item.id === data.countryCode);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["APIService","EditEmployeeLayout","shouldNotExceedCharLength","validPhoneNumberFormat","validEmailFormat","promiseDebounce","contactDetailsModel","street1","street2","city","province","countryCode","zipCode","homeTelephone","workTelephone","mobile","workEmail","otherEmail","components","props","empNumber","type","String","required","countries","Array","default","setup","http","window","appGlobal","baseUrl","setIgnorePath","data","isLoading","contact","rules","validateWorkEmail","validateOtherEmail","beforeMount","getAll","then","response","updateModel","finally","methods","onSave","request","method","id","$toast","updateSuccess","Promise","resolve","sameAsOtherEmail","url","params","valid","$t","sameAsWorkEmail","validateEmailDifferent","email","v","resolvedEmail","find","item"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\pages\\employee\\EmployeeContactDetails.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <edit-employee-layout :employee-id=\"empNumber\" screen=\"contact\">\n    <div class=\"orangehrm-horizontal-padding orangehrm-vertical-padding\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">{{\n        $t('pim.contact_details')\n      }}</oxd-text>\n      <oxd-divider />\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-text class=\"orangehrm-sub-title\" tag=\"h6\">{{\n          $t('admin.address')\n        }}</oxd-text>\n        <oxd-divider />\n        <oxd-form-row>\n          <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"contact.street1\"\n                :label=\"$t('pim.street1')\"\n                :rules=\"rules.street1\"\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"contact.street2\"\n                :label=\"$t('pim.street2')\"\n                :rules=\"rules.street2\"\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"contact.city\"\n                :label=\"$t('general.city')\"\n                :rules=\"rules.city\"\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"contact.province\"\n                :label=\"$t('general.state_province')\"\n                :rules=\"rules.province\"\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"contact.zipCode\"\n                :label=\"$t('general.zip_postal_code')\"\n                :rules=\"rules.zipCode\"\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"contact.countryCode\"\n                type=\"select\"\n                :label=\"$t('general.country')\"\n                :options=\"countries\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-text class=\"orangehrm-sub-title\" tag=\"h6\">{{\n          $t('pim.telephone')\n        }}</oxd-text>\n        <oxd-divider />\n        <oxd-form-row>\n          <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model.trim=\"contact.homeTelephone\"\n                :label=\"$t('pim.home')\"\n                :rules=\"rules.homeTelephone\"\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model.trim=\"contact.mobile\"\n                :label=\"$t('general.mobile')\"\n                :rules=\"rules.mobile\"\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model.trim=\"contact.workTelephone\"\n                :label=\"$t('pim.work')\"\n                :rules=\"rules.workTelephone\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-text class=\"orangehrm-sub-title\" tag=\"h6\">{{\n          $t('general.email')\n        }}</oxd-text>\n        <oxd-divider />\n        <oxd-form-row>\n          <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"contact.workEmail\"\n                :label=\"$t('general.work_email')\"\n                :rules=\"rules.workEmail\"\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"contact.otherEmail\"\n                :label=\"$t('general.other_email')\"\n                :rules=\"rules.otherEmail\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </edit-employee-layout>\n</template>\n\n<script>\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport EditEmployeeLayout from '@/orangehrmPimPlugin/components/EditEmployeeLayout';\nimport {\n  shouldNotExceedCharLength,\n  validPhoneNumberFormat,\n  validEmailFormat,\n} from '@ohrm/core/util/validation/rules';\nimport {promiseDebounce} from '@ohrm/oxd';\n\nconst contactDetailsModel = {\n  street1: '',\n  street2: '',\n  city: '',\n  province: '',\n  countryCode: [],\n  zipCode: '',\n  homeTelephone: '',\n  workTelephone: '',\n  mobile: '',\n  workEmail: '',\n  otherEmail: '',\n};\n\nexport default {\n  components: {\n    'edit-employee-layout': EditEmployeeLayout,\n  },\n\n  props: {\n    empNumber: {\n      type: String,\n      required: true,\n    },\n    countries: {\n      type: Array,\n      default: () => [],\n    },\n  },\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/pim/employee/${props.empNumber}/contact-details`,\n    );\n    http.setIgnorePath(\n      '/api/v2/pim/employees/[0-9]+/contact-details/validation/(work-emails|other-emails)',\n    );\n    return {\n      http,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      contact: {...contactDetailsModel},\n      rules: {\n        street1: [shouldNotExceedCharLength(70)],\n        street2: [shouldNotExceedCharLength(70)],\n        city: [shouldNotExceedCharLength(70)],\n        province: [shouldNotExceedCharLength(70)],\n        zipCode: [shouldNotExceedCharLength(10)],\n        homeTelephone: [shouldNotExceedCharLength(25), validPhoneNumberFormat],\n        mobile: [shouldNotExceedCharLength(25), validPhoneNumberFormat],\n        workTelephone: [shouldNotExceedCharLength(25), validPhoneNumberFormat],\n        workEmail: [\n          shouldNotExceedCharLength(50),\n          validEmailFormat,\n          promiseDebounce(this.validateWorkEmail, 500),\n        ],\n        otherEmail: [\n          shouldNotExceedCharLength(50),\n          validEmailFormat,\n          promiseDebounce(this.validateOtherEmail, 500),\n        ],\n      },\n    };\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .getAll()\n      .then((response) => {\n        this.updateModel(response);\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .request({\n          method: 'PUT',\n          data: {\n            ...this.contact,\n            countryCode: this.contact.countryCode?.id,\n          },\n        })\n        .then((response) => {\n          this.updateModel(response);\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.isLoading = false;\n        });\n    },\n\n    validateWorkEmail(contact) {\n      return new Promise((resolve) => {\n        if (contact) {\n          const sameAsOtherEmail =\n            this.contact.workEmail === this.contact.otherEmail;\n          this.http\n            .request({\n              method: 'GET',\n              url: `/api/v2/pim/employees/${this.empNumber}/contact-details/validation/work-emails`,\n              params: {\n                workEmail: this.contact.workEmail,\n              },\n            })\n            .then((response) => {\n              const {data} = response.data;\n              if (data.valid === true) {\n                return sameAsOtherEmail\n                  ? resolve(\n                      this.$t(\n                        'pim.work_email_and_other_email_cannot_be_the_same',\n                      ),\n                    )\n                  : resolve(true);\n              }\n              return resolve(this.$t('general.already_exists'));\n            });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n\n    validateOtherEmail(contact) {\n      return new Promise((resolve) => {\n        if (contact) {\n          const sameAsWorkEmail =\n            this.contact.otherEmail === this.contact.workEmail;\n          this.http\n            .request({\n              method: 'GET',\n              url: `/api/v2/pim/employees/${this.empNumber}/contact-details/validation/other-emails`,\n              params: {\n                otherEmail: this.contact.otherEmail,\n              },\n            })\n            .then((response) => {\n              const {data} = response.data;\n              if (data.valid === true) {\n                return sameAsWorkEmail\n                  ? resolve(\n                      this.$t(\n                        'pim.work_email_and_other_email_cannot_be_the_same',\n                      ),\n                    )\n                  : resolve(true);\n              }\n              return resolve(this.$t('general.already_exists'));\n            });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n\n    validateEmailDifferent(email) {\n      return (v) => {\n        const resolvedEmail = email();\n        if (resolvedEmail === null || resolvedEmail === '') {\n          return true;\n        }\n        return (\n          v !== resolvedEmail ||\n          this.$t('pim.work_email_and_other_email_cannot_be_the_same')\n        );\n      };\n    },\n\n    updateModel(response) {\n      const {data} = response.data;\n      this.contact = {...contactDetailsModel, ...data};\n      this.contact.countryCode = this.countries.find(\n        (item) => item.id === data.countryCode,\n      );\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}