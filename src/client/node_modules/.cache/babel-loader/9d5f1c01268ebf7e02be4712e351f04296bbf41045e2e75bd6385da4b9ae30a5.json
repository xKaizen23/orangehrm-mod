{"ast":null,"code":"import { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { promiseDebounce } from '@ohrm/oxd';\nconst customerModel = {\n  id: '',\n  name: '',\n  description: ''\n};\nexport default {\n  props: {\n    customerId: {\n      type: String,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/time/customers');\n    http.setIgnorePath('/api/v2/time/validation/customer-name');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      customer: {\n        ...customerModel\n      },\n      rules: {\n        name: [required, shouldNotExceedCharLength(50), promiseDebounce(this.validateCustomerName, 500)],\n        description: [shouldNotExceedCharLength(255)]\n      }\n    };\n  },\n  created() {\n    this.isLoading = true;\n    this.http.get(this.customerId).then(response => {\n      const {\n        data\n      } = response.data;\n      this.customer.id = data.id;\n      this.customer.name = data.name;\n      this.customer.description = data.description;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.customerId, {\n        name: this.customer.name,\n        description: this.customer.description\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      navigate('/time/viewCustomers');\n    },\n    validateCustomerName(customer) {\n      return new Promise(resolve => {\n        if (customer) {\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/time/validation/customer-name`,\n            params: {\n              customerName: this.customer.name.trim(),\n              customerId: this.customerId\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            return data.valid === true ? resolve(true) : resolve(this.$t('general.already_exists'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["navigate","APIService","required","shouldNotExceedCharLength","promiseDebounce","customerModel","id","name","description","props","customerId","type","String","setup","http","window","appGlobal","baseUrl","setIgnorePath","data","isLoading","customer","rules","validateCustomerName","created","get","then","response","finally","methods","onSave","update","$toast","updateSuccess","onCancel","Promise","resolve","request","method","url","params","customerName","trim","valid","$t"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmTimePlugin\\pages\\customer\\EditCustomer.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('time.edit_customer') }}\n      </oxd-text>\n      <oxd-divider />\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-input-field\n            v-model=\"customer.name\"\n            :label=\"$t('general.name')\"\n            :rules=\"rules.name\"\n            required\n          />\n        </oxd-form-row>\n        <oxd-form-row>\n          <oxd-input-field\n            v-model=\"customer.description\"\n            type=\"textarea\"\n            :label=\"$t('general.description')\"\n            :placeholder=\"$t('general.type_description_here')\"\n            :rules=\"rules.description\"\n          />\n        </oxd-form-row>\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport {promiseDebounce} from '@ohrm/oxd';\n\nconst customerModel = {\n  id: '',\n  name: '',\n  description: '',\n};\nexport default {\n  props: {\n    customerId: {\n      type: String,\n      required: true,\n    },\n  },\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/time/customers',\n    );\n    http.setIgnorePath('/api/v2/time/validation/customer-name');\n    return {\n      http,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      customer: {...customerModel},\n      rules: {\n        name: [\n          required,\n          shouldNotExceedCharLength(50),\n          promiseDebounce(this.validateCustomerName, 500),\n        ],\n        description: [shouldNotExceedCharLength(255)],\n      },\n    };\n  },\n  created() {\n    this.isLoading = true;\n    this.http\n      .get(this.customerId)\n      .then((response) => {\n        const {data} = response.data;\n        this.customer.id = data.id;\n        this.customer.name = data.name;\n        this.customer.description = data.description;\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.customerId, {\n          name: this.customer.name,\n          description: this.customer.description,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      navigate('/time/viewCustomers');\n    },\n    validateCustomerName(customer) {\n      return new Promise((resolve) => {\n        if (customer) {\n          this.http\n            .request({\n              method: 'GET',\n              url: `/api/v2/time/validation/customer-name`,\n              params: {\n                customerName: this.customer.name.trim(),\n                customerId: this.customerId,\n              },\n            })\n            .then((response) => {\n              const {data} = response.data;\n              return data.valid === true\n                ? resolve(true)\n                : resolve(this.$t('general.already_exists'));\n            });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}