{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  return _openBlock(), _createBlock(_component_oxd_input_field, {\n    type: \"select\",\n    options: $setup.options\n  }, null, 8, [\"options\"]);\n}","map":{"version":3,"mappings":";;;uBAoBEA,aAAqEC;IAApDC,IAAI,EAAC,QAAQ;IAAEC,OAAO,EAAEC","names":["_createBlock","_component_oxd_input_field","type","options","$setup"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmTimePlugin\\components\\ActivityDropdown.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-input-field type=\"select\" :options=\"options\"> </oxd-input-field>\n</template>\n\n<script>\nimport {ref, watchEffect} from 'vue';\nimport {APIService} from '@ohrm/core/util/services/api.service';\n\nexport default {\n  name: 'ActivityDropdown',\n  props: {\n    projectId: {\n      type: Number,\n      required: false,\n      default: null,\n    },\n  },\n  setup(props) {\n    const options = ref([]);\n    const http = new APIService(window.appGlobal.baseUrl, '');\n\n    watchEffect(async () => {\n      if (props.projectId) {\n        http\n          .request({\n            method: 'GET',\n            url: `/api/v2/time/project/${props.projectId}/activities`,\n            params: {limit: 0},\n          })\n          .then(({data}) => {\n            options.value = data.data.map((item) => {\n              return {\n                id: item.id,\n                label: item.name,\n                isDeleted: item.deleted,\n              };\n            });\n          });\n      } else {\n        options.value = [];\n      }\n    });\n\n    return {\n      options,\n    };\n  },\n};\n</script>\n\n<style scoped>\n::v-deep(.oxd-select-wrapper) {\n  min-width: 150px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}