{"ast":null,"code":"import { APIService } from '@ohrm/core/util/services/api.service';\nimport { required, validDateFormat } from '@/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { OxdDialog } from '@ohrm/oxd';\nimport { shouldNotExceedCharLength, digitsOnlyWithDecimalPoint, maxCurrency, digitsOnlyWithTwoDecimalPoints } from '@ohrm/core/util/validation/rules';\nimport ClaimExpenseTypeDropdown from './ClaimExpenseTypeDropdown.vue';\nconst expenseModel = {\n  expenseType: null,\n  date: null,\n  amount: null,\n  note: null\n};\nexport default {\n  name: 'EditExpense',\n  components: {\n    'oxd-dialog': OxdDialog,\n    'claim-expense-type-dropdown': ClaimExpenseTypeDropdown\n  },\n  props: {\n    data: {\n      type: Object,\n      required: true\n    },\n    requestId: {\n      type: Number,\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/claim/requests/${props.requestId}/expenses`);\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      http,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      selectedOption: {},\n      expense: {\n        ...expenseModel\n      },\n      rules: {\n        type: [required],\n        date: [required, validDateFormat(this.userDateFormat)],\n        note: [shouldNotExceedCharLength(1000)],\n        amount: [required, digitsOnlyWithDecimalPoint, maxCurrency(10000000000), digitsOnlyWithTwoDecimalPoints]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.data.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.expense = data;\n      this.expense.amount = parseFloat(data.amount).toFixed(2);\n      this.selectedOption = {\n        id: data.expenseType.id,\n        label: data.expenseType.isDeleted ? `${data.expenseType.name} (${this.$t('general.deleted')})` : !data.expenseType.status ? `${data.expenseType.name} (${this.$t('performance.inactive')})` : data.expenseType.name\n      };\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.data.id, {\n        expenseTypeId: this.selectedOption.id,\n        date: this.expense.date,\n        amount: Number(this.expense.amount).toFixed(2),\n        note: this.expense.note\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.expense = {\n          ...expenseModel\n        };\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["APIService","required","validDateFormat","useDateFormat","OxdDialog","shouldNotExceedCharLength","digitsOnlyWithDecimalPoint","maxCurrency","digitsOnlyWithTwoDecimalPoints","ClaimExpenseTypeDropdown","expenseModel","expenseType","date","amount","note","name","components","props","data","type","Object","requestId","Number","emits","setup","http","window","appGlobal","baseUrl","userDateFormat","isLoading","selectedOption","expense","rules","beforeMount","get","id","then","response","parseFloat","toFixed","label","isDeleted","$t","status","finally","methods","onSave","update","expenseTypeId","$toast","updateSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmClaimPlugin\\components\\EditExpenseModal.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-dialog @update:show=\"onCancel\">\n    <div class=\"orangehrm-modal-header\">\n      <oxd-text type=\"card-title\">\n        {{ $t('claim.edit_expense') }}\n      </oxd-text>\n    </div>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"1\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <claim-expense-type-dropdown\n              v-model=\"selectedOption\"\n              :label=\"$t('claim.expense_type')\"\n              :rules=\"rules.type\"\n            ></claim-expense-type-dropdown>\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-row>\n        <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <date-input\n              v-model=\"expense.date\"\n              :label=\"$t('general.date')\"\n              :rules=\"rules.date\"\n              :years=\"yearsArray\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"expense.amount\"\n              :label=\"$t('general.amount')\"\n              :rules=\"rules.amount\"\n              required\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-row>\n        <oxd-grid :cols=\"1\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"expense.note\"\n              type=\"textarea\"\n              :label=\"$t('general.note')\"\n              :rules=\"rules.note\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-divider />\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </oxd-dialog>\n</template>\n\n<script>\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport {required, validDateFormat} from '@/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport {OxdDialog} from '@ohrm/oxd';\nimport {\n  shouldNotExceedCharLength,\n  digitsOnlyWithDecimalPoint,\n  maxCurrency,\n  digitsOnlyWithTwoDecimalPoints,\n} from '@ohrm/core/util/validation/rules';\nimport ClaimExpenseTypeDropdown from './ClaimExpenseTypeDropdown.vue';\n\nconst expenseModel = {\n  expenseType: null,\n  date: null,\n  amount: null,\n  note: null,\n};\n\nexport default {\n  name: 'EditExpense',\n\n  components: {\n    'oxd-dialog': OxdDialog,\n    'claim-expense-type-dropdown': ClaimExpenseTypeDropdown,\n  },\n\n  props: {\n    data: {\n      type: Object,\n      required: true,\n    },\n    requestId: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  emits: ['close'],\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/claim/requests/${props.requestId}/expenses`,\n    );\n    const {userDateFormat} = useDateFormat();\n\n    return {\n      http,\n      userDateFormat,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      selectedOption: {},\n      expense: {\n        ...expenseModel,\n      },\n      rules: {\n        type: [required],\n        date: [required, validDateFormat(this.userDateFormat)],\n        note: [shouldNotExceedCharLength(1000)],\n        amount: [\n          required,\n          digitsOnlyWithDecimalPoint,\n          maxCurrency(10000000000),\n          digitsOnlyWithTwoDecimalPoints,\n        ],\n      },\n    };\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.data.id)\n      .then((response) => {\n        const {data} = response.data;\n        this.expense = data;\n        this.expense.amount = parseFloat(data.amount).toFixed(2);\n        this.selectedOption = {\n          id: data.expenseType.id,\n          label: data.expenseType.isDeleted\n            ? `${data.expenseType.name} (${this.$t('general.deleted')})`\n            : !data.expenseType.status\n            ? `${data.expenseType.name} (${this.$t('performance.inactive')})`\n            : data.expenseType.name,\n        };\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.data.id, {\n          expenseTypeId: this.selectedOption.id,\n          date: this.expense.date,\n          amount: Number(this.expense.amount).toFixed(2),\n          note: this.expense.note,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.expense = {...expenseModel};\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}