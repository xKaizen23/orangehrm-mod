{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { required, validSelection, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { promiseDebounce } from '@ohrm/oxd';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport Activities from '@/orangehrmTimePlugin/components/Activities.vue';\nimport AddCustomerModal from '@/orangehrmTimePlugin/components/AddCustomerModal.vue';\nimport CustomerAutocomplete from '@/orangehrmTimePlugin/components/CustomerAutocomplete.vue';\nimport ProjectAdminAutocomplete from '@/orangehrmTimePlugin/components/ProjectAdminAutocomplete.vue';\nconst defaultProjectModel = {\n  name: null,\n  customer: {\n    id: null,\n    label: null\n  },\n  description: null,\n  projectAdminEmpNumbers: []\n};\nexport default {\n  name: 'ProjectEdit',\n  components: {\n    activities: Activities,\n    'add-customer-modal': AddCustomerModal,\n    'customer-autocomplete': CustomerAutocomplete,\n    'project-admin-autocomplete': ProjectAdminAutocomplete\n  },\n  props: {\n    projectId: {\n      type: Number,\n      required: true\n    },\n    unselectableIds: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/time/projects');\n    http.setIgnorePath('/api/v2/time/validation/project-name');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      projectAdmins: [{\n        value: null\n      }],\n      project: {\n        ...defaultProjectModel\n      },\n      showCustomerModal: false,\n      rules: {\n        name: [required, shouldNotExceedCharLength(50)],\n        description: [shouldNotExceedCharLength(255)],\n        customer: [required, validSelection],\n        projectAdmin: [validSelection, value => {\n          return this.projectAdmins.filter(({\n            value: admin\n          }) => admin && admin.id === value?.id).length < 2 ? true : this.$t('general.already_exists');\n        }]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    this.http.get(this.projectId, {\n      model: 'detailed'\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.project.name = data.name;\n      this.project.description = data.description;\n      this.project.customer = {\n        id: data.customer.id,\n        label: data.customer.name\n      };\n      if (Array.isArray(data.projectAdmins) && data.projectAdmins.length > 0) {\n        this.projectAdmins = data.projectAdmins.map(projectAdmin => {\n          return {\n            value: {\n              id: projectAdmin.empNumber,\n              label: $tEmpName(projectAdmin, {\n                includeMiddle: true,\n                excludePastEmpTag: true\n              }),\n              isPastEmployee: projectAdmin.terminationId ? true : false\n            }\n          };\n        });\n      }\n    }).finally(() => {\n      this.rules.name.push(promiseDebounce(this.validateProjectName, 500));\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onClickAddCustomer() {\n      this.showCustomerModal = true;\n    },\n    onCustomerModalClose(data) {\n      if (data !== undefined) {\n        const {\n          id,\n          name\n        } = data;\n        this.project.customer = {\n          id,\n          label: name\n        };\n      }\n      this.showCustomerModal = false;\n    },\n    onAddAnother() {\n      if (this.projectAdmins.length < 5) {\n        this.projectAdmins.push({\n          value: null\n        });\n      }\n    },\n    onRemoveAdmin(index) {\n      this.projectAdmins.splice(index, 1);\n    },\n    onCancel() {\n      navigate('/time/viewProjects');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.projectId, {\n        name: this.project.name,\n        description: this.project.description,\n        customerId: this.project.customer.id,\n        projectAdminsEmpNumbers: this.projectAdmins.map(({\n          value\n        }) => value && value.id).filter(Number)\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    validateProjectName(project) {\n      return new Promise(resolve => {\n        if (project) {\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/time/validation/project-name`,\n            params: {\n              projectId: this.projectId,\n              projectName: this.project.name.trim(),\n              customerId: this.project.customer?.id\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            return data.valid === true ? resolve(true) : resolve(this.$t('general.already_exists'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AAoHA,SACEA,QAAQ,EACRC,cAAc,EACdC,yBAAyB,QACpB,kCAAkC;AACzC,SAAQC,UAAU,QAAO,kCAAkC;AAC3D,SAAQC,QAAQ,QAAO,mCAAmC;AAC1D,SAAQC,eAAe,QAAO,WAAW;AACzC,OAAOC,wBAAuB,MAAO,iDAAiD;AACtF,OAAOC,UAAS,MAAO,iDAAiD;AACxE,OAAOC,gBAAe,MAAO,uDAAuD;AACpF,OAAOC,oBAAmB,MAAO,2DAA2D;AAC5F,OAAOC,wBAAuB,MAAO,+DAA+D;AAEpG,MAAMC,mBAAkB,GAAI;EAC1BC,IAAI,EAAE,IAAI;EACVC,QAAQ,EAAE;IAACC,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAI,CAAC;EACjCC,WAAW,EAAE,IAAI;EACjBC,sBAAsB,EAAE;AAC1B,CAAC;AAED,eAAe;EACbL,IAAI,EAAE,aAAa;EACnBM,UAAU,EAAE;IACVC,UAAU,EAAEZ,UAAU;IACtB,oBAAoB,EAAEC,gBAAgB;IACtC,uBAAuB,EAAEC,oBAAoB;IAC7C,4BAA4B,EAAEC;EAChC,CAAC;EACDU,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,MAAM;MACZvB,QAAQ,EAAE;IACZ,CAAC;IACDwB,eAAe,EAAE;MACfF,IAAI,EAAEG,KAAK;MACXC,OAAO,EAAE,MAAM;IACjB;EACF,CAAC;EACDC,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIzB,UAAU,CACzB0B,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,uBAAuB,CACxB;IACDH,IAAI,CAACI,aAAa,CAAC,sCAAsC,CAAC;IAC1D,OAAO;MACLJ;IACF,CAAC;EACH,CAAC;EACDK,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,aAAa,EAAE,CAAC;QAACC,KAAK,EAAE;MAAI,CAAC,CAAC;MAC9BC,OAAO,EAAE;QAAC,GAAG1B;MAAmB,CAAC;MACjC2B,iBAAiB,EAAE,KAAK;MACxBC,KAAK,EAAE;QACL3B,IAAI,EAAE,CAACZ,QAAQ,EAAEE,yBAAyB,CAAC,EAAE,CAAC,CAAC;QAC/Cc,WAAW,EAAE,CAACd,yBAAyB,CAAC,GAAG,CAAC,CAAC;QAC7CW,QAAQ,EAAE,CAACb,QAAQ,EAAEC,cAAc,CAAC;QACpCuC,YAAY,EAAE,CACZvC,cAAc,EACbmC,KAAK,IAAK;UACT,OAAO,IAAI,CAACD,aAAa,CAACM,MAAM,CAC9B,CAAC;YAACL,KAAK,EAAEM;UAAK,CAAC,KAAKA,KAAI,IAAKA,KAAK,CAAC5B,EAAC,KAAMsB,KAAK,EAAEtB,EAAE,CACpD,CAAC6B,MAAK,GAAI,IACP,IAAG,GACH,IAAI,CAACC,EAAE,CAAC,wBAAwB,CAAC;QACvC,CAAC;MAEL;IACF,CAAC;EACH,CAAC;EACDC,WAAW,GAAG;IACZ,IAAI,CAACX,SAAQ,GAAI,IAAI;IACrB,MAAM;MAACY;IAAS,IAAIxC,wBAAwB,EAAE;IAC9C,IAAI,CAACsB,IAAG,CACLmB,GAAG,CAAC,IAAI,CAAC1B,SAAS,EAAE;MAAC2B,KAAK,EAAE;IAAU,CAAC,EACvCC,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAACjB;MAAI,IAAIiB,QAAQ,CAACjB,IAAI;MAC5B,IAAI,CAACI,OAAO,CAACzB,IAAG,GAAIqB,IAAI,CAACrB,IAAI;MAC7B,IAAI,CAACyB,OAAO,CAACrB,WAAU,GAAIiB,IAAI,CAACjB,WAAW;MAC3C,IAAI,CAACqB,OAAO,CAACxB,QAAO,GAAI;QACtBC,EAAE,EAAEmB,IAAI,CAACpB,QAAQ,CAACC,EAAE;QACpBC,KAAK,EAAEkB,IAAI,CAACpB,QAAQ,CAACD;MACvB,CAAC;MACD,IACEa,KAAK,CAAC0B,OAAO,CAAClB,IAAI,CAACE,aAAa,KAChCF,IAAI,CAACE,aAAa,CAACQ,MAAK,GAAI,GAC5B;QACA,IAAI,CAACR,aAAY,GAAIF,IAAI,CAACE,aAAa,CAACiB,GAAG,CAAEZ,YAAY,IAAK;UAC5D,OAAO;YACLJ,KAAK,EAAE;cACLtB,EAAE,EAAE0B,YAAY,CAACa,SAAS;cAC1BtC,KAAK,EAAE+B,SAAS,CAACN,YAAY,EAAE;gBAC7Bc,aAAa,EAAE,IAAI;gBACnBC,iBAAiB,EAAE;cACrB,CAAC,CAAC;cACFC,cAAc,EAAEhB,YAAY,CAACiB,aAAY,GAAI,IAAG,GAAI;YACtD;UACF,CAAC;QACH,CAAC,CAAC;MACJ;IACF,CAAC,EACAC,OAAO,CAAC,MAAM;MACb,IAAI,CAACnB,KAAK,CAAC3B,IAAI,CAAC+C,IAAI,CAACtD,eAAe,CAAC,IAAI,CAACuD,mBAAmB,EAAE,GAAG,CAAC,CAAC;MACpE,IAAI,CAAC1B,SAAQ,GAAI,KAAK;IACxB,CAAC,CAAC;EACN,CAAC;EACD2B,OAAO,EAAE;IACPC,kBAAkB,GAAG;MACnB,IAAI,CAACxB,iBAAgB,GAAI,IAAI;IAC/B,CAAC;IACDyB,oBAAoB,CAAC9B,IAAI,EAAE;MACzB,IAAIA,IAAG,KAAM+B,SAAS,EAAE;QACtB,MAAM;UAAClD,EAAE;UAAEF;QAAI,IAAIqB,IAAI;QACvB,IAAI,CAACI,OAAO,CAACxB,QAAO,GAAI;UACtBC,EAAE;UACFC,KAAK,EAAEH;QACT,CAAC;MACH;MACA,IAAI,CAAC0B,iBAAgB,GAAI,KAAK;IAChC,CAAC;IACD2B,YAAY,GAAG;MACb,IAAI,IAAI,CAAC9B,aAAa,CAACQ,MAAK,GAAI,CAAC,EAAE;QACjC,IAAI,CAACR,aAAa,CAACwB,IAAI,CAAC;UAACvB,KAAK,EAAE;QAAI,CAAC,CAAC;MACxC;IACF,CAAC;IACD8B,aAAa,CAACC,KAAK,EAAE;MACnB,IAAI,CAAChC,aAAa,CAACiC,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IACrC,CAAC;IACDE,QAAQ,GAAG;MACTjE,QAAQ,CAAC,oBAAoB,CAAC;IAChC,CAAC;IACDkE,MAAM,GAAG;MACP,IAAI,CAACpC,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACN,IAAG,CACL2C,MAAM,CAAC,IAAI,CAAClD,SAAS,EAAE;QACtBT,IAAI,EAAE,IAAI,CAACyB,OAAO,CAACzB,IAAI;QACvBI,WAAW,EAAE,IAAI,CAACqB,OAAO,CAACrB,WAAW;QACrCwD,UAAU,EAAE,IAAI,CAACnC,OAAO,CAACxB,QAAQ,CAACC,EAAE;QACpC2D,uBAAuB,EAAE,IAAI,CAACtC,aAAY,CACvCiB,GAAG,CAAC,CAAC;UAAChB;QAAK,CAAC,KAAKA,KAAI,IAAKA,KAAK,CAACtB,EAAE,EAClC2B,MAAM,CAAClB,MAAM;MAClB,CAAC,EACA0B,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACyB,MAAM,CAACC,aAAa,EAAE;MACpC,CAAC,EACA1B,IAAI,CAAC,MAAM;QACV,IAAI,CAACoB,QAAQ,EAAE;MACjB,CAAC,CAAC;IACN,CAAC;IACDT,mBAAmB,CAACvB,OAAO,EAAE;MAC3B,OAAO,IAAIuC,OAAO,CAAEC,OAAO,IAAK;QAC9B,IAAIxC,OAAO,EAAE;UACX,IAAI,CAACT,IAAG,CACLkD,OAAO,CAAC;YACPC,MAAM,EAAE,KAAK;YACbC,GAAG,EAAG,sCAAqC;YAC3CC,MAAM,EAAE;cACN5D,SAAS,EAAE,IAAI,CAACA,SAAS;cACzB6D,WAAW,EAAE,IAAI,CAAC7C,OAAO,CAACzB,IAAI,CAACuE,IAAI,EAAE;cACrCX,UAAU,EAAE,IAAI,CAACnC,OAAO,CAACxB,QAAQ,EAAEC;YACrC;UACF,CAAC,EACAmC,IAAI,CAAEC,QAAQ,IAAK;YAClB,MAAM;cAACjB;YAAI,IAAIiB,QAAQ,CAACjB,IAAI;YAC5B,OAAOA,IAAI,CAACmD,KAAI,KAAM,IAAG,GACrBP,OAAO,CAAC,IAAI,IACZA,OAAO,CAAC,IAAI,CAACjC,EAAE,CAAC,wBAAwB,CAAC,CAAC;UAChD,CAAC,CAAC;QACN,OAAO;UACLiC,OAAO,CAAC,IAAI,CAAC;QACf;MACF,CAAC,CAAC;IACJ;EACF;AACF,CAAC","names":["required","validSelection","shouldNotExceedCharLength","APIService","navigate","promiseDebounce","useEmployeeNameTranslate","Activities","AddCustomerModal","CustomerAutocomplete","ProjectAdminAutocomplete","defaultProjectModel","name","customer","id","label","description","projectAdminEmpNumbers","components","activities","props","projectId","type","Number","unselectableIds","Array","default","setup","http","window","appGlobal","baseUrl","setIgnorePath","data","isLoading","projectAdmins","value","project","showCustomerModal","rules","projectAdmin","filter","admin","length","$t","beforeMount","$tEmpName","get","model","then","response","isArray","map","empNumber","includeMiddle","excludePastEmpTag","isPastEmployee","terminationId","finally","push","validateProjectName","methods","onClickAddCustomer","onCustomerModalClose","undefined","onAddAnother","onRemoveAdmin","index","splice","onCancel","onSave","update","customerId","projectAdminsEmpNumbers","$toast","updateSuccess","Promise","resolve","request","method","url","params","projectName","trim","valid"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmTimePlugin\\pages\\project\\ProjectEdit.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('time.edit_project') }}\n      </oxd-text>\n      <oxd-divider />\n\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"project.name\"\n              :label=\"$t('general.name')\"\n              :rules=\"rules.name\"\n              :disabled=\"!$can.update(`time_projects`)\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <customer-autocomplete\n              :key=\"project.customer\"\n              v-model=\"project.customer\"\n              :label=\"$t('time.customer_name')\"\n              :rules=\"rules.customer\"\n              :disabled=\"!$can.update(`time_projects`)\"\n              required\n            />\n            <oxd-button\n              v-if=\"$can.update(`time_projects`)\"\n              icon-name=\"plus\"\n              display-type=\"text\"\n              class=\"orangehrm-input-field-bottom-space\"\n              :label=\"$t('time.add_customer')\"\n              @click=\"onClickAddCustomer\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"project.description\"\n                type=\"textarea\"\n                :label=\"$t('general.description')\"\n                :placeholder=\"$t('general.type_description_here')\"\n                :disabled=\"!$can.update(`time_projects`)\"\n                :rules=\"rules.description\"\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <project-admin-autocomplete\n                v-for=\"(projectAdmin, index) in projectAdmins\"\n                :key=\"index\"\n                v-model=\"projectAdmin.value\"\n                :rules=\"rules.projectAdmin\"\n                :show-delete=\"index > 0 && $can.update(`time_projects`)\"\n                :disabled=\"!$can.update(`time_projects`)\"\n                include-employees=\"onlyCurrent\"\n                @remove=\"onRemoveAdmin(index)\"\n              />\n              <oxd-button\n                v-if=\"projectAdmins.length < 5 && $can.update(`time_projects`)\"\n                icon-name=\"plus\"\n                display-type=\"text\"\n                :label=\"$t('general.add_another')\"\n                @click=\"onAddAnother\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <br />\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button v-if=\"$can.update(`time_projects`)\" />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n    <br />\n    <activities\n      :project-id=\"projectId\"\n      :unselectable-ids=\"unselectableIds\"\n    ></activities>\n    <add-customer-modal\n      v-if=\"showCustomerModal\"\n      @close=\"onCustomerModalClose\"\n    ></add-customer-modal>\n  </div>\n</template>\n\n<script>\nimport {\n  required,\n  validSelection,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport {APIService} from '@/core/util/services/api.service';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {promiseDebounce} from '@ohrm/oxd';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport Activities from '@/orangehrmTimePlugin/components/Activities.vue';\nimport AddCustomerModal from '@/orangehrmTimePlugin/components/AddCustomerModal.vue';\nimport CustomerAutocomplete from '@/orangehrmTimePlugin/components/CustomerAutocomplete.vue';\nimport ProjectAdminAutocomplete from '@/orangehrmTimePlugin/components/ProjectAdminAutocomplete.vue';\n\nconst defaultProjectModel = {\n  name: null,\n  customer: {id: null, label: null},\n  description: null,\n  projectAdminEmpNumbers: [],\n};\n\nexport default {\n  name: 'ProjectEdit',\n  components: {\n    activities: Activities,\n    'add-customer-modal': AddCustomerModal,\n    'customer-autocomplete': CustomerAutocomplete,\n    'project-admin-autocomplete': ProjectAdminAutocomplete,\n  },\n  props: {\n    projectId: {\n      type: Number,\n      required: true,\n    },\n    unselectableIds: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/time/projects',\n    );\n    http.setIgnorePath('/api/v2/time/validation/project-name');\n    return {\n      http,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      projectAdmins: [{value: null}],\n      project: {...defaultProjectModel},\n      showCustomerModal: false,\n      rules: {\n        name: [required, shouldNotExceedCharLength(50)],\n        description: [shouldNotExceedCharLength(255)],\n        customer: [required, validSelection],\n        projectAdmin: [\n          validSelection,\n          (value) => {\n            return this.projectAdmins.filter(\n              ({value: admin}) => admin && admin.id === value?.id,\n            ).length < 2\n              ? true\n              : this.$t('general.already_exists');\n          },\n        ],\n      },\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    const {$tEmpName} = useEmployeeNameTranslate();\n    this.http\n      .get(this.projectId, {model: 'detailed'})\n      .then((response) => {\n        const {data} = response.data;\n        this.project.name = data.name;\n        this.project.description = data.description;\n        this.project.customer = {\n          id: data.customer.id,\n          label: data.customer.name,\n        };\n        if (\n          Array.isArray(data.projectAdmins) &&\n          data.projectAdmins.length > 0\n        ) {\n          this.projectAdmins = data.projectAdmins.map((projectAdmin) => {\n            return {\n              value: {\n                id: projectAdmin.empNumber,\n                label: $tEmpName(projectAdmin, {\n                  includeMiddle: true,\n                  excludePastEmpTag: true,\n                }),\n                isPastEmployee: projectAdmin.terminationId ? true : false,\n              },\n            };\n          });\n        }\n      })\n      .finally(() => {\n        this.rules.name.push(promiseDebounce(this.validateProjectName, 500));\n        this.isLoading = false;\n      });\n  },\n  methods: {\n    onClickAddCustomer() {\n      this.showCustomerModal = true;\n    },\n    onCustomerModalClose(data) {\n      if (data !== undefined) {\n        const {id, name} = data;\n        this.project.customer = {\n          id,\n          label: name,\n        };\n      }\n      this.showCustomerModal = false;\n    },\n    onAddAnother() {\n      if (this.projectAdmins.length < 5) {\n        this.projectAdmins.push({value: null});\n      }\n    },\n    onRemoveAdmin(index) {\n      this.projectAdmins.splice(index, 1);\n    },\n    onCancel() {\n      navigate('/time/viewProjects');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.projectId, {\n          name: this.project.name,\n          description: this.project.description,\n          customerId: this.project.customer.id,\n          projectAdminsEmpNumbers: this.projectAdmins\n            .map(({value}) => value && value.id)\n            .filter(Number),\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n    validateProjectName(project) {\n      return new Promise((resolve) => {\n        if (project) {\n          this.http\n            .request({\n              method: 'GET',\n              url: `/api/v2/time/validation/project-name`,\n              params: {\n                projectId: this.projectId,\n                projectName: this.project.name.trim(),\n                customerId: this.project.customer?.id,\n              },\n            })\n            .then((response) => {\n              const {data} = response.data;\n              return data.valid === true\n                ? resolve(true)\n                : resolve(this.$t('general.already_exists'));\n            });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}