{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-c4b50a18\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"orangehrm-background-container\"\n};\nconst _hoisted_2 = {\n  class: \"orangehrm-card-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_text = _resolveComponent(\"oxd-text\");\n  const _component_oxd_divider = _resolveComponent(\"oxd-divider\");\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  const _component_oxd_grid_item = _resolveComponent(\"oxd-grid-item\");\n  const _component_oxd_grid = _resolveComponent(\"oxd-grid\");\n  const _component_oxd_form_row = _resolveComponent(\"oxd-form-row\");\n  const _component_required_text = _resolveComponent(\"required-text\");\n  const _component_oxd_button = _resolveComponent(\"oxd-button\");\n  const _component_submit_button = _resolveComponent(\"submit-button\");\n  const _component_oxd_form_actions = _resolveComponent(\"oxd-form-actions\");\n  const _component_oxd_form = _resolveComponent(\"oxd-form\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_oxd_text, {\n    tag: \"h6\",\n    class: \"orangehrm-main-title\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('pim.edit_custom_field')), 1)]),\n    _: 1\n  }), _createVNode(_component_oxd_divider), _createVNode(_component_oxd_form, {\n    loading: $data.isLoading,\n    onSubmitValid: $options.onSave\n  }, {\n    default: _withCtx(() => [_createVNode(_component_oxd_form_row, null, {\n      default: _withCtx(() => [_createVNode(_component_oxd_grid, {\n        cols: 2,\n        class: \"orangehrm-full-width-grid\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_oxd_grid_item, {\n          class: \"organization-name-container\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.customField.fieldName,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.customField.fieldName = $event),\n            label: _ctx.$t('pim.field_name'),\n            rules: $data.rules.fieldName,\n            required: \"\"\n          }, null, 8, [\"modelValue\", \"label\", \"rules\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.customField.screen,\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.customField.screen = $event),\n            type: \"select\",\n            label: _ctx.$t('pim.screen'),\n            rules: $data.rules.screen,\n            options: $props.screenList,\n            required: \"\"\n          }, null, 8, [\"modelValue\", \"label\", \"rules\", \"options\"])]),\n          _: 1\n        })]),\n        _: 1\n      })]),\n      _: 1\n    }), _createVNode(_component_oxd_form_row, null, {\n      default: _withCtx(() => [_createVNode(_component_oxd_grid, {\n        cols: 2,\n        class: \"orangehrm-full-width-grid\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_oxd_grid_item, {\n          class: \"organization-name-container\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.customField.fieldType,\n            \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.customField.fieldType = $event),\n            type: \"select\",\n            label: _ctx.$t('general.type'),\n            rules: $data.rules.fieldType,\n            options: $props.fieldTypeList,\n            required: \"\",\n            disabled: $props.fieldInUse\n          }, null, 8, [\"modelValue\", \"label\", \"rules\", \"options\", \"disabled\"])]),\n          _: 1\n        }), $options.isDropDownField ? (_openBlock(), _createBlock(_component_oxd_grid_item, {\n          key: 0\n        }, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.customField.extraData,\n            \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.customField.extraData = $event),\n            label: _ctx.$t('pim.select_options'),\n            rules: $data.rules.extraData,\n            required: $options.isDropDownField\n          }, null, 8, [\"modelValue\", \"label\", \"rules\", \"required\"]), _createVNode(_component_oxd_text, {\n            tag: \"p\",\n            class: \"select-options-hint\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('pim.enter_allowed_options_separated_by_commas')), 1)]),\n            _: 1\n          })]),\n          _: 1\n        })) : _createCommentVNode(\"\", true)]),\n        _: 1\n      })]),\n      _: 1\n    }), _createVNode(_component_oxd_divider), _createVNode(_component_oxd_form_actions, null, {\n      default: _withCtx(() => [_createVNode(_component_required_text), _createVNode(_component_oxd_button, {\n        type: \"button\",\n        \"display-type\": \"ghost\",\n        label: _ctx.$t('general.cancel'),\n        onClick: $options.onCancel\n      }, null, 8, [\"label\", \"onClick\"]), _createVNode(_component_submit_button)]),\n      _: 1\n    })]),\n    _: 1\n  }, 8, [\"loading\", \"onSubmitValid\"])])]);\n}","map":{"version":3,"mappings":";;;EAoBOA,KAAK,EAAC;AAAgC;;EACpCA,KAAK,EAAC;AAA0B;;;;;;;;;;;;;uBADvCC,oBAwEM,OAxENC,UAwEM,GAvEJC,oBAsEM,OAtENC,UAsEM,GArEJC,aAEWC;IAFDC,GAAG,EAAC,IAAI;IAACP,KAAK,EAAC;;sBACvB,MAAiC,mCAA9BQ,OAAE;;MAGPH,aAAeI,yBAEfJ,aA8DWK;IA9DAC,OAAO,EAAEC,eAAS;IAAGC,aAAY,EAAEC;;sBAC5C,MAqBe,CArBfT,aAqBeU;wBApBb,MAmBW,CAnBXV,aAmBWW;QAnBAC,IAAI,EAAE,CAAC;QAAEjB,KAAK,EAAC;;0BACxB,MAOgB,CAPhBK,aAOgBa;UAPDlB,KAAK,EAAC;QAA6B;4BAChD,MAKE,CALFK,aAKEc;wBAJSP,iBAAW,CAACQ,SAAS;uEAArBR,iBAAW,CAACQ,SAAS;YAC7BC,KAAK,EAAEb,OAAE;YACTc,KAAK,EAAEV,WAAK,CAACQ,SAAS;YACvBG,QAAQ,EAAR;;;YAGJlB,aASgBa;4BARd,MAOE,CAPFb,aAOEc;wBANSP,iBAAW,CAACY,MAAM;uEAAlBZ,iBAAW,CAACY,MAAM;YAC3BC,IAAI,EAAC,QAAQ;YACZJ,KAAK,EAAEb,OAAE;YACTc,KAAK,EAAEV,WAAK,CAACY,MAAM;YACnBE,OAAO,EAAEC,iBAAU;YACpBJ,QAAQ,EAAR;;;;;;;QAKRlB,aAyBeU;wBAxBb,MAuBW,CAvBXV,aAuBWW;QAvBAC,IAAI,EAAE,CAAC;QAAEjB,KAAK,EAAC;;0BACxB,MAUgB,CAVhBK,aAUgBa;UAVDlB,KAAK,EAAC;QAA6B;4BAChD,MAQE,CARFK,aAQEc;wBAPSP,iBAAW,CAACgB,SAAS;uEAArBhB,iBAAW,CAACgB,SAAS;YAC9BH,IAAI,EAAC,QAAQ;YACZJ,KAAK,EAAEb,OAAE;YACTc,KAAK,EAAEV,WAAK,CAACgB,SAAS;YACtBF,OAAO,EAAEC,oBAAa;YACvBJ,QAAQ,EAAR,EAAQ;YACPM,QAAQ,EAAEF;;;YAGMb,wBAAe,kBAApCgB,aAUgBZ;UAAAa;QAAA;4BATd,MAKE,CALF1B,aAKEc;wBAJSP,iBAAW,CAACoB,SAAS;uEAArBpB,iBAAW,CAACoB,SAAS;YAC7BX,KAAK,EAAEb,OAAE;YACTc,KAAK,EAAEV,WAAK,CAACoB,SAAS;YACtBT,QAAQ,EAAET;qEAEbT,aAEWC;YAFDC,GAAG,EAAC,GAAG;YAACP,KAAK,EAAC;;8BACtB,MAAyD,mCAAtDQ,OAAE;;;;;;;;QAMbH,aAAeI,yBAEfJ,aASmB4B;wBARjB,MAAiB,CAAjB5B,aAAiB6B,2BACjB7B,aAKE8B;QAJAV,IAAI,EAAC,QAAQ;QACb,cAAY,EAAC,OAAO;QACnBJ,KAAK,EAAEb,OAAE;QACT4B,OAAK,EAAEtB;yCAEVT,aAAiBgC","names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_oxd_text","tag","_ctx","_component_oxd_divider","_component_oxd_form","loading","$data","onSubmitValid","$options","_component_oxd_form_row","_component_oxd_grid","cols","_component_oxd_grid_item","_component_oxd_input_field","fieldName","label","rules","required","screen","type","options","$props","fieldType","disabled","_createBlock","key","extraData","_component_oxd_form_actions","_component_required_text","_component_oxd_button","onClick","_component_submit_button"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\pages\\customField\\EditCustomField.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('pim.edit_custom_field') }}\n      </oxd-text>\n\n      <oxd-divider />\n\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item class=\"organization-name-container\">\n              <oxd-input-field\n                v-model=\"customField.fieldName\"\n                :label=\"$t('pim.field_name')\"\n                :rules=\"rules.fieldName\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"customField.screen\"\n                type=\"select\"\n                :label=\"$t('pim.screen')\"\n                :rules=\"rules.screen\"\n                :options=\"screenList\"\n                required\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item class=\"organization-name-container\">\n              <oxd-input-field\n                v-model=\"customField.fieldType\"\n                type=\"select\"\n                :label=\"$t('general.type')\"\n                :rules=\"rules.fieldType\"\n                :options=\"fieldTypeList\"\n                required\n                :disabled=\"fieldInUse\"\n              />\n            </oxd-grid-item>\n            <oxd-grid-item v-if=\"isDropDownField\">\n              <oxd-input-field\n                v-model=\"customField.extraData\"\n                :label=\"$t('pim.select_options')\"\n                :rules=\"rules.extraData\"\n                :required=\"isDropDownField\"\n              />\n              <oxd-text tag=\"p\" class=\"select-options-hint\">\n                {{ $t('pim.enter_allowed_options_separated_by_commas') }}\n              </oxd-text>\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-divider />\n\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            type=\"button\"\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\n\nconst customFieldModel = {\n  id: null,\n  fieldName: '',\n  screen: '',\n  fieldType: '',\n  extraData: '',\n};\n\nexport default {\n  props: {\n    customFieldId: {\n      type: Number,\n      required: true,\n    },\n    screenList: {\n      type: Array,\n      required: true,\n    },\n    fieldTypeList: {\n      type: Array,\n      required: true,\n    },\n    fieldInUse: {\n      type: Boolean,\n      required: true,\n    },\n  },\n\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/pim/custom-fields',\n    );\n    return {\n      http,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      customField: {...customFieldModel},\n      rules: {\n        fieldName: [required, shouldNotExceedCharLength(250)],\n        screen: [required, shouldNotExceedCharLength(100)],\n        fieldType: [required, shouldNotExceedCharLength(15)],\n        extraData: [required, shouldNotExceedCharLength(250)],\n      },\n    };\n  },\n\n  computed: {\n    isDropDownField() {\n      return this.customField.fieldType?.id === 1;\n    },\n  },\n  created() {\n    this.isLoading = true;\n    this.http\n      .get(this.customFieldId)\n      .then((response) => {\n        const {data} = response.data;\n        this.customField.fieldName = data.fieldName;\n        if (data.screen !== '' && data.screen !== null) {\n          this.customField.screen = this.screenList.find((c) => {\n            return c.id === data.screen;\n          });\n        }\n        if (data.fieldType !== '' && data.fieldType !== null) {\n          this.customField.fieldType = this.fieldTypeList.find((c) => {\n            return c.id === data.fieldType;\n          });\n        }\n        this.customField.extraData = data.extraData;\n\n        // Fetch list data for unique test\n        return this.http.getAll();\n      })\n      .then((response) => {\n        const {data} = response.data;\n        this.rules.fieldName.push((v) => {\n          const index = data.findIndex((item) => item.fieldName === v);\n          if (index > -1) {\n            const id = data[index].id;\n            return id != this.customFieldId\n              ? this.$t('general.already_exists')\n              : true;\n          } else {\n            return true;\n          }\n        });\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.customFieldId, {\n          fieldName: this.customField.fieldName,\n          screen: this.customField.screen.id,\n          fieldType: this.customField.fieldType.id,\n          extraData: this.customField.extraData,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      navigate('/pim/listCustomFields');\n    },\n  },\n};\n</script>\n\n<style src=\"./customField.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}