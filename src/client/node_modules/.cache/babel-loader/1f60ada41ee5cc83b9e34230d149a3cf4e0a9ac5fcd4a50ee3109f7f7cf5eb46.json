{"ast":null,"code":"import { ref } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport ProfileImageInput from '@/orangehrmPimPlugin/components/ProfileImageInput';\nimport FullNameInput from '@/orangehrmPimPlugin/components/FullNameInput';\nimport PasswordInput from '@/core/components/inputs/PasswordInput';\nimport { maxFileSize, required, shouldNotExceedCharLength, shouldNotLessThanCharLength, validFileTypes } from '@ohrm/core/util/validation/rules';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nconst defaultPic = `${window.appGlobal.publicPath}/images/default-photo.png`;\nconst employeeModel = {\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  empPicture: null,\n  employeeId: ''\n};\nconst userModel = {\n  username: '',\n  userRoleId: 2,\n  empNumber: 0,\n  status: '1',\n  password: '',\n  passwordConfirm: ''\n};\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput,\n    'profile-image-input': ProfileImageInput,\n    'full-name-input': FullNameInput,\n    'password-input': PasswordInput\n  },\n  props: {\n    empId: {\n      type: String,\n      required: true\n    },\n    allowedImageTypes: {\n      type: Array,\n      required: true\n    },\n    isPasswordRequired: {\n      type: Boolean,\n      default: true\n    }\n  },\n  setup(props) {\n    const employee = ref({\n      ...employeeModel,\n      employeeId: props.empId ? props.empId : ''\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/pim/employees');\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const employeeIdUniqueValidation = createUniqueValidator('Employee', 'employeeId', {\n      translateKey: 'pim.employee_id_exists'\n    });\n    const usernameUniqueValidation = createUniqueValidator('User', 'userName', {\n      matchByField: 'deleted',\n      matchByValue: 'false',\n      translateKey: 'pim.username_already_exists'\n    });\n    return {\n      http,\n      employee,\n      employeeIdUniqueValidation,\n      usernameUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      createLogin: false,\n      user: {\n        ...userModel\n      },\n      empNumber: null,\n      rules: {\n        firstName: [required, shouldNotExceedCharLength(30)],\n        middleName: [shouldNotExceedCharLength(30)],\n        lastName: [required, shouldNotExceedCharLength(30)],\n        employeeId: [this.employeeIdUniqueValidation, shouldNotExceedCharLength(10)],\n        empPicture: [maxFileSize(1024 * 1024), validFileTypes(this.allowedImageTypes)],\n        username: [required, this.usernameUniqueValidation, shouldNotLessThanCharLength(5), shouldNotExceedCharLength(40)],\n        status: [required]\n      }\n    };\n  },\n  computed: {\n    profilePicUrl() {\n      if (this.employee.empPicture) {\n        const file = this.employee.empPicture.base64;\n        const type = this.employee.empPicture.type;\n        const isPicture = this.allowedImageTypes.findIndex(item => item === type);\n        return isPicture > -1 ? `data:${type};base64,${file}` : defaultPic;\n      } else {\n        return defaultPic;\n      }\n    }\n  },\n  created() {\n    this.isLoading = true;\n    this.http.getAll().finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/pim/viewEmployeeList');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        ...this.employee\n      }).then(response => {\n        const {\n          data\n        } = response;\n        if (data?.data) {\n          this.empNumber = data.data.empNumber;\n        }\n        if (this.createLogin && data?.data) {\n          return this.http.request({\n            method: 'POST',\n            url: '/api/v2/admin/users',\n            data: {\n              username: this.user.username,\n              password: this.user.password,\n              status: this.user.status == '1',\n              userRoleId: this.user.userRoleId,\n              empNumber: data.data.empNumber\n            }\n          });\n        } else {\n          return;\n        }\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.employee = {\n          ...employeeModel\n        };\n        this.user = {\n          ...userModel\n        };\n        if (this.empNumber) {\n          navigate(`/pim/viewPersonalDetails/empNumber/${this.empNumber}`);\n        } else {\n          this.onCancel();\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AA+HA,SAAQA,GAAG,QAAO,KAAK;AACvB,SAAQC,UAAU,QAAO,kCAAkC;AAC3D,SAAQC,QAAQ,QAAO,mCAAmC;AAC1D,OAAOC,iBAAgB,MAAO,mDAAmD;AACjF,OAAOC,aAAY,MAAO,+CAA+C;AACzE,OAAOC,aAAY,MAAO,wCAAwC;AAClE,SACEC,WAAW,EACXC,QAAQ,EACRC,yBAAyB,EACzBC,2BAA2B,EAC3BC,cAAc,QACT,kCAAkC;AACzC,SAAQC,cAAc,QAAO,WAAW;AACxC,OAAOC,mBAAkB,MAAO,4CAA4C;AAE5E,MAAMC,UAAS,GAAK,GAAEC,MAAM,CAACC,SAAS,CAACC,UAAW,2BAA0B;AAE5E,MAAMC,aAAY,GAAI;EACpBC,SAAS,EAAE,EAAE;EACbC,UAAU,EAAE,EAAE;EACdC,QAAQ,EAAE,EAAE;EACZC,UAAU,EAAE,IAAI;EAChBC,UAAU,EAAE;AACd,CAAC;AAED,MAAMC,SAAQ,GAAI;EAChBC,QAAQ,EAAE,EAAE;EACZC,UAAU,EAAE,CAAC;EACbC,SAAS,EAAE,CAAC;EACZC,MAAM,EAAE,GAAG;EACXC,QAAQ,EAAE,EAAE;EACZC,eAAe,EAAE;AACnB,CAAC;AAED,eAAe;EACbC,UAAU,EAAE;IACV,kBAAkB,EAAEnB,cAAc;IAClC,qBAAqB,EAAER,iBAAiB;IACxC,iBAAiB,EAAEC,aAAa;IAChC,gBAAgB,EAAEC;EACpB,CAAC;EAED0B,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZ3B,QAAQ,EAAE;IACZ,CAAC;IACD4B,iBAAiB,EAAE;MACjBF,IAAI,EAAEG,KAAK;MACX7B,QAAQ,EAAE;IACZ,CAAC;IACD8B,kBAAkB,EAAE;MAClBJ,IAAI,EAAEK,OAAO;MACbC,OAAO,EAAE;IACX;EACF,CAAC;EAEDC,KAAK,CAACT,KAAK,EAAE;IACX,MAAMU,QAAO,GAAIzC,GAAG,CAAC;MACnB,GAAGiB,aAAa;MAChBK,UAAU,EAAES,KAAK,CAACC,KAAI,GAAID,KAAK,CAACC,KAAI,GAAI;IAC1C,CAAC,CAAC;IAEF,MAAMU,IAAG,GAAI,IAAIzC,UAAU,CACzBa,MAAM,CAACC,SAAS,CAAC4B,OAAO,EACxB,uBAAuB,CACxB;IAED,MAAM;MAACC;IAAqB,IAAIhC,mBAAmB,CAAC8B,IAAI,CAAC;IACzD,MAAMG,0BAAyB,GAAID,qBAAqB,CACtD,UAAU,EACV,YAAY,EACZ;MAACE,YAAY,EAAE;IAAwB,CAAC,CACzC;IACD,MAAMC,wBAAuB,GAAIH,qBAAqB,CAAC,MAAM,EAAE,UAAU,EAAE;MACzEI,YAAY,EAAE,SAAS;MACvBC,YAAY,EAAE,OAAO;MACrBH,YAAY,EAAE;IAChB,CAAC,CAAC;IAEF,OAAO;MACLJ,IAAI;MACJD,QAAQ;MACRI,0BAA0B;MAC1BE;IACF,CAAC;EACH,CAAC;EAEDG,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,WAAW,EAAE,KAAK;MAClBC,IAAI,EAAE;QAAC,GAAG9B;MAAS,CAAC;MACpBG,SAAS,EAAE,IAAI;MACf4B,KAAK,EAAE;QACLpC,SAAS,EAAE,CAACX,QAAQ,EAAEC,yBAAyB,CAAC,EAAE,CAAC,CAAC;QACpDW,UAAU,EAAE,CAACX,yBAAyB,CAAC,EAAE,CAAC,CAAC;QAC3CY,QAAQ,EAAE,CAACb,QAAQ,EAAEC,yBAAyB,CAAC,EAAE,CAAC,CAAC;QACnDc,UAAU,EAAE,CACV,IAAI,CAACuB,0BAA0B,EAC/BrC,yBAAyB,CAAC,EAAE,CAAC,CAC9B;QACDa,UAAU,EAAE,CACVf,WAAW,CAAC,IAAG,GAAI,IAAI,CAAC,EACxBI,cAAc,CAAC,IAAI,CAACyB,iBAAiB,CAAC,CACvC;QACDX,QAAQ,EAAE,CACRjB,QAAQ,EACR,IAAI,CAACwC,wBAAwB,EAC7BtC,2BAA2B,CAAC,CAAC,CAAC,EAC9BD,yBAAyB,CAAC,EAAE,CAAC,CAC9B;QACDmB,MAAM,EAAE,CAACpB,QAAQ;MACnB;IACF,CAAC;EACH,CAAC;EAEDgD,QAAQ,EAAE;IACRC,aAAa,GAAG;MACd,IAAI,IAAI,CAACf,QAAQ,CAACpB,UAAU,EAAE;QAC5B,MAAMoC,IAAG,GAAI,IAAI,CAAChB,QAAQ,CAACpB,UAAU,CAACqC,MAAM;QAC5C,MAAMzB,IAAG,GAAI,IAAI,CAACQ,QAAQ,CAACpB,UAAU,CAACY,IAAI;QAC1C,MAAM0B,SAAQ,GAAI,IAAI,CAACxB,iBAAiB,CAACyB,SAAS,CAC/CC,IAAI,IAAKA,IAAG,KAAM5B,IAAI,CACxB;QACD,OAAO0B,SAAQ,GAAI,CAAC,IAAK,QAAO1B,IAAK,WAAUwB,IAAK,KAAI5C,UAAU;MACpE,OAAO;QACL,OAAOA,UAAU;MACnB;IACF;EACF,CAAC;EAEDiD,OAAO,GAAG;IACR,IAAI,CAACX,SAAQ,GAAI,IAAI;IACrB,IAAI,CAACT,IAAI,CAACqB,MAAM,EAAE,CAACC,OAAO,CAAC,MAAM;MAC/B,IAAI,CAACb,SAAQ,GAAI,KAAK;IACxB,CAAC,CAAC;EACJ,CAAC;EAEDc,OAAO,EAAE;IACPC,QAAQ,GAAG;MACThE,QAAQ,CAAC,uBAAuB,CAAC;IACnC,CAAC;IACDiE,MAAM,GAAG;MACP,IAAI,CAAChB,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACT,IAAG,CACL0B,MAAM,CAAC;QACN,GAAG,IAAI,CAAC3B;MACV,CAAC,EACA4B,IAAI,CAAEC,QAAQ,IAAK;QAClB,MAAM;UAACpB;QAAI,IAAIoB,QAAQ;QACvB,IAAIpB,IAAI,EAAEA,IAAI,EAAE;UACd,IAAI,CAACxB,SAAQ,GAAIwB,IAAI,CAACA,IAAI,CAACxB,SAAS;QACtC;QACA,IAAI,IAAI,CAAC0B,WAAU,IAAKF,IAAI,EAAEA,IAAI,EAAE;UAClC,OAAO,IAAI,CAACR,IAAI,CAAC6B,OAAO,CAAC;YACvBC,MAAM,EAAE,MAAM;YACdC,GAAG,EAAE,qBAAqB;YAC1BvB,IAAI,EAAE;cACJ1B,QAAQ,EAAE,IAAI,CAAC6B,IAAI,CAAC7B,QAAQ;cAC5BI,QAAQ,EAAE,IAAI,CAACyB,IAAI,CAACzB,QAAQ;cAC5BD,MAAM,EAAE,IAAI,CAAC0B,IAAI,CAAC1B,MAAK,IAAK,GAAG;cAC/BF,UAAU,EAAE,IAAI,CAAC4B,IAAI,CAAC5B,UAAU;cAChCC,SAAS,EAAEwB,IAAI,CAACA,IAAI,CAACxB;YACvB;UACF,CAAC,CAAC;QACJ,OAAO;UACL;QACF;MACF,CAAC,EACA2C,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACK,MAAM,CAACC,WAAW,EAAE;MAClC,CAAC,EACAN,IAAI,CAAC,MAAM;QACV,IAAI,CAAC5B,QAAO,GAAI;UAAC,GAAGxB;QAAa,CAAC;QAClC,IAAI,CAACoC,IAAG,GAAI;UAAC,GAAG9B;QAAS,CAAC;QAC1B,IAAI,IAAI,CAACG,SAAS,EAAE;UAClBxB,QAAQ,CAAE,sCAAqC,IAAI,CAACwB,SAAU,EAAC,CAAC;QAClE,OAAO;UACL,IAAI,CAACwC,QAAQ,EAAE;QACjB;MACF,CAAC,CAAC;IACN;EACF;AACF,CAAC","names":["ref","APIService","navigate","ProfileImageInput","FullNameInput","PasswordInput","maxFileSize","required","shouldNotExceedCharLength","shouldNotLessThanCharLength","validFileTypes","OxdSwitchInput","useServerValidation","defaultPic","window","appGlobal","publicPath","employeeModel","firstName","middleName","lastName","empPicture","employeeId","userModel","username","userRoleId","empNumber","status","password","passwordConfirm","components","props","empId","type","String","allowedImageTypes","Array","isPasswordRequired","Boolean","default","setup","employee","http","baseUrl","createUniqueValidator","employeeIdUniqueValidation","translateKey","usernameUniqueValidation","matchByField","matchByValue","data","isLoading","createLogin","user","rules","computed","profilePicUrl","file","base64","isPicture","findIndex","item","created","getAll","finally","methods","onCancel","onSave","create","then","response","request","method","url","$toast","saveSuccess"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\pages\\employee\\SaveEmployee.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('general.add_employee') }}\n      </oxd-text>\n      <oxd-divider />\n\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <div class=\"orangehrm-employee-container\">\n          <div class=\"orangehrm-employee-image\">\n            <profile-image-input\n              v-model=\"employee.empPicture\"\n              :rules=\"rules.empPicture\"\n              :img-src=\"profilePicUrl\"\n            />\n          </div>\n          <div class=\"orangehrm-employee-form\">\n            <oxd-form-row>\n              <oxd-grid :cols=\"1\" class=\"orangehrm-full-width-grid\">\n                <oxd-grid-item>\n                  <full-name-input\n                    v-model:firstName=\"employee.firstName\"\n                    v-model:middleName=\"employee.middleName\"\n                    v-model:lastName=\"employee.lastName\"\n                    :rules=\"rules\"\n                  />\n                </oxd-grid-item>\n              </oxd-grid>\n\n              <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n                <oxd-grid-item>\n                  <oxd-input-field\n                    v-model=\"employee.employeeId\"\n                    :label=\"$t('general.employee_id')\"\n                    :rules=\"rules.employeeId\"\n                  />\n                </oxd-grid-item>\n              </oxd-grid>\n            </oxd-form-row>\n            <oxd-divider />\n            <oxd-form-row class=\"user-form-header\">\n              <oxd-text class=\"user-form-header-text\" tag=\"p\">\n                {{ $t('pim.create_login_details') }}\n              </oxd-text>\n              <oxd-switch-input v-model=\"createLogin\" />\n            </oxd-form-row>\n\n            <template v-if=\"createLogin\">\n              <oxd-form-row>\n                <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n                  <oxd-grid-item>\n                    <oxd-input-field\n                      v-model=\"user.username\"\n                      :label=\"$t('general.username')\"\n                      :rules=\"rules.username\"\n                      required\n                      autocomplete=\"off\"\n                    />\n                  </oxd-grid-item>\n\n                  <oxd-grid-item>\n                    <oxd-input-group\n                      :label=\"$t('general.status')\"\n                      :classes=\"{wrapper: '--status-grouped-field'}\"\n                    >\n                      <oxd-input-field\n                        v-model=\"user.status\"\n                        type=\"radio\"\n                        :option-label=\"$t('general.enabled')\"\n                        value=\"1\"\n                      />\n                      <oxd-input-field\n                        v-model=\"user.status\"\n                        type=\"radio\"\n                        :option-label=\"$t('general.disabled')\"\n                        value=\"2\"\n                      />\n                    </oxd-input-group>\n                  </oxd-grid-item>\n                </oxd-grid>\n              </oxd-form-row>\n\n              <password-input\n                v-model:password=\"user.password\"\n                v-model:passwordConfirm=\"user.passwordConfirm\"\n                :is-password-required=\"isPasswordRequired\"\n              />\n            </template>\n          </div>\n        </div>\n\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {ref} from 'vue';\nimport {APIService} from '@/core/util/services/api.service';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport ProfileImageInput from '@/orangehrmPimPlugin/components/ProfileImageInput';\nimport FullNameInput from '@/orangehrmPimPlugin/components/FullNameInput';\nimport PasswordInput from '@/core/components/inputs/PasswordInput';\nimport {\n  maxFileSize,\n  required,\n  shouldNotExceedCharLength,\n  shouldNotLessThanCharLength,\n  validFileTypes,\n} from '@ohrm/core/util/validation/rules';\nimport {OxdSwitchInput} from '@ohrm/oxd';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\n\nconst defaultPic = `${window.appGlobal.publicPath}/images/default-photo.png`;\n\nconst employeeModel = {\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  empPicture: null,\n  employeeId: '',\n};\n\nconst userModel = {\n  username: '',\n  userRoleId: 2,\n  empNumber: 0,\n  status: '1',\n  password: '',\n  passwordConfirm: '',\n};\n\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput,\n    'profile-image-input': ProfileImageInput,\n    'full-name-input': FullNameInput,\n    'password-input': PasswordInput,\n  },\n\n  props: {\n    empId: {\n      type: String,\n      required: true,\n    },\n    allowedImageTypes: {\n      type: Array,\n      required: true,\n    },\n    isPasswordRequired: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  setup(props) {\n    const employee = ref({\n      ...employeeModel,\n      employeeId: props.empId ? props.empId : '',\n    });\n\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/pim/employees',\n    );\n\n    const {createUniqueValidator} = useServerValidation(http);\n    const employeeIdUniqueValidation = createUniqueValidator(\n      'Employee',\n      'employeeId',\n      {translateKey: 'pim.employee_id_exists'},\n    );\n    const usernameUniqueValidation = createUniqueValidator('User', 'userName', {\n      matchByField: 'deleted',\n      matchByValue: 'false',\n      translateKey: 'pim.username_already_exists',\n    });\n\n    return {\n      http,\n      employee,\n      employeeIdUniqueValidation,\n      usernameUniqueValidation,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      createLogin: false,\n      user: {...userModel},\n      empNumber: null,\n      rules: {\n        firstName: [required, shouldNotExceedCharLength(30)],\n        middleName: [shouldNotExceedCharLength(30)],\n        lastName: [required, shouldNotExceedCharLength(30)],\n        employeeId: [\n          this.employeeIdUniqueValidation,\n          shouldNotExceedCharLength(10),\n        ],\n        empPicture: [\n          maxFileSize(1024 * 1024),\n          validFileTypes(this.allowedImageTypes),\n        ],\n        username: [\n          required,\n          this.usernameUniqueValidation,\n          shouldNotLessThanCharLength(5),\n          shouldNotExceedCharLength(40),\n        ],\n        status: [required],\n      },\n    };\n  },\n\n  computed: {\n    profilePicUrl() {\n      if (this.employee.empPicture) {\n        const file = this.employee.empPicture.base64;\n        const type = this.employee.empPicture.type;\n        const isPicture = this.allowedImageTypes.findIndex(\n          (item) => item === type,\n        );\n        return isPicture > -1 ? `data:${type};base64,${file}` : defaultPic;\n      } else {\n        return defaultPic;\n      }\n    },\n  },\n\n  created() {\n    this.isLoading = true;\n    this.http.getAll().finally(() => {\n      this.isLoading = false;\n    });\n  },\n\n  methods: {\n    onCancel() {\n      navigate('/pim/viewEmployeeList');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .create({\n          ...this.employee,\n        })\n        .then((response) => {\n          const {data} = response;\n          if (data?.data) {\n            this.empNumber = data.data.empNumber;\n          }\n          if (this.createLogin && data?.data) {\n            return this.http.request({\n              method: 'POST',\n              url: '/api/v2/admin/users',\n              data: {\n                username: this.user.username,\n                password: this.user.password,\n                status: this.user.status == '1',\n                userRoleId: this.user.userRoleId,\n                empNumber: data.data.empNumber,\n              },\n            });\n          } else {\n            return;\n          }\n        })\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          this.employee = {...employeeModel};\n          this.user = {...userModel};\n          if (this.empNumber) {\n            navigate(`/pim/viewPersonalDetails/empNumber/${this.empNumber}`);\n          } else {\n            this.onCancel();\n          }\n        });\n    },\n  },\n};\n</script>\n\n<style src=\"./employee.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}