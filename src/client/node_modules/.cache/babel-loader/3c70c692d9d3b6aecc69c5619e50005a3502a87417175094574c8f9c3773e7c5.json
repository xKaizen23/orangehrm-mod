{"ast":null,"code":"import { renderSlot as _renderSlot, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-a0f5562c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"orangehrm-background-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1));\nconst _hoisted_3 = {\n  class: \"orangehrm-paper-container\"\n};\nconst _hoisted_4 = {\n  class: \"orangehrm-container\"\n};\nconst _hoisted_5 = {\n  class: \"orangehrm-bottom-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_leave_list_table_header = _resolveComponent(\"leave-list-table-header\");\n  const _component_oxd_card_table = _resolveComponent(\"oxd-card-table\");\n  const _component_oxd_pagination = _resolveComponent(\"oxd-pagination\");\n  const _component_leave_comment_modal = _resolveComponent(\"leave-comment-modal\");\n  const _component_leave_bulk_action_modal = _resolveComponent(\"leave-bulk-action-modal\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_renderSlot(_ctx.$slots, \"default\", {\n    filters: $setup.filters,\n    rules: $setup.rules,\n    filterItems: $options.filterItems,\n    onReset: $options.onReset\n  }, undefined, true), _hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_leave_list_table_header, {\n    selected: $setup.checkedItems.length,\n    total: $setup.total,\n    loading: $setup.isLoading,\n    \"bulk-actions\": $setup.leaveBulkActions,\n    onOnActionClick: $options.onLeaveActionBulk\n  }, null, 8, [\"selected\", \"total\", \"loading\", \"bulk-actions\", \"onOnActionClick\"]), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_oxd_card_table, {\n    selected: $setup.checkedItems,\n    \"onUpdate:selected\": _cache[0] || (_cache[0] = $event => $setup.checkedItems = $event),\n    headers: $data.headers,\n    items: $setup.items?.data,\n    selectable: true,\n    clickable: false,\n    loading: $setup.isLoading,\n    \"row-decorator\": \"oxd-table-decorator-card\"\n  }, null, 8, [\"selected\", \"headers\", \"items\", \"loading\"])]), _createElementVNode(\"div\", _hoisted_5, [$setup.showPaginator ? (_openBlock(), _createBlock(_component_oxd_pagination, {\n    key: 0,\n    current: $setup.currentPage,\n    \"onUpdate:current\": _cache[1] || (_cache[1] = $event => $setup.currentPage = $event),\n    length: $setup.pages\n  }, null, 8, [\"current\", \"length\"])) : _createCommentVNode(\"\", true)])])]), $data.showCommentModal ? (_openBlock(), _createBlock(_component_leave_comment_modal, {\n    key: 0,\n    id: $data.commentModalState,\n    onClose: $options.onCommentModalClose\n  }, null, 8, [\"id\", \"onClose\"])) : _createCommentVNode(\"\", true), _createVNode(_component_leave_bulk_action_modal, {\n    ref: \"bulkActionModal\",\n    data: $data.bulkActionModalState\n  }, null, 8, [\"data\"])], 64);\n}","map":{"version":3,"mappings":";;;EAoBOA,KAAK,EAAC;AAAgC;gEAOzCC,oBAAM;;EACDD,KAAK,EAAC;AAA2B;;EAS/BA,KAAK,EAAC;AAAqB;;EAW3BA,KAAK,EAAC;AAA4B;;;;;;;6DA5B3CC,oBAoCM,OApCNC,UAoCM,GAnCJC,YAKQC;IAJLC,OAAO,EAAEC,cAAO;IAChBC,KAAK,EAAED,YAAK;IACZE,WAAY,EAAEC,oBAAW;IACzBC,OAAQ,EAAED;uBAEbE,UAAM,EACNV,oBA2BM,OA3BNW,UA2BM,GA1BJC,aAO0BC;IANvBC,QAAQ,EAAET,mBAAY,CAACU,MAAM;IAC7BC,KAAK,EAAEX,YAAK;IACZY,OAAO,EAAEZ,gBAAS;IAClB,cAAY,EAAEA,uBAAgB;IAC9Ba,eAAe,EAAEV;oFAGpBR,oBAUM,OAVNmB,UAUM,GATJP,aAQEQ;IAPQN,QAAQ,EAAET,mBAAY;6DAAZA,mBAAY;IAC7BgB,OAAO,EAAEC,aAAO;IAChBC,KAAK,EAAElB,YAAK,EAAEmB,IAAI;IAClBC,UAAU,EAAE,IAAI;IAChBC,SAAS,EAAE,KAAK;IAChBT,OAAO,EAAEZ,gBAAS;IACnB,eAAa,EAAC;8DAGlBL,oBAMM,OANN2B,UAMM,GAJItB,oBAAa,kBADrBuB,aAIEC;;IAFQC,OAAO,EAAEzB,kBAAW;4DAAXA,kBAAW;IAC3BU,MAAM,EAAEV;6EAMTiB,sBAAgB,kBADxBM,aAKsBG;;IAHnBC,EAAE,EAAEV,uBAAiB;IACrBW,OAAK,EAAEzB;mEAGVI,aAC0BsB;IADDC,GAAG,EAAC,iBAAiB;IAAEX,IAAI,EAAEF","names":["class","_createElementVNode","_hoisted_1","_renderSlot","_ctx","filters","$setup","rules","filterItems","$options","onReset","_hoisted_2","_hoisted_3","_createVNode","_component_leave_list_table_header","selected","length","total","loading","onOnActionClick","_hoisted_4","_component_oxd_card_table","headers","$data","items","data","selectable","clickable","_hoisted_5","_createBlock","_component_oxd_pagination","current","_component_leave_comment_modal","id","onClose","_component_leave_bulk_action_modal","ref"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmLeavePlugin\\components\\LeaveListTable.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <slot\n      :filters=\"filters\"\n      :rules=\"rules\"\n      :filter-items=\"filterItems\"\n      :on-reset=\"onReset\"\n    ></slot>\n    <br />\n    <div class=\"orangehrm-paper-container\">\n      <leave-list-table-header\n        :selected=\"checkedItems.length\"\n        :total=\"total\"\n        :loading=\"isLoading\"\n        :bulk-actions=\"leaveBulkActions\"\n        @on-action-click=\"onLeaveActionBulk\"\n      >\n      </leave-list-table-header>\n      <div class=\"orangehrm-container\">\n        <oxd-card-table\n          v-model:selected=\"checkedItems\"\n          :headers=\"headers\"\n          :items=\"items?.data\"\n          :selectable=\"true\"\n          :clickable=\"false\"\n          :loading=\"isLoading\"\n          row-decorator=\"oxd-table-decorator-card\"\n        />\n      </div>\n      <div class=\"orangehrm-bottom-container\">\n        <oxd-pagination\n          v-if=\"showPaginator\"\n          v-model:current=\"currentPage\"\n          :length=\"pages\"\n        />\n      </div>\n    </div>\n  </div>\n  <leave-comment-modal\n    v-if=\"showCommentModal\"\n    :id=\"commentModalState\"\n    @close=\"onCommentModalClose\"\n  >\n  </leave-comment-modal>\n  <leave-bulk-action-modal ref=\"bulkActionModal\" :data=\"bulkActionModalState\">\n  </leave-bulk-action-modal>\n</template>\n\n<script>\nimport {\n  required,\n  validSelection,\n  validDateFormat,\n  endDateShouldBeAfterStartDate,\n  shouldNotExceedCharLength,\n} from '@/core/util/validation/rules';\nimport {computed, ref} from 'vue';\nimport {APIService} from '@/core/util/services/api.service';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {truncate} from '@ohrm/core/util/helper/truncate';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useLeaveActions from '@/orangehrmLeavePlugin/util/composable/useLeaveActions';\nimport LeaveCommentsModal from '@/orangehrmLeavePlugin/components/LeaveCommentsModal';\nimport LeaveBulkActionModal from '@/orangehrmLeavePlugin/components/LeaveBulkActionModal';\nimport LeaveListTableHeader from '@/orangehrmLeavePlugin/components/LeaveListTableHeader';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport {formatDate, parseDate} from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\n\nconst defaultFilters = {\n  employee: null,\n  fromDate: null,\n  toDate: null,\n  statuses: [],\n  subunit: null,\n  includePastEmps: false,\n  leaveType: null,\n};\n\nexport default {\n  name: 'LeaveListTable',\n\n  components: {\n    'leave-list-table-header': LeaveListTableHeader,\n    'leave-comment-modal': LeaveCommentsModal,\n    'leave-bulk-action-modal': LeaveBulkActionModal,\n  },\n\n  props: {\n    myLeaveList: {\n      type: Boolean,\n      default: false,\n    },\n    leaveStatuses: {\n      type: Array,\n      default: () => [],\n    },\n    employee: {\n      type: Object,\n      required: false,\n      default: () => null,\n    },\n    leaveType: {\n      type: Object,\n      required: false,\n      default: () => null,\n    },\n    fromDate: {\n      type: String,\n      required: false,\n      default: null,\n    },\n    toDate: {\n      type: String,\n      required: false,\n      default: null,\n    },\n    leaveStatus: {\n      type: Object,\n      required: false,\n      default: () => null,\n    },\n  },\n\n  setup(props) {\n    const filters = ref({\n      ...defaultFilters,\n      ...(props.leaveType && {leaveType: props.leaveType}),\n      ...(props.fromDate && {fromDate: props.fromDate}),\n      ...(props.toDate && {toDate: props.toDate}),\n      ...(props.leaveStatus && {statuses: [props.leaveStatus]}),\n      ...(props.employee && {\n        employee: {\n          id: props.employee.empNumber,\n          label: `${props.employee.firstName} ${props.employee.middleName} ${props.employee.lastName}`,\n          isPastEmployee: props.employee.terminationId,\n        },\n      }),\n    });\n    const checkedItems = ref([]);\n    const {$t} = usei18n();\n    const {locale} = useLocale();\n    const {jsDateFormat, userDateFormat} = useDateFormat();\n\n    const rules = {\n      fromDate: [required, validDateFormat(userDateFormat)],\n      toDate: [\n        required,\n        validDateFormat(userDateFormat),\n        endDateShouldBeAfterStartDate(\n          () => filters.value.fromDate,\n          $t('general.to_date_should_be_after_from_date'),\n          {allowSameDate: true},\n        ),\n      ],\n      statuses: [required],\n      employee: [shouldNotExceedCharLength(100), validSelection],\n    };\n\n    const serializedFilters = computed(() => {\n      const statuses = Array.isArray(filters.value.statuses)\n        ? filters.value.statuses\n        : [];\n\n      return {\n        empNumber: filters.value.employee?.id,\n        fromDate: filters.value.fromDate,\n        toDate: filters.value.toDate,\n        subunitId: filters.value.subunit?.id,\n        includeEmployees: filters.value.includePastEmps\n          ? 'currentAndPast'\n          : 'onlyCurrent',\n        statuses: statuses.map((item) => item.id),\n        leaveTypeId: filters.value.leaveType?.id,\n      };\n    });\n\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/leave/${\n        props.myLeaveList ? 'leave-requests' : 'employees/leave-requests'\n      }`,\n    );\n\n    const leavelistNormalizer = (data) => {\n      return data.map((item) => {\n        let leaveDatePeriod,\n          leaveStatuses,\n          leaveBalances = '';\n        const duration = item.dates.durationType?.type;\n\n        if (item.dates.fromDate) {\n          leaveDatePeriod = formatDate(\n            parseDate(item.dates.fromDate),\n            jsDateFormat,\n            {locale},\n          );\n        }\n        if (item.dates.toDate) {\n          leaveDatePeriod += ` to ${formatDate(\n            parseDate(item.dates.toDate),\n            jsDateFormat,\n            {locale},\n          )}`;\n        }\n        if (item.dates.startTime && item.dates.endTime) {\n          leaveDatePeriod += ` (${item.dates.startTime} - ${item.dates.endTime})`;\n        }\n        if (\n          duration === 'half_day_morning' ||\n          duration === 'half_day_afternoon'\n        ) {\n          leaveDatePeriod += ` ${$t('leave.half_day')}`;\n        }\n        if (Array.isArray(item.leaveBreakdown)) {\n          leaveStatuses = item.leaveBreakdown\n            .map(\n              (status) =>\n                `${status.name} (${parseFloat(status.lengthDays).toFixed(2)})`,\n            )\n            .join(', ');\n        }\n        if (Array.isArray(item.leaveBalances)) {\n          if (item.leaveBalances.length > 1) {\n            leaveBalances = item.leaveBalances\n              .map(({period, balance}) => {\n                const _balance = parseFloat(balance.balance).toFixed(2);\n                const startDate = formatDate(\n                  parseDate(period.startDate),\n                  jsDateFormat,\n                  {locale},\n                );\n                const endDate = formatDate(\n                  parseDate(period.endDate),\n                  jsDateFormat,\n                  {locale},\n                );\n                return `${_balance} (${startDate} - ${endDate})`;\n              })\n              .join(', ');\n          } else {\n            const balance = item.leaveBalances[0]?.balance.balance;\n            leaveBalances = balance ? parseFloat(balance).toFixed(2) : '0.00';\n          }\n        }\n\n        const empName = `${item.employee?.firstName} ${item.employee?.middleName} ${item.employee?.lastName}`;\n        const leaveTypeName = item.leaveType?.name;\n\n        if (item.employee?.terminationId) {\n          empName + ` (${$t('general.past_employee')})`;\n        }\n        if (item.leaveType?.deleted) {\n          leaveTypeName + ` (${$t('general.deleted')})`;\n        }\n\n        return {\n          id: item.id,\n          empNumber: item.employee?.empNumber,\n          date: leaveDatePeriod,\n          employeeName: empName,\n          leaveType: leaveTypeName,\n          leaveBalance: leaveBalances,\n          days: parseFloat(item.noOfDays).toFixed(2),\n          status: leaveStatuses,\n          comment: truncate(item.lastComment?.comment),\n          actions: item.allowedActions,\n        };\n      });\n    };\n\n    const {\n      leaveActions,\n      processLeaveRequestAction,\n      processLeaveRequestBulkAction,\n    } = useLeaveActions(http);\n\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery,\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: leavelistNormalizer,\n    });\n\n    const leaveBulkActions = computed(() => {\n      if (checkedItems.value.length > 0 && response.value.data) {\n        const allActions = checkedItems.value.map((item) => {\n          return response.value.data[item].actions;\n        });\n        return {\n          APPROVE: allActions.reduce(\n            (approvable, actions) =>\n              approvable && actions.find((i) => i.action === 'APPROVE'),\n            true,\n          ),\n          REJECT: allActions.reduce(\n            (rejectable, actions) =>\n              rejectable && actions.find((i) => i.action === 'REJECT'),\n            true,\n          ),\n          CANCEL: allActions.reduce(\n            (cancelable, actions) =>\n              cancelable && actions.find((i) => i.action === 'CANCEL'),\n            true,\n          ),\n        };\n      }\n      return null;\n    });\n\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      rules,\n      filters,\n      checkedItems,\n      leaveActions,\n      leaveBulkActions,\n      processLeaveRequestAction,\n      processLeaveRequestBulkAction,\n    };\n  },\n\n  data() {\n    return {\n      headers: [\n        {name: 'date', title: this.$t('general.date'), style: {flex: 1}},\n        {\n          name: 'employeeName',\n          title: this.$t('general.employee_name'),\n          style: {flex: 1},\n        },\n        {\n          name: 'leaveType',\n          title: this.$t('leave.leave_type'),\n          style: {flex: 1},\n        },\n        {\n          name: 'leaveBalance',\n          title: this.$t('leave.leave_balance_days'),\n          style: {flex: 1},\n        },\n        {\n          name: 'days',\n          title: this.$t('leave.number_of_days'),\n          style: {flex: 1},\n        },\n        {name: 'status', title: this.$t('general.status'), style: {flex: 1}},\n        {\n          name: 'comment',\n          title: this.$t('general.comments'),\n          style: {flex: '5%'},\n        },\n        {\n          name: 'action',\n          slot: 'footer',\n          title: this.$t('general.actions'),\n          cellType: 'oxd-table-cell-actions',\n          cellRenderer: this.cellRenderer,\n          style: {\n            flex: this.myLeaveList ? '10%' : '20%',\n          },\n        },\n      ],\n      showCommentModal: false,\n      commentModalState: null,\n      bulkActionModalState: null,\n    };\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    if (this.filters.statuses.length === 0) {\n      this.filters.statuses = this.myLeaveList\n        ? this.leaveStatuses\n        : this.leaveStatuses.filter((status) => status.id === 1);\n    }\n    this.http\n      .request({method: 'GET', url: '/api/v2/leave/leave-periods'})\n      .then((response) => {\n        const {data, meta} = response.data;\n        if (meta.leavePeriodDefined) {\n          this.filters.fromDate =\n            this.filters.fromDate ?? meta?.currentLeavePeriod.startDate;\n          this.filters.toDate =\n            this.filters.toDate ?? meta?.currentLeavePeriod.endDate;\n        } else {\n          this.filters.fromDate = this.filters.fromDate ?? data[0]?.startDate;\n          this.filters.toDate = this.filters.toDate ?? data[0]?.endDate;\n        }\n      })\n      .finally(() => {\n        this.isLoading = false;\n        Object.assign(defaultFilters, this.filters);\n      });\n  },\n\n  methods: {\n    cellRenderer(...[, , , row]) {\n      const cellConfig = {};\n      const {approve, reject, cancel, more} = this.leaveActions;\n      const dropdownActions = [\n        {label: this.$t('general.add_comment'), context: 'add_comment'},\n        {label: this.$t('leave.view_leave_details'), context: 'leave_details'},\n        {label: this.$t('leave.view_pim_info'), context: 'pim_details'},\n      ];\n\n      row.actions.map((item) => {\n        if (item.action === 'APPROVE') {\n          approve.props.label = this.$t('general.approve');\n          approve.props.onClick = () => this.onLeaveAction(row.id, 'APPROVE');\n          cellConfig.approve = approve;\n        }\n        if (item.action === 'REJECT') {\n          reject.props.label = this.$t('general.reject');\n          reject.props.onClick = () => this.onLeaveAction(row.id, 'REJECT');\n          cellConfig.reject = reject;\n        }\n        if (item.action === 'CANCEL') {\n          if (this.myLeaveList) {\n            cancel.props.label = this.$t('general.cancel');\n            cancel.props.onClick = () => this.onLeaveAction(row.id, 'CANCEL');\n            cellConfig.reject = cancel;\n          } else {\n            dropdownActions.push({\n              label: this.$t('leave.cancel_leave'),\n              context: 'cancel_leave',\n            });\n          }\n        }\n      });\n\n      more.props.options = dropdownActions;\n      more.props.onClick = ($event) => this.onLeaveDropdownAction($event, row);\n      cellConfig.more = more;\n\n      return {\n        props: {\n          header: {\n            cellConfig,\n          },\n        },\n      };\n    },\n    onLeaveDropdownAction(event, item) {\n      switch (event.context) {\n        case 'add_comment':\n          this.commentModalState = item.id;\n          this.showCommentModal = true;\n          break;\n        case 'cancel_leave':\n          this.onLeaveAction(item.id, 'CANCEL');\n          break;\n        case 'pim_details':\n          navigate('/pim/viewPersonalDetails/empNumber/{id}', {\n            id: item.empNumber,\n          });\n          break;\n        default:\n          navigate(\n            '/leave/viewLeaveRequest/{id}',\n            {id: item.id},\n            this.myLeaveList && {mode: 'my-leave'},\n          );\n      }\n    },\n    onLeaveAction(id, actionType) {\n      this.isLoading = true;\n      this.processLeaveRequestAction(id, actionType)\n        .then(() => {\n          this.$toast.updateSuccess();\n        })\n        .finally(this.resetDataTable);\n    },\n    async onLeaveActionBulk(actionType) {\n      this.isLoading = true;\n      this.bulkActionModalState = {\n        count: this.checkedItems.length,\n        action: actionType,\n      };\n\n      const ids = this.checkedItems.map((index) => {\n        return this.items.data[index].id;\n      });\n      const confirmation = await this.$refs.bulkActionModal.showDialog();\n\n      if (confirmation !== 'ok') {\n        this.isLoading = false;\n        return;\n      }\n\n      this.processLeaveRequestBulkAction(ids, actionType)\n        .then((response) => {\n          const {data} = response.data;\n          if (Array.isArray(data))\n            this.$toast.success({\n              title: this.$t('general.success'),\n              message: this.$t('leave.leave_requests_action', {\n                action: actionType,\n                count: data.length,\n              }),\n            });\n        })\n        .finally(() => {\n          this.bulkActionModalState = null;\n          this.resetDataTable();\n        });\n    },\n    onCommentModalClose() {\n      this.commentModalState = null;\n      this.showCommentModal = false;\n      this.resetDataTable();\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onReset() {\n      this.filters = {...defaultFilters};\n      this.resetDataTable();\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n::v-deep(.card-footer-slot) {\n  .oxd-table-cell-actions {\n    justify-content: flex-end;\n  }\n  .oxd-table-cell-actions > * {\n    margin: 0 !important;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}