{"ast":null,"code":"import EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport { APIService } from '@/core/util/services/api.service';\nexport default {\n  name: 'ReviewersAutoComplete',\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete\n  },\n  props: {\n    includeEmployees: {\n      type: String,\n      default: 'onlyCurrent'\n    },\n    excludeEmployee: {\n      type: Object,\n      required: false,\n      default: null\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/performance/trackers/reviewers');\n    return {\n      http\n    };\n  },\n  methods: {\n    async loadEmployees(searchParam) {\n      return new Promise(resolve => {\n        if (searchParam.trim()) {\n          this.http.getAll({\n            nameOrId: searchParam.trim(),\n            empNumber: this.excludeEmployee == null ? null : this.excludeEmployee.id //to be added back when a seperate API is created for reviewers\n          }).then(({\n            data\n          }) => {\n            resolve(data.data.map(employee => {\n              return {\n                id: employee.empNumber,\n                label: `${employee.firstName} ${employee.middleName} ${employee.lastName}`,\n                isPastEmployee: employee.terminationId ? true : false\n              };\n            }));\n          });\n        } else {\n          resolve([]);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AA8BA,OAAOA,oBAAmB,MAAO,+CAA+C;AAChF,SAAQC,UAAU,QAAO,kCAAkC;AAE3D,eAAe;EACbC,IAAI,EAAE,uBAAuB;EAC7BC,UAAU,EAAE;IACV,uBAAuB,EAAEH;EAC3B,CAAC;EACDI,KAAK,EAAE;IACLC,gBAAgB,EAAE;MAChBC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX,CAAC;IACDC,eAAe,EAAE;MACfH,IAAI,EAAEI,MAAM;MACZC,QAAQ,EAAE,KAAK;MACfH,OAAO,EAAE;IACX;EACF,CAAC;EACDI,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIZ,UAAU,CACzBa,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,wCAAwC,CACzC;IACD,OAAO;MACLH;IACF,CAAC;EACH,CAAC;EACDI,OAAO,EAAE;IACP,MAAMC,aAAa,CAACC,WAAW,EAAE;MAC/B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;QAC9B,IAAIF,WAAW,CAACG,IAAI,EAAE,EAAE;UACtB,IAAI,CAACT,IAAG,CACLU,MAAM,CAAC;YACNC,QAAQ,EAAEL,WAAW,CAACG,IAAI,EAAE;YAC5BG,SAAS,EACP,IAAI,CAAChB,eAAc,IAAK,IAAG,GAAI,IAAG,GAAI,IAAI,CAACA,eAAe,CAACiB,EAAE,CAAE;UACnE,CAAC,EACAC,IAAI,CAAC,CAAC;YAACC;UAAI,CAAC,KAAK;YAChBP,OAAO,CACLO,IAAI,CAACA,IAAI,CAACC,GAAG,CAAEC,QAAQ,IAAK;cAC1B,OAAO;gBACLJ,EAAE,EAAEI,QAAQ,CAACL,SAAS;gBACtBM,KAAK,EAAG,GAAED,QAAQ,CAACE,SAAS,IAAIF,QAAQ,CAACG,UAAU,IAAIH,QAAQ,CAACI,QAAS,EAAC;gBAC1EC,cAAc,EAAEL,QAAQ,CAACM,aAAY,GAAI,IAAG,GAAI;cAClD,CAAC;YACH,CAAC,CAAC,CACH;UACH,CAAC,CAAC;QACN,OAAO;UACLf,OAAO,CAAC,EAAE,CAAC;QACb;MACF,CAAC,CAAC;IACJ;EACF;AACF,CAAC","names":["EmployeeAutocomplete","APIService","name","components","props","includeEmployees","type","String","default","excludeEmployee","Object","required","setup","http","window","appGlobal","baseUrl","methods","loadEmployees","searchParam","Promise","resolve","trim","getAll","nameOrId","empNumber","id","then","data","map","employee","label","firstName","middleName","lastName","isPastEmployee","terminationId"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPerformancePlugin\\components\\ReviewerAutoComplete.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <employee-autocomplete\n    :label=\"$t('performance.reviewers')\"\n    :multiple=\"true\"\n    :clear=\"false\"\n    :create-options=\"loadEmployees\"\n    required\n  />\n</template>\n\n<script>\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport {APIService} from '@/core/util/services/api.service';\n\nexport default {\n  name: 'ReviewersAutoComplete',\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete,\n  },\n  props: {\n    includeEmployees: {\n      type: String,\n      default: 'onlyCurrent',\n    },\n    excludeEmployee: {\n      type: Object,\n      required: false,\n      default: null,\n    },\n  },\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/performance/trackers/reviewers',\n    );\n    return {\n      http,\n    };\n  },\n  methods: {\n    async loadEmployees(searchParam) {\n      return new Promise((resolve) => {\n        if (searchParam.trim()) {\n          this.http\n            .getAll({\n              nameOrId: searchParam.trim(),\n              empNumber:\n                this.excludeEmployee == null ? null : this.excludeEmployee.id, //to be added back when a seperate API is created for reviewers\n            })\n            .then(({data}) => {\n              resolve(\n                data.data.map((employee) => {\n                  return {\n                    id: employee.empNumber,\n                    label: `${employee.firstName} ${employee.middleName} ${employee.lastName}`,\n                    isPastEmployee: employee.terminationId ? true : false,\n                  };\n                }),\n              );\n            });\n        } else {\n          resolve([]);\n        }\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}