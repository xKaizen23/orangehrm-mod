{"ast":null,"code":"import { computed, ref } from 'vue';\nimport { navigate } from '@/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\nimport usei18n from '@/core/util/composable/usei18n';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport IncludeEmployeeDropdown from '@/core/components/dropdown/IncludeEmployeeDropdown';\nimport { shouldNotExceedCharLength, validSelection } from '@/core/util/validation/rules';\nconst defaultSortOrder = {\n  'employee.lastName': 'DEFAULT',\n  'tracker.trackerName': 'DEFAULT',\n  'tracker.modifiedDate': 'DESC',\n  'tracker.addedDate': 'DEFAULT'\n};\nexport default {\n  components: {\n    'include-employee-dropdown': IncludeEmployeeDropdown,\n    'employee-autocomplete': EmployeeAutocomplete\n  },\n  setup() {\n    const {\n      $t\n    } = usei18n();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const employeeTrackerNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          title: item.title,\n          empName: `${item.employee?.firstName} ${item.employee?.lastName} ${item.employee?.terminationId ? ` ${$t('general.past_employee')}` : ''}`,\n          modifiedDate: formatDate(parseDate(item.modifiedDate), jsDateFormat, {\n            locale\n          }),\n          addedDate: formatDate(parseDate(item.addedDate), jsDateFormat, {\n            locale\n          })\n        };\n      });\n    };\n    const defaultFilters = {\n      empName: null,\n      includeEmployees: {\n        id: 1,\n        param: 'onlyCurrent',\n        label: $t('general.current_employees_only')\n      }\n    };\n    const filters = ref({\n      ...defaultFilters\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilter = computed(() => {\n      return {\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n        empNumber: filters.value.empName?.id,\n        includeEmployees: filters.value.includeEmployees?.param\n      };\n    });\n    const api = '/api/v2/performance/employees/trackers';\n    const http = new APIService(window.appGlobal.baseUrl, api);\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      isLoading,\n      response,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilter,\n      normalizer: employeeTrackerNormalizer\n    });\n    onSort(execQuery);\n    return {\n      total,\n      showPaginator,\n      currentPage,\n      pages,\n      pageSize,\n      isLoading,\n      items: response,\n      api,\n      http,\n      execQuery,\n      sortDefinition,\n      filters\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'empName',\n        slot: 'title',\n        title: this.$t('general.employee_name'),\n        sortField: 'employee.lastName',\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'title',\n        title: this.$t('general.trackers'),\n        sortField: 'tracker.trackerName',\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'addedDate',\n        title: this.$t('performance.added_date'),\n        sortField: 'tracker.addedDate',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'modifiedDate',\n        title: this.$t('performance.modified_date'),\n        sortField: 'tracker.modifiedDate',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'actions',\n        title: this.$t('general.actions'),\n        slot: 'action',\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          view: {\n            onClick: this.onClickView,\n            component: 'oxd-button',\n            props: {\n              name: 'view',\n              label: this.$t('general.view'),\n              class: 'orangehrm-left-space',\n              displayType: 'text'\n            }\n          }\n        }\n      }],\n      rules: {\n        employee: [shouldNotExceedCharLength(100), validSelection]\n      }\n    };\n  },\n  methods: {\n    async resetDataTable() {\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickView(item) {\n      navigate('/performance/addPerformanceTrackerLog/trackId/{id}', {\n        id: item.id\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["computed","ref","navigate","APIService","usePaginate","useSort","formatDate","parseDate","useDateFormat","useLocale","usei18n","EmployeeAutocomplete","IncludeEmployeeDropdown","shouldNotExceedCharLength","validSelection","defaultSortOrder","components","setup","$t","jsDateFormat","locale","employeeTrackerNormalizer","data","map","item","id","title","empName","employee","firstName","lastName","terminationId","modifiedDate","addedDate","defaultFilters","includeEmployees","param","label","filters","sortDefinition","sortField","sortOrder","onSort","serializedFilter","value","empNumber","api","http","window","appGlobal","baseUrl","showPaginator","currentPage","total","pages","pageSize","isLoading","response","execQuery","query","normalizer","items","headers","name","slot","style","flex","cellType","cellConfig","view","onClick","onClickView","component","props","class","displayType","rules","methods","resetDataTable","filterItems"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPerformancePlugin\\pages\\EmployeeTrackers.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <oxd-table-filter\n      :filter-title=\"$t('performance.employee_performance_trackers')\"\n    >\n      <oxd-form @submit-valid=\"filterItems\" @reset=\"resetDataTable\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <employee-autocomplete\n                v-model=\"filters.empName\"\n                :rules=\"rules.employee\"\n                api-path=\"/api/v2/performance/trackers/reviewers\"\n                :params=\"{\n                  includeEmployees: filters.includeEmployees.param,\n                }\"\n              >\n              </employee-autocomplete>\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <include-employee-dropdown\n                v-model=\"filters.includeEmployees\"\n              ></include-employee-dropdown>\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <oxd-divider />\n        <oxd-form-actions>\n          <oxd-button\n            display-type=\"ghost\"\n            :label=\"$t('general.reset')\"\n            type=\"reset\"\n          />\n          <oxd-button\n            class=\"orangehrm-left-space\"\n            display-type=\"secondary\"\n            :label=\"$t('general.search')\"\n            type=\"submit\"\n          />\n        </oxd-form-actions>\n      </oxd-form>\n    </oxd-table-filter>\n    <br />\n    <div class=\"orangehrm-paper-container\">\n      <table-header\n        :selected=\"0\"\n        :total=\"total\"\n        :loading=\"isLoading\"\n      ></table-header>\n      <div class=\"orangehrm-container\">\n        <oxd-card-table\n          v-model:order=\"sortDefinition\"\n          :headers=\"headers\"\n          :items=\"items?.data\"\n          :selectable=\"false\"\n          :clickable=\"true\"\n          :loading=\"isLoading\"\n          class=\"orangehrm-employee-list\"\n          row-decorator=\"oxd-table-decorator-card\"\n        />\n      </div>\n      <div class=\"orangehrm-bottom-container\">\n        <oxd-pagination\n          v-if=\"showPaginator\"\n          v-model:current=\"currentPage\"\n          :length=\"pages\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {computed, ref} from 'vue';\nimport {navigate} from '@/core/util/helper/navigation';\nimport {APIService} from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport {formatDate, parseDate} from '@ohrm/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\nimport usei18n from '@/core/util/composable/usei18n';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport IncludeEmployeeDropdown from '@/core/components/dropdown/IncludeEmployeeDropdown';\nimport {\n  shouldNotExceedCharLength,\n  validSelection,\n} from '@/core/util/validation/rules';\n\nconst defaultSortOrder = {\n  'employee.lastName': 'DEFAULT',\n  'tracker.trackerName': 'DEFAULT',\n  'tracker.modifiedDate': 'DESC',\n  'tracker.addedDate': 'DEFAULT',\n};\nexport default {\n  components: {\n    'include-employee-dropdown': IncludeEmployeeDropdown,\n    'employee-autocomplete': EmployeeAutocomplete,\n  },\n  setup() {\n    const {$t} = usei18n();\n    const {jsDateFormat} = useDateFormat();\n    const {locale} = useLocale();\n    const employeeTrackerNormalizer = (data) => {\n      return data.map((item) => {\n        return {\n          id: item.id,\n          title: item.title,\n          empName: `${item.employee?.firstName} ${item.employee?.lastName} ${\n            item.employee?.terminationId\n              ? ` ${$t('general.past_employee')}`\n              : ''\n          }`,\n          modifiedDate: formatDate(parseDate(item.modifiedDate), jsDateFormat, {\n            locale,\n          }),\n          addedDate: formatDate(parseDate(item.addedDate), jsDateFormat, {\n            locale,\n          }),\n        };\n      });\n    };\n\n    const defaultFilters = {\n      empName: null,\n      includeEmployees: {\n        id: 1,\n        param: 'onlyCurrent',\n        label: $t('general.current_employees_only'),\n      },\n    };\n\n    const filters = ref({...defaultFilters});\n\n    const {sortDefinition, sortField, sortOrder, onSort} = useSort({\n      sortDefinition: defaultSortOrder,\n    });\n\n    const serializedFilter = computed(() => {\n      return {\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n        empNumber: filters.value.empName?.id,\n        includeEmployees: filters.value.includeEmployees?.param,\n      };\n    });\n\n    const api = '/api/v2/performance/employees/trackers';\n    const http = new APIService(window.appGlobal.baseUrl, api);\n\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      isLoading,\n      response,\n      execQuery,\n    } = usePaginate(http, {\n      query: serializedFilter,\n      normalizer: employeeTrackerNormalizer,\n    });\n\n    onSort(execQuery);\n\n    return {\n      total,\n      showPaginator,\n      currentPage,\n      pages,\n      pageSize,\n      isLoading,\n      items: response,\n      api,\n      http,\n      execQuery,\n      sortDefinition,\n      filters,\n    };\n  },\n\n  data() {\n    return {\n      headers: [\n        {\n          name: 'empName',\n          slot: 'title',\n          title: this.$t('general.employee_name'),\n          sortField: 'employee.lastName',\n          style: {flex: 2},\n        },\n        {\n          name: 'title',\n          title: this.$t('general.trackers'),\n          sortField: 'tracker.trackerName',\n          style: {flex: 2},\n        },\n        {\n          name: 'addedDate',\n          title: this.$t('performance.added_date'),\n          sortField: 'tracker.addedDate',\n          style: {flex: 1},\n        },\n        {\n          name: 'modifiedDate',\n          title: this.$t('performance.modified_date'),\n          sortField: 'tracker.modifiedDate',\n          style: {flex: 1},\n        },\n        {\n          name: 'actions',\n          title: this.$t('general.actions'),\n          slot: 'action',\n          style: {flex: 1},\n          cellType: 'oxd-table-cell-actions',\n          cellConfig: {\n            view: {\n              onClick: this.onClickView,\n              component: 'oxd-button',\n              props: {\n                name: 'view',\n                label: this.$t('general.view'),\n                class: 'orangehrm-left-space',\n                displayType: 'text',\n              },\n            },\n          },\n        },\n      ],\n      rules: {\n        employee: [shouldNotExceedCharLength(100), validSelection],\n      },\n    };\n  },\n\n  methods: {\n    async resetDataTable() {\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickView(item) {\n      navigate('/performance/addPerformanceTrackerLog/trackId/{id}', {\n        id: item.id,\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}