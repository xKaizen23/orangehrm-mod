{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"orangehrm-modal-header\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_text = _resolveComponent(\"oxd-text\");\n  const _component_oxd_divider = _resolveComponent(\"oxd-divider\");\n  const _component_date_input = _resolveComponent(\"date-input\");\n  const _component_oxd_form_row = _resolveComponent(\"oxd-form-row\");\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  const _component_required_text = _resolveComponent(\"required-text\");\n  const _component_oxd_button = _resolveComponent(\"oxd-button\");\n  const _component_submit_button = _resolveComponent(\"submit-button\");\n  const _component_oxd_form_actions = _resolveComponent(\"oxd-form-actions\");\n  const _component_oxd_form = _resolveComponent(\"oxd-form\");\n  const _component_oxd_dialog = _resolveComponent(\"oxd-dialog\");\n  return _openBlock(), _createBlock(_component_oxd_dialog, {\n    class: \"orangehrm-dialog-modal\",\n    \"onUpdate:show\": _cache[4] || (_cache[4] = $event => $options.onCancel(false))\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_oxd_text, {\n      type: \"card-title\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('pim.terminate_employment')), 1)]),\n      _: 1\n    })]), _createVNode(_component_oxd_divider), _createVNode(_component_oxd_form, {\n      loading: $data.isLoading,\n      onSubmitValid: $options.onSave\n    }, {\n      default: _withCtx(() => [_createVNode(_component_oxd_form_row, null, {\n        default: _withCtx(() => [_createVNode(_component_date_input, {\n          modelValue: $data.termination.date,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.termination.date = $event),\n          label: _ctx.$t('pim.termination_date'),\n          rules: $data.rules.date,\n          required: \"\"\n        }, null, 8, [\"modelValue\", \"label\", \"rules\"])]),\n        _: 1\n      }), _createVNode(_component_oxd_form_row, null, {\n        default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n          modelValue: $data.termination.terminationReason,\n          \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.termination.terminationReason = $event),\n          type: \"select\",\n          label: _ctx.$t('pim.termination_reason'),\n          rules: $data.rules.terminationReason,\n          options: $props.terminationReasons,\n          required: \"\"\n        }, null, 8, [\"modelValue\", \"label\", \"rules\", \"options\"])]),\n        _: 1\n      }), _createVNode(_component_oxd_form_row, null, {\n        default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n          modelValue: $data.termination.note,\n          \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.termination.note = $event),\n          type: \"textarea\",\n          label: _ctx.$t('general.note'),\n          placeholder: _ctx.$t('general.type_here'),\n          rules: $data.rules.note\n        }, null, 8, [\"modelValue\", \"label\", \"placeholder\", \"rules\"])]),\n        _: 1\n      }), _createVNode(_component_oxd_divider), _createVNode(_component_oxd_form_actions, null, {\n        default: _withCtx(() => [_createVNode(_component_required_text), _createVNode(_component_oxd_button, {\n          type: \"button\",\n          \"display-type\": \"ghost\",\n          label: _ctx.$t('general.cancel'),\n          onClick: _cache[3] || (_cache[3] = $event => $options.onCancel(false))\n        }, null, 8, [\"label\"]), _createVNode(_component_submit_button)]),\n        _: 1\n      })]),\n      _: 1\n    }, 8, [\"loading\", \"onSubmitValid\"])]),\n    _: 1\n  });\n}","map":{"version":3,"mappings":";;EAqBSA,KAAK,EAAC;AAAwB;;;;;;;;;;;;;uBADrCC,aAgDaC;IAhDDF,KAAK,EAAC,wBAAwB;IAAE,eAAW,sCAAEG,iBAAQ;;sBAC/D,MAIM,CAJNC,oBAIM,OAJNC,UAIM,GAHJC,aAEWC;MAFDC,IAAI,EAAC;IAAY;wBACzB,MAAoC,mCAAjCC,OAAE;;UAGTH,aAAeI,yBACfJ,aAwCWK;MAxCAC,OAAO,EAAEC,eAAS;MAAGC,aAAY,EAAEX;;wBAC5C,MAOe,CAPfG,aAOeS;0BANb,MAKE,CALFT,aAKEU;sBAJSH,iBAAW,CAACI,IAAI;qEAAhBJ,iBAAW,CAACI,IAAI;UACxBC,KAAK,EAAET,OAAE;UACTU,KAAK,EAAEN,WAAK,CAACI,IAAI;UAClBG,QAAQ,EAAR;;;UAGJd,aASeS;0BARb,MAOE,CAPFT,aAOEe;sBANSR,iBAAW,CAACS,iBAAiB;qEAA7BT,iBAAW,CAACS,iBAAiB;UACtCd,IAAI,EAAC,QAAQ;UACZU,KAAK,EAAET,OAAE;UACTU,KAAK,EAAEN,WAAK,CAACS,iBAAiB;UAC9BC,OAAO,EAAEC,yBAAkB;UAC5BJ,QAAQ,EAAR;;;UAGJd,aAQeS;0BAPb,MAME,CANFT,aAMEe;sBALSR,iBAAW,CAACY,IAAI;qEAAhBZ,iBAAW,CAACY,IAAI;UACzBjB,IAAI,EAAC,UAAU;UACdU,KAAK,EAAET,OAAE;UACTiB,WAAW,EAAEjB,OAAE;UACfU,KAAK,EAAEN,WAAK,CAACY;;;UAGlBnB,aAAeI,yBAEfJ,aASmBqB;0BARjB,MAAiB,CAAjBrB,aAAiBsB,2BACjBtB,aAKEuB;UAJArB,IAAI,EAAC,QAAQ;UACb,cAAY,EAAC,OAAO;UACnBU,KAAK,EAAET,OAAE;UACTqB,OAAK,sCAAE3B,iBAAQ;gCAElBG,aAAiByB","names":["class","_createBlock","_component_oxd_dialog","$options","_createElementVNode","_hoisted_1","_createVNode","_component_oxd_text","type","_ctx","_component_oxd_divider","_component_oxd_form","loading","$data","onSubmitValid","_component_oxd_form_row","_component_date_input","date","label","rules","required","_component_oxd_input_field","terminationReason","options","$props","note","placeholder","_component_oxd_form_actions","_component_required_text","_component_oxd_button","onClick","_component_submit_button"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\TerminateModal.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-dialog class=\"orangehrm-dialog-modal\" @update:show=\"onCancel(false)\">\n    <div class=\"orangehrm-modal-header\">\n      <oxd-text type=\"card-title\">\n        {{ $t('pim.terminate_employment') }}\n      </oxd-text>\n    </div>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <date-input\n          v-model=\"termination.date\"\n          :label=\"$t('pim.termination_date')\"\n          :rules=\"rules.date\"\n          required\n        />\n      </oxd-form-row>\n      <oxd-form-row>\n        <oxd-input-field\n          v-model=\"termination.terminationReason\"\n          type=\"select\"\n          :label=\"$t('pim.termination_reason')\"\n          :rules=\"rules.terminationReason\"\n          :options=\"terminationReasons\"\n          required\n        />\n      </oxd-form-row>\n      <oxd-form-row>\n        <oxd-input-field\n          v-model=\"termination.note\"\n          type=\"textarea\"\n          :label=\"$t('general.note')\"\n          :placeholder=\"$t('general.type_here')\"\n          :rules=\"rules.note\"\n        />\n      </oxd-form-row>\n      <oxd-divider />\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel(false)\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </oxd-dialog>\n</template>\n\n<script>\nimport {APIService} from '@/core/util/services/api.service';\nimport {OxdDialog} from '@ohrm/oxd';\nimport {\n  required,\n  shouldNotExceedCharLength,\n  validDateFormat,\n} from '@ohrm/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\n\nconst terminationModel = {\n  terminationReason: null,\n  date: '',\n  note: null,\n};\n\nexport default {\n  name: 'TerminateModal',\n  components: {\n    'oxd-dialog': OxdDialog,\n  },\n  props: {\n    employeeId: {\n      type: String,\n      required: true,\n    },\n    terminationReasons: {\n      type: Array,\n      required: true,\n    },\n    terminationId: {\n      type: Number,\n      required: false,\n      default: null,\n    },\n  },\n  emits: ['close'],\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/pim/employees/${props.employeeId}/terminations`,\n    );\n    const {userDateFormat} = useDateFormat();\n\n    return {\n      http,\n      userDateFormat,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      termination: {...terminationModel},\n      rules: {\n        terminationReason: [required],\n        date: [required, validDateFormat(this.userDateFormat)],\n        note: [shouldNotExceedCharLength(250)],\n      },\n    };\n  },\n\n  beforeMount() {\n    if (this.terminationId) {\n      this.isLoading = true;\n      this.http\n        .get(this.terminationId)\n        .then((response) => {\n          const {data} = response.data;\n          this.termination.terminationReason = this.terminationReasons.find(\n            (item) => item.id === data.terminationReason?.id,\n          );\n          this.termination.date = data.date;\n          this.termination.note = data.note;\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n    }\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      const payload = {\n        date: this.termination.date,\n        note: this.termination.note,\n        terminationReasonId: this.termination.terminationReason?.id,\n      };\n      this.submitData(payload, this.terminationId)\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel(true);\n        });\n    },\n    async submitData(payload, id) {\n      return !id ? this.http.create(payload) : this.http.update(id, payload);\n    },\n    onCancel(reload) {\n      this.$emit('close', reload);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}