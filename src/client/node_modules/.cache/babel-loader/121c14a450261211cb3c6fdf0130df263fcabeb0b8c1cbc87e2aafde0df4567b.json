{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, withCtx as _withCtx } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_buzz_post_input = _resolveComponent(\"oxd-buzz-post-input\");\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  const _component_video_frame = _resolveComponent(\"video-frame\");\n  const _component_post_modal = _resolveComponent(\"post-modal\");\n  return _openBlock(), _createBlock(_component_post_modal, {\n    loading: _ctx.isLoading,\n    title: _ctx.$t('buzz.share_video'),\n    onSubmit: $setup.onSubmit,\n    onClose: _cache[2] || (_cache[2] = $event => _ctx.$emit('close', false))\n  }, {\n    header: _withCtx(() => [_createVNode(_component_oxd_buzz_post_input, {\n      modelValue: _ctx.post.text,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.post.text = $event),\n      rules: $setup.rules.text,\n      placeholder: _ctx.$t('buzz.post_placeholder')\n    }, null, 8, [\"modelValue\", \"rules\", \"placeholder\"])]),\n    default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n      modelValue: _ctx.post.url,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.post.url = $event),\n      type: \"textarea\",\n      rules: $setup.rules.url,\n      label: _ctx.$t('buzz.video_url'),\n      placeholder: _ctx.$t('buzz.paste_video_url')\n    }, null, 8, [\"modelValue\", \"rules\", \"label\", \"placeholder\"]), _ctx.embedURL ? (_openBlock(), _createBlock(_component_video_frame, {\n      key: 0,\n      \"video-src\": _ctx.embedURL\n    }, null, 8, [\"video-src\"])) : _createCommentVNode(\"\", true)]),\n    _: 1\n  }, 8, [\"loading\", \"title\", \"onSubmit\"]);\n}","map":{"version":3,"mappings":";;;;;;uBAoBEA,aAsBaC;IArBVC,OAAO,EAAEC,cAAS;IAClBC,KAAK,EAAED,OAAE;IACTE,QAAM,EAAEC,eAAQ;IAChBC,OAAK,sCAAEJ,UAAK;;IAEFK,MAAM,WACf,MAKsB,CALtBC,aAKsBC;kBAJXP,SAAI,CAACQ,IAAI;iEAATR,SAAI,CAACQ,IAAI;MACjBC,KAAK,EAAEN,YAAK,CAACK,IAAI;MACjBE,WAAW,EAAEV,OAAE;;sBAIpB,MAME,CANFM,aAMEK;kBALSX,SAAI,CAACY,GAAG;iEAARZ,SAAI,CAACY,GAAG;MACjBC,IAAI,EAAC,UAAU;MACdJ,KAAK,EAAEN,YAAK,CAACS,GAAG;MAChBE,KAAK,EAAEd,OAAE;MACTU,WAAW,EAAEV,OAAE;kEAECA,aAAQ,kBAA3BH,aAAiEkB;;MAAnC,WAAS,EAAEf","names":["_createBlock","_component_post_modal","loading","_ctx","title","onSubmit","$setup","onClose","header","_createVNode","_component_oxd_buzz_post_input","text","rules","placeholder","_component_oxd_input_field","url","type","label","_component_video_frame"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmBuzzPlugin\\components\\ShareVideoModal.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <post-modal\n    :loading=\"isLoading\"\n    :title=\"$t('buzz.share_video')\"\n    @submit=\"onSubmit\"\n    @close=\"$emit('close', false)\"\n  >\n    <template #header>\n      <oxd-buzz-post-input\n        v-model=\"post.text\"\n        :rules=\"rules.text\"\n        :placeholder=\"$t('buzz.post_placeholder')\"\n      >\n      </oxd-buzz-post-input>\n    </template>\n    <oxd-input-field\n      v-model=\"post.url\"\n      type=\"textarea\"\n      :rules=\"rules.url\"\n      :label=\"$t('buzz.video_url')\"\n      :placeholder=\"$t('buzz.paste_video_url')\"\n    />\n    <video-frame v-if=\"embedURL\" :video-src=\"embedURL\"></video-frame>\n  </post-modal>\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@/core/util/validation/rules';\nimport {reactive, toRefs} from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport {APIService} from '@/core/util/services/api.service';\nimport PostModal from '@/orangehrmBuzzPlugin/components/PostModal.vue';\nimport VideoFrame from '@/orangehrmBuzzPlugin/components/VideoFrame.vue';\nimport {OxdBuzzPostInput, promiseDebounce} from '@ohrm/oxd';\n\nexport default {\n  name: 'ShareVideoModal',\n\n  components: {\n    'post-modal': PostModal,\n    'video-frame': VideoFrame,\n    'oxd-buzz-post-input': OxdBuzzPostInput,\n  },\n\n  props: {\n    text: {\n      type: String,\n      default: null,\n    },\n  },\n\n  emits: ['close'],\n\n  setup(props, context) {\n    const {$t} = usei18n();\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/buzz/posts');\n\n    const state = reactive({\n      post: {\n        text: props.text || null,\n        url: null,\n      },\n      embedURL: null,\n      isLoading: false,\n    });\n\n    const rules = {\n      url: [\n        required,\n        promiseDebounce(async (value) => {\n          if (!value) return true;\n          state.embedURL = null;\n          const response = await http.request({\n            method: 'GET',\n            url: '/api/v2/buzz/validation/links',\n            params: {\n              url: value,\n            },\n          });\n          const {data} = response.data;\n          if (data?.valid === true) {\n            state.embedURL = data.embeddedURL;\n            return true;\n          } else {\n            return $t('general.invalid_video_url_message');\n          }\n        }, 500),\n      ],\n      text: [shouldNotExceedCharLength(65530)],\n    };\n\n    const onSubmit = () => {\n      state.isLoading = true;\n      http\n        .create({\n          type: 'video',\n          link: state.post.url,\n          text: state.post.text,\n        })\n        .then(() => context.emit('close', true));\n    };\n\n    return {\n      rules,\n      onSubmit,\n      ...toRefs(state),\n    };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}