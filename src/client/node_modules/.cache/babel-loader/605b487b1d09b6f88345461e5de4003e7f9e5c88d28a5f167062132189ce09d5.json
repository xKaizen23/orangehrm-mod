{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_time_input = _resolveComponent(\"time-input\");\n  const _component_oxd_grid_item = _resolveComponent(\"oxd-grid-item\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_oxd_grid_item, null, {\n    default: _withCtx(() => [_createVNode(_component_time_input, {\n      label: _ctx.$t('general.from'),\n      \"model-value\": $props.fromTime,\n      rules: $props.rules.fromTime,\n      required: \"\",\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.$emit('update:fromTime', $event))\n    }, null, 8, [\"label\", \"model-value\", \"rules\"])]),\n    _: 1\n  }), _createVNode(_component_oxd_grid_item, null, {\n    default: _withCtx(() => [_createVNode(_component_time_input, {\n      label: _ctx.$t('general.to'),\n      \"model-value\": $props.toTime,\n      rules: $props.rules.toTime,\n      required: \"\",\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.$emit('update:toTime', $event))\n    }, null, 8, [\"label\", \"model-value\", \"rules\"])]),\n    _: 1\n  })], 64);\n}","map":{"version":3,"mappings":";;;;6DAoBEA,aAQgBC;sBAPd,MAME,CANFD,aAMEE;MALCC,KAAK,EAAEC,OAAE;MACT,aAAW,EAAEC,eAAQ;MACrBC,KAAK,EAAED,YAAK,CAACE,QAAQ;MACtBC,QAAQ,EAAR,EAAQ;MACP,qBAAkB,sCAAEJ,UAAK,oBAAoBK,MAAM;;;MAGxDT,aAQgBC;sBAPd,MAME,CANFD,aAMEE;MALCC,KAAK,EAAEC,OAAE;MACT,aAAW,EAAEC,aAAM;MACnBC,KAAK,EAAED,YAAK,CAACK,MAAM;MACpBF,QAAQ,EAAR,EAAQ;MACP,qBAAkB,sCAAEJ,UAAK,kBAAkBK,MAAM","names":["_createVNode","_component_oxd_grid_item","_component_time_input","label","_ctx","$props","rules","fromTime","required","$event","toTime"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmLeavePlugin\\components\\TimeRange.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-grid-item>\n    <time-input\n      :label=\"$t('general.from')\"\n      :model-value=\"fromTime\"\n      :rules=\"rules.fromTime\"\n      required\n      @update:model-value=\"$emit('update:fromTime', $event)\"\n    />\n  </oxd-grid-item>\n  <oxd-grid-item>\n    <time-input\n      :label=\"$t('general.to')\"\n      :model-value=\"toTime\"\n      :rules=\"rules.toTime\"\n      required\n      @update:model-value=\"$emit('update:toTime', $event)\"\n    />\n  </oxd-grid-item>\n</template>\n\n<script>\nexport default {\n  name: 'TimeRange',\n  inheritAttrs: false,\n  props: {\n    fromTime: {\n      type: String,\n      required: false,\n      default: null,\n    },\n    toTime: {\n      type: String,\n      required: false,\n      default: null,\n    },\n    rules: {\n      type: Object,\n      required: true,\n      default: () => ({}),\n    },\n    workShift: {\n      type: Object,\n      required: true,\n      default: () => ({}),\n    },\n  },\n  emits: ['update:fromTime', 'update:toTime'],\n  mounted() {\n    if (this.workShift?.startTime) {\n      this.$emit('update:fromTime', this.workShift.startTime);\n    }\n    if (this.workShift?.endTime) {\n      this.$emit('update:toTime', this.workShift.endTime);\n    }\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}