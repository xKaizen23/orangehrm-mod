{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  return _openBlock(), _createBlock(_component_oxd_input_field, {\n    type: \"date\",\n    placeholder: $setup.userDateFormat,\n    \"day-attributes\": _ctx.attributes,\n    events: _ctx.events,\n    \"display-format\": $setup.jsDateFormat,\n    locale: $setup.locale,\n    onSelectYear: $setup.onSelectYear\n  }, null, 8, [\"placeholder\", \"day-attributes\", \"events\", \"display-format\", \"locale\", \"onSelectYear\"]);\n}","map":{"version":3,"mappings":";;;uBAoBEA,aAQEC;IAPAC,IAAI,EAAC,MAAM;IACVC,WAAW,EAAEC,qBAAc;IAC3B,gBAAc,EAAEC,eAAU;IAC1BC,MAAM,EAAED,WAAM;IACd,gBAAc,EAAED,mBAAY;IAC5BG,MAAM,EAAEH,aAAM;IACdI,YAAW,EAAEJ","names":["_createBlock","_component_oxd_input_field","type","placeholder","$setup","_ctx","events","locale","onSelectYear"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\core\\components\\inputs\\DateInput.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-input-field\n    type=\"date\"\n    :placeholder=\"userDateFormat\"\n    :day-attributes=\"attributes\"\n    :events=\"events\"\n    :display-format=\"jsDateFormat\"\n    :locale=\"locale\"\n    @select-year=\"onSelectYear\"\n  />\n</template>\n\n<script>\nimport {onBeforeMount, reactive, toRefs} from 'vue';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport {\n  startOfYear,\n  endOfYear,\n  formatDate,\n  parseDate,\n} from '@ohrm/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\n\nexport default {\n  name: 'DateInput',\n  setup() {\n    const state = reactive({\n      attributes: [],\n      events: [],\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {jsDateFormat, userDateFormat} = useDateFormat();\n    const {locale} = useLocale();\n\n    const responseValidator = (status) => {\n      return (status >= 200 && status < 300) || status === 403;\n    };\n\n    const fetchWorkWeek = async () => {\n      http\n        .request({\n          method: 'GET',\n          url: '/api/v2/leave/workweek',\n          params: {\n            model: 'indexed',\n          },\n          validateStatus: responseValidator,\n        })\n        .then(({data}) => {\n          if (data?.data) {\n            state.attributes = Object.keys(data.data).map((i) => {\n              return {\n                index: parseInt(i),\n                class:\n                  data.data[i] === 8\n                    ? '--non-working-day'\n                    : data.data[i] === 4\n                    ? '--working-day-half'\n                    : '',\n              };\n            });\n          }\n        });\n    };\n\n    const fetchEvents = async (fromDate, toDate) => {\n      http\n        .request({\n          method: 'GET',\n          url: '/api/v2/leave/holidays',\n          params: {\n            fromDate,\n            toDate,\n          },\n          validateStatus: responseValidator,\n        })\n        .then(({data}) => {\n          if (Array.isArray(data?.data)) {\n            state.events = data.data.map((event) => {\n              return {\n                date: parseDate(event.date, 'yyyy-MM-dd'),\n                type: event.name,\n                class: event.length === 0 ? '--holiday-full' : '--holiday-half',\n              };\n            });\n          }\n        });\n    };\n\n    const onSelectYear = async ({year}) => {\n      const now = new Date().setFullYear(year);\n      const fromDate = formatDate(startOfYear(now), 'yyyy-MM-dd');\n      const endDate = formatDate(endOfYear(now), 'yyyy-MM-dd');\n      fetchEvents(fromDate, endDate);\n    };\n\n    onBeforeMount(async () => {\n      await fetchWorkWeek();\n      await onSelectYear({year: new Date().getFullYear()});\n    });\n\n    return {\n      jsDateFormat,\n      userDateFormat,\n      ...toRefs(state),\n      onSelectYear,\n      locale,\n    };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}