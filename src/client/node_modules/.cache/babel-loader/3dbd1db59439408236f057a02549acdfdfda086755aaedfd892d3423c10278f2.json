{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_password_strength_indicator = _resolveComponent(\"password-strength-indicator\");\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  const _component_oxd_text = _resolveComponent(\"oxd-text\");\n  const _component_oxd_grid_item = _resolveComponent(\"oxd-grid-item\");\n  const _component_oxd_grid = _resolveComponent(\"oxd-grid\");\n  const _component_oxd_form_row = _resolveComponent(\"oxd-form-row\");\n  return _openBlock(), _createBlock(_component_oxd_form_row, {\n    class: \"user-password-row\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_oxd_grid, {\n      cols: 2,\n      class: \"orangehrm-full-width-grid\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_oxd_grid_item, {\n        class: \"user-password-cell\"\n      }, {\n        default: _withCtx(() => [$props.password ? (_openBlock(), _createBlock(_component_password_strength_indicator, {\n          key: 0,\n          \"password-strength\": $setup.passwordStrength\n        }, null, 8, [\"password-strength\"])) : _createCommentVNode(\"\", true), _createVNode(_component_oxd_input_field, {\n          type: \"password\",\n          autocomplete: \"off\",\n          required: $props.isPasswordRequired,\n          \"model-value\": $props.password,\n          rules: $data.rules.password,\n          label: _ctx.$t('general.password'),\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.$emit('update:password', $event))\n        }, null, 8, [\"required\", \"model-value\", \"rules\", \"label\"]), _createVNode(_component_oxd_text, {\n          class: \"user-password-hint\",\n          tag: \"p\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('general.password_strength_message')), 1)]),\n          _: 1\n        })]),\n        _: 1\n      }), _createVNode(_component_oxd_grid_item, null, {\n        default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n          ref: \"passwordConfirm\",\n          type: \"password\",\n          autocomplete: \"off\",\n          required: $props.isPasswordRequired,\n          \"model-value\": $props.passwordConfirm,\n          rules: $data.rules.passwordConfirm,\n          label: _ctx.$t('general.confirm_password'),\n          \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.$emit('update:passwordConfirm', $event))\n        }, null, 8, [\"required\", \"model-value\", \"rules\", \"label\"])]),\n        _: 1\n      })]),\n      _: 1\n    })]),\n    _: 1\n  });\n}","map":{"version":3,"mappings":";;;;;;;;uBAqBEA,aAmCeC;IAnCDC,KAAK,EAAC;EAAmB;sBACrC,MAiCW,CAjCXC,aAiCWC;MAjCAC,IAAI,EAAE,CAAC;MAAEH,KAAK,EAAC;;wBACxB,MAkBgB,CAlBhBC,aAkBgBG;QAlBDJ,KAAK,EAAC;MAAoB;0BACvC,MAI8B,CAHtBK,eAAQ,kBADhBP,aAI8BQ;;UAF3B,mBAAiB,EAAEC;6EAGtBN,aAQEO;UAPAC,IAAI,EAAC,UAAU;UACfC,YAAY,EAAC,KAAK;UACjBC,QAAQ,EAAEN,yBAAkB;UAC5B,aAAW,EAAEA,eAAQ;UACrBO,KAAK,EAAEC,WAAK,CAACC,QAAQ;UACrBC,KAAK,EAAEC,OAAE;UACT,qBAAkB,sCAAEA,UAAK,oBAAoBC,MAAM;oEAEtDhB,aAEWiB;UAFDlB,KAAK,EAAC,oBAAoB;UAACmB,GAAG,EAAC;;4BACvC,MAA6C,mCAA1CH,OAAE;;;;UAITf,aAWgBG;0BAVd,MASE,CATFH,aASEO;UARAY,GAAG,EAAC,iBAAiB;UACrBX,IAAI,EAAC,UAAU;UACfC,YAAY,EAAC,KAAK;UACjBC,QAAQ,EAAEN,yBAAkB;UAC5B,aAAW,EAAEA,sBAAe;UAC5BO,KAAK,EAAEC,WAAK,CAACQ,eAAe;UAC5BN,KAAK,EAAEC,OAAE;UACT,qBAAkB,sCAAEA,UAAK,2BAA2BC,MAAM","names":["_createBlock","_component_oxd_form_row","class","_createVNode","_component_oxd_grid","cols","_component_oxd_grid_item","$props","_component_password_strength_indicator","$setup","_component_oxd_input_field","type","autocomplete","required","rules","$data","password","label","_ctx","$event","_component_oxd_text","tag","ref","passwordConfirm"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\core\\components\\inputs\\PasswordInput.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <!-- Always use inside OXD-Form -->\n  <oxd-form-row class=\"user-password-row\">\n    <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n      <oxd-grid-item class=\"user-password-cell\">\n        <password-strength-indicator\n          v-if=\"password\"\n          :password-strength=\"passwordStrength\"\n        >\n        </password-strength-indicator>\n        <oxd-input-field\n          type=\"password\"\n          autocomplete=\"off\"\n          :required=\"isPasswordRequired\"\n          :model-value=\"password\"\n          :rules=\"rules.password\"\n          :label=\"$t('general.password')\"\n          @update:model-value=\"$emit('update:password', $event)\"\n        />\n        <oxd-text class=\"user-password-hint\" tag=\"p\">\n          {{ $t('general.password_strength_message') }}\n        </oxd-text>\n      </oxd-grid-item>\n\n      <oxd-grid-item>\n        <oxd-input-field\n          ref=\"passwordConfirm\"\n          type=\"password\"\n          autocomplete=\"off\"\n          :required=\"isPasswordRequired\"\n          :model-value=\"passwordConfirm\"\n          :rules=\"rules.passwordConfirm\"\n          :label=\"$t('general.confirm_password')\"\n          @update:model-value=\"$emit('update:passwordConfirm', $event)\"\n        />\n      </oxd-grid-item>\n    </oxd-grid>\n  </oxd-form-row>\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport {promiseDebounce} from '@ohrm/oxd';\nimport {APIService} from '@/core/util/services/api.service';\nimport usePasswordPolicy from '@/core/util/composable/usePasswordPolicy';\nimport PasswordStrengthIndicator from '@/core/components/labels/PasswordStrengthIndicator';\n\nexport default {\n  name: 'PasswordInput',\n  components: {\n    'password-strength-indicator': PasswordStrengthIndicator,\n  },\n  props: {\n    password: {\n      type: String,\n      required: true,\n    },\n    passwordConfirm: {\n      type: String,\n      required: true,\n    },\n    isPasswordRequired: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  emits: ['update:password', 'update:passwordConfirm'],\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {passwordStrength, validatePassword} = usePasswordPolicy(http);\n\n    return {\n      passwordStrength,\n      validatePassword,\n    };\n  },\n  data() {\n    return {\n      rules: {\n        password: [\n          (v) => (this.isPasswordRequired ? required(v) : true),\n          shouldNotExceedCharLength(64),\n          promiseDebounce(this.validatePassword, 500),\n        ],\n        passwordConfirm: [\n          (v) => {\n            if (this.isPasswordRequired || this.password.length > 0) {\n              return (\n                (!!v && v === this.password) ||\n                this.$t('general.passwords_do_not_match')\n              );\n            } else {\n              return true;\n            }\n          },\n        ],\n      },\n    };\n  },\n\n  watch: {\n    password(value) {\n      if (\n        (!!this.passwordConfirm && value !== this.passwordConfirm) ||\n        (!!this.passwordConfirm && value === this.passwordConfirm)\n      ) {\n        this.$nextTick(this.$refs.passwordConfirm.triggerUpdate);\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.user-password {\n  &-row {\n    padding: 10px;\n    background-color: $oxd-background-white-shadow-color;\n    border-radius: 0.75rem;\n    ::v-deep(.orangehrm-password-chip) {\n      top: -5px;\n      right: 8px;\n    }\n  }\n  &-hint {\n    font-size: 0.75rem;\n  }\n  &-cell {\n    position: relative;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}