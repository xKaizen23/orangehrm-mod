{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-08362132\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0,\n  class: \"past-employee-tag\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  return _openBlock(), _createBlock(_component_oxd_input_field, {\n    type: \"autocomplete\",\n    label: _ctx.$t('general.employee_name'),\n    clear: false,\n    \"create-options\": $options.loadEmployees\n  }, {\n    afterSelected: _withCtx(({\n      data\n    }) => [data.isPastEmployee ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [_createTextVNode(_toDisplayString(_ctx.$t('general.past_employee')), 1)], 64)) : _createCommentVNode(\"\", true)]),\n    option: _withCtx(({\n      data\n    }) => [_createElementVNode(\"span\", null, _toDisplayString(data.label), 1), data.isPastEmployee ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, _toDisplayString(_ctx.$t('general.past_employee')), 1)) : _createCommentVNode(\"\", true)]),\n    _: 1\n  }, 8, [\"label\", \"create-options\"]);\n}","map":{"version":3,"mappings":";;;;EAiCsCA,KAAK,EAAC;;;;uBAb1CC,aAiBkBC;IAhBhBC,IAAI,EAAC,cAAc;IAClBC,KAAK,EAAEC,OAAE;IACTC,KAAK,EAAE,KAAK;IACZ,gBAAc,EAAEC;;IAENC,aAAa,WACtB,CAEW;MAHcC;IAAI,OACbA,IAAI,CAACC,cAAc,kBAAnCC,oBAEWC;MAAAC;IAAA,sCADNR,OAAE;IAGES,MAAM,WACf,CAA6B;MADXL;IAAI,OACtBM,oBAA6B,+BAApBN,IAAI,CAACL,KAAK,OACRK,IAAI,CAACC,cAAc,kBAA9BC,oBAEM,OAFNK,UAEM,mBADDX,OAAE","names":["class","_createBlock","_component_oxd_input_field","type","label","_ctx","clear","$options","afterSelected","data","isPastEmployee","_createElementBlock","_Fragment","key","option","_createElementVNode","_hoisted_1"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\core\\components\\inputs\\EmployeeAutocomplete.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-input-field\n    type=\"autocomplete\"\n    :label=\"$t('general.employee_name')\"\n    :clear=\"false\"\n    :create-options=\"loadEmployees\"\n  >\n    <template #afterSelected=\"{data}\">\n      <template v-if=\"data.isPastEmployee\">\n        {{ $t('general.past_employee') }}\n      </template>\n    </template>\n    <template #option=\"{data}\">\n      <span>{{ data.label }}</span>\n      <div v-if=\"data.isPastEmployee\" class=\"past-employee-tag\">\n        {{ $t('general.past_employee') }}\n      </div>\n    </template>\n  </oxd-input-field>\n</template>\n\n<script>\nimport {APIService} from '@ohrm/core/util/services/api.service';\nexport default {\n  name: 'EmployeeAutocomplete',\n  props: {\n    params: {\n      type: Object,\n      default: () => ({}),\n    },\n    apiPath: {\n      type: String,\n      default: '/api/v2/pim/employees',\n    },\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, props.apiPath);\n    return {\n      http,\n    };\n  },\n  methods: {\n    async loadEmployees(searchParam) {\n      return new Promise((resolve) => {\n        if (searchParam.trim() && searchParam.length < 100) {\n          this.http\n            .getAll({\n              nameOrId: searchParam.trim(),\n              ...this.params,\n            })\n            .then(({data}) => {\n              resolve(\n                data.data.map((employee) => {\n                  return {\n                    id: employee.empNumber,\n                    label: `${employee.firstName} ${employee.middleName} ${employee.lastName}`,\n                    _employee: employee,\n                    isPastEmployee: !!employee.terminationId,\n                  };\n                }),\n              );\n            });\n        } else {\n          resolve([]);\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.past-employee-tag {\n  margin-left: auto;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}