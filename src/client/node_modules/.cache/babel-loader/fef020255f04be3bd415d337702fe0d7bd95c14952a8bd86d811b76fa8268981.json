{"ast":null,"code":"import usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { APIService } from '@/core/util/services/api.service';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nexport default {\n  name: 'TimesheetActions',\n  props: {\n    timesheetId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/time/timesheets/${props.timesheetId}/action-logs`);\n    const {\n      $t\n    } = usei18n();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const actionsNormalizer = data => {\n      return data.map(item => {\n        let performedEmployee;\n        let actionName = item.action?.label;\n        const firstName = item.performedEmployee?.firstName;\n        const lastName = item.performedEmployee?.lastName;\n        switch (actionName) {\n          case 'Submitted':\n            actionName = $t('time.submitted');\n            break;\n          case 'Rejected':\n            actionName = $t('leave.rejected');\n            break;\n          case 'Not Submitted':\n            actionName = $t('time.not_submitted');\n            break;\n          case 'Approved':\n            actionName = $t('time.approved');\n            break;\n        }\n        if (firstName && lastName) {\n          performedEmployee = `${firstName} ${lastName}`;\n        } else {\n          performedEmployee = $t('general.purged_employee');\n        }\n        if (item.performedEmployee?.terminationId) {\n          performedEmployee += ` (${$t('general.past_employee')})`;\n        }\n        return {\n          id: item.id,\n          action: actionName,\n          date: formatDate(parseDate(item.date), jsDateFormat, {\n            locale\n          }),\n          comment: item.comment,\n          performedBy: performedEmployee\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      toastNoRecords: false,\n      normalizer: actionsNormalizer\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'action',\n        slot: 'title',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'performedBy',\n        title: this.$t('general.performed_by'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'date',\n        title: this.$t('general.date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'comment',\n        cellType: 'oxd-table-cell-truncate',\n        title: this.$t('general.comment'),\n        style: {\n          flex: 1\n        }\n      }]\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["usePaginate","APIService","usei18n","useDateFormat","formatDate","parseDate","useLocale","name","props","timesheetId","type","Number","required","setup","http","window","appGlobal","baseUrl","$t","jsDateFormat","locale","actionsNormalizer","data","map","item","performedEmployee","actionName","action","label","firstName","lastName","terminationId","id","date","comment","performedBy","showPaginator","currentPage","total","pages","pageSize","response","isLoading","execQuery","toastNoRecords","normalizer","items","headers","slot","title","style","flex","cellType"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmTimePlugin\\components\\TimesheetActions.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div v-if=\"total > 0\" class=\"orangehrm-paper-container\">\n    <div class=\"orangehrm-header-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('time.actions_performed_on_the_timesheet') }}\n      </oxd-text>\n    </div>\n    <div class=\"orangehrm-container\">\n      <oxd-card-table\n        :headers=\"headers\"\n        :items=\"items?.data\"\n        :selectable=\"false\"\n        :clickable=\"false\"\n        :loading=\"isLoading\"\n        row-decorator=\"oxd-table-decorator-card\"\n      />\n    </div>\n    <div class=\"orangehrm-bottom-container\">\n      <oxd-pagination\n        v-if=\"showPaginator\"\n        v-model:current=\"currentPage\"\n        :length=\"pages\"\n      />\n    </div>\n  </div>\n  <div v-else></div>\n</template>\n\n<script>\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport {APIService} from '@/core/util/services/api.service';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport {formatDate, parseDate} from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\n\nexport default {\n  name: 'TimesheetActions',\n\n  props: {\n    timesheetId: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/time/timesheets/${props.timesheetId}/action-logs`,\n    );\n    const {$t} = usei18n();\n    const {jsDateFormat} = useDateFormat();\n    const {locale} = useLocale();\n\n    const actionsNormalizer = (data) => {\n      return data.map((item) => {\n        let performedEmployee;\n        let actionName = item.action?.label;\n        const firstName = item.performedEmployee?.firstName;\n        const lastName = item.performedEmployee?.lastName;\n\n        switch (actionName) {\n          case 'Submitted':\n            actionName = $t('time.submitted');\n            break;\n          case 'Rejected':\n            actionName = $t('leave.rejected');\n            break;\n          case 'Not Submitted':\n            actionName = $t('time.not_submitted');\n            break;\n          case 'Approved':\n            actionName = $t('time.approved');\n            break;\n        }\n\n        if (firstName && lastName) {\n          performedEmployee = `${firstName} ${lastName}`;\n        } else {\n          performedEmployee = $t('general.purged_employee');\n        }\n\n        if (item.performedEmployee?.terminationId) {\n          performedEmployee += ` (${$t('general.past_employee')})`;\n        }\n\n        return {\n          id: item.id,\n          action: actionName,\n          date: formatDate(parseDate(item.date), jsDateFormat, {locale}),\n          comment: item.comment,\n          performedBy: performedEmployee,\n        };\n      });\n    };\n\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery,\n    } = usePaginate(http, {\n      toastNoRecords: false,\n      normalizer: actionsNormalizer,\n    });\n\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n    };\n  },\n  data() {\n    return {\n      headers: [\n        {\n          name: 'action',\n          slot: 'title',\n          title: this.$t('general.actions'),\n          style: {flex: 1},\n        },\n        {\n          name: 'performedBy',\n          title: this.$t('general.performed_by'),\n          style: {flex: 1},\n        },\n        {\n          name: 'date',\n          title: this.$t('general.date'),\n          style: {flex: 1},\n        },\n        {\n          name: 'comment',\n          cellType: 'oxd-table-cell-truncate',\n          title: this.$t('general.comment'),\n          style: {flex: 1},\n        },\n      ],\n    };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}