{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { required, maxCurrency, digitsOnlyWithTwoDecimalPoints, maxValueShouldBeGreaterThanMinValue, minValueShouldBeLowerThanMaxValue } from '@ohrm/core/util/validation/rules';\nconst payCurrencyModel = {\n  currencyId: null,\n  minSalary: '',\n  maxSalary: ''\n};\nexport default {\n  name: 'EditPayCurrency',\n  props: {\n    payGradeId: {\n      type: Number,\n      required: true\n    },\n    data: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/admin/pay-grades/${props.payGradeId}/currencies`);\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      payCurrency: {\n        ...payCurrencyModel\n      },\n      rules: {\n        currencyId: [required],\n        minSalary: [maxCurrency(1000000000), digitsOnlyWithTwoDecimalPoints, minValueShouldBeLowerThanMaxValue(() => this.payCurrency.maxSalary, this.$t('admin.should_be_lower_than_maximum_salary'))],\n        maxSalary: [maxCurrency(1000000000), digitsOnlyWithTwoDecimalPoints, maxValueShouldBeGreaterThanMinValue(() => this.payCurrency.minSalary, this.$t('admin.should_be_higher_than_minimum_salary'))]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.data.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.payCurrency.name = data.currencyType.name;\n      this.payCurrency.minSalary = data.minSalary ? data.minSalary : '0';\n      this.payCurrency.maxSalary = data.maxSalary ? data.maxSalary : '0';\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.data.id, {\n        minSalary: this.payCurrency.minSalary,\n        maxSalary: this.payCurrency.maxSalary\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["APIService","required","maxCurrency","digitsOnlyWithTwoDecimalPoints","maxValueShouldBeGreaterThanMinValue","minValueShouldBeLowerThanMaxValue","payCurrencyModel","currencyId","minSalary","maxSalary","name","props","payGradeId","type","Number","data","Object","emits","setup","http","window","appGlobal","baseUrl","isLoading","payCurrency","rules","$t","beforeMount","get","id","then","response","currencyType","finally","methods","onSave","update","$toast","updateSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\pages\\payGrade\\EditPayCurrency.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n<template>\n  <div class=\"orangehrm-card-container\">\n    <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n      {{ $t('admin.edit_currency') }}\n    </oxd-text>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"payCurrency.name\"\n              :label=\"$t('general.currency')\"\n              required\n              readonly\n              disabled\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n      <oxd-form-row>\n        <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"payCurrency.minSalary\"\n              :label=\"$t('admin.minimum_salary')\"\n              :rules=\"rules.minSalary\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"payCurrency.maxSalary\"\n              :label=\"$t('admin.maximum_salary')\"\n              :rules=\"rules.maxSalary\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n      <oxd-divider />\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </div>\n</template>\n\n<script>\nimport {APIService} from '@/core/util/services/api.service';\nimport {\n  required,\n  maxCurrency,\n  digitsOnlyWithTwoDecimalPoints,\n  maxValueShouldBeGreaterThanMinValue,\n  minValueShouldBeLowerThanMaxValue,\n} from '@ohrm/core/util/validation/rules';\n\nconst payCurrencyModel = {\n  currencyId: null,\n  minSalary: '',\n  maxSalary: '',\n};\n\nexport default {\n  name: 'EditPayCurrency',\n  props: {\n    payGradeId: {\n      type: Number,\n      required: true,\n    },\n    data: {\n      type: Object,\n      required: true,\n    },\n  },\n  emits: ['close'],\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/admin/pay-grades/${props.payGradeId}/currencies`,\n    );\n    return {http};\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      payCurrency: {...payCurrencyModel},\n      rules: {\n        currencyId: [required],\n        minSalary: [\n          maxCurrency(1000000000),\n          digitsOnlyWithTwoDecimalPoints,\n          minValueShouldBeLowerThanMaxValue(\n            () => this.payCurrency.maxSalary,\n            this.$t('admin.should_be_lower_than_maximum_salary'),\n          ),\n        ],\n        maxSalary: [\n          maxCurrency(1000000000),\n          digitsOnlyWithTwoDecimalPoints,\n          maxValueShouldBeGreaterThanMinValue(\n            () => this.payCurrency.minSalary,\n            this.$t('admin.should_be_higher_than_minimum_salary'),\n          ),\n        ],\n      },\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.data.id)\n      .then((response) => {\n        const {data} = response.data;\n        this.payCurrency.name = data.currencyType.name;\n        this.payCurrency.minSalary = data.minSalary ? data.minSalary : '0';\n        this.payCurrency.maxSalary = data.maxSalary ? data.maxSalary : '0';\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.data.id, {\n          minSalary: this.payCurrency.minSalary,\n          maxSalary: this.payCurrency.maxSalary,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}