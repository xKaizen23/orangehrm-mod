{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"orangehrm-background-container\"\n};\nconst _hoisted_2 = {\n  class: \"orangehrm-paper-container\"\n};\nconst _hoisted_3 = {\n  class: \"orangehrm-header-container\"\n};\nconst _hoisted_4 = {\n  class: \"orangehrm-container\"\n};\nconst _hoisted_5 = {\n  class: \"orangehrm-bottom-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_save_pay_currency = _resolveComponent(\"save-pay-currency\");\n  const _component_edit_pay_currency = _resolveComponent(\"edit-pay-currency\");\n  const _component_inline_action_button = _resolveComponent(\"inline-action-button\");\n  const _component_table_header = _resolveComponent(\"table-header\");\n  const _component_oxd_card_table = _resolveComponent(\"oxd-card-table\");\n  const _component_oxd_pagination = _resolveComponent(\"oxd-pagination\");\n  const _component_delete_confirmation = _resolveComponent(\"delete-confirmation\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [$data.showSaveModal ? (_openBlock(), _createBlock(_component_save_pay_currency, {\n    key: 0,\n    \"pay-grade-id\": $props.payGradeId,\n    onClose: $options.onSaveModalClose\n  }, null, 8, [\"pay-grade-id\", \"onClose\"])) : _createCommentVNode(\"\", true), $data.showEditModal ? (_openBlock(), _createBlock(_component_edit_pay_currency, {\n    key: 1,\n    data: $data.editModalState,\n    \"pay-grade-id\": $props.payGradeId,\n    onClose: $options.onEditModalClose\n  }, null, 8, [\"data\", \"pay-grade-id\", \"onClose\"])) : _createCommentVNode(\"\", true), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_inline_action_button, {\n    \"display-type\": \"secondary\",\n    onClick: $options.onClickAdd\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('general.currencies')), 1)]),\n    _: 1\n  }, 8, [\"onClick\"])]), _createVNode(_component_table_header, {\n    selected: $data.checkedItems.length,\n    total: $setup.total,\n    loading: $setup.isLoading,\n    onDelete: $options.onClickDeleteSelected\n  }, null, 8, [\"selected\", \"total\", \"loading\", \"onDelete\"]), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_oxd_card_table, {\n    selected: $data.checkedItems,\n    \"onUpdate:selected\": _cache[0] || (_cache[0] = $event => $data.checkedItems = $event),\n    headers: $data.headers,\n    items: $setup.items?.data,\n    selectable: $options.selectable,\n    clickable: false,\n    loading: $setup.isLoading,\n    \"row-decorator\": \"oxd-table-decorator-card\"\n  }, null, 8, [\"selected\", \"headers\", \"items\", \"selectable\", \"loading\"])]), _createElementVNode(\"div\", _hoisted_5, [$setup.showPaginator ? (_openBlock(), _createBlock(_component_oxd_pagination, {\n    key: 0,\n    current: $setup.currentPage,\n    \"onUpdate:current\": _cache[1] || (_cache[1] = $event => $setup.currentPage = $event),\n    length: $setup.pages\n  }, null, 8, [\"current\", \"length\"])) : _createCommentVNode(\"\", true)]), _createVNode(_component_delete_confirmation, {\n    ref: \"deleteDialog\"\n  }, null, 512)])])], 64);\n}","map":{"version":3,"mappings":";;EA8BOA,KAAK,EAAC;AAAgC;;EACpCA,KAAK,EAAC;AAA2B;;EAC/BA,KAAK,EAAC;AAA4B;;EAWlCA,KAAK,EAAC;AAAqB;;EAW3BA,KAAK,EAAC;AAA4B;;;;;;;;;6DAlCnCC,mBAAa,kBADrBC,aAIqBC;;IAFlB,cAAY,EAAEC,iBAAU;IACxBC,OAAK,EAAEC;6EAGFL,mBAAa,kBADrBC,aAKqBK;;IAHlBC,IAAI,EAAEP,oBAAc;IACpB,cAAY,EAAEG,iBAAU;IACxBC,OAAK,EAAEC;qFAEVG,oBAiCM,OAjCNC,UAiCM,GAhCJD,oBA+BM,OA/BNE,UA+BM,GA9BJF,oBAIM,OAJNG,UAIM,GAHJC,aAEuBC;IAFD,cAAY,EAAC,WAAW;IAAEC,OAAK,EAAET;;sBACrD,MAA8B,mCAA3BU,OAAE;;wBAGTH,aAKgBI;IAJbC,QAAQ,EAAEjB,kBAAY,CAACkB,MAAM;IAC7BC,KAAK,EAAEC,YAAK;IACZC,OAAO,EAAED,gBAAS;IAClBE,QAAM,EAAEjB;6DAEXG,oBAUM,OAVNe,UAUM,GATJX,aAQEY;IAPQP,QAAQ,EAAEjB,kBAAY;6DAAZA,kBAAY;IAC7ByB,OAAO,EAAEzB,aAAO;IAChB0B,KAAK,EAAEN,YAAK,EAAEb,IAAI;IAClBoB,UAAU,EAAEtB,mBAAU;IACtBuB,SAAS,EAAE,KAAK;IAChBP,OAAO,EAAED,gBAAS;IACnB,eAAa,EAAC;4EAGlBZ,oBAMM,OANNqB,UAMM,GAJIT,oBAAa,kBADrBnB,aAIE6B;;IAFQC,OAAO,EAAEX,kBAAW;4DAAXA,kBAAW;IAC3BF,MAAM,EAAEE;yEAGbR,aAA8DoB;IAAzCC,GAAG,EAAC;EAAc","names":["class","$data","_createBlock","_component_save_pay_currency","$props","onClose","$options","_component_edit_pay_currency","data","_createElementVNode","_hoisted_1","_hoisted_2","_hoisted_3","_createVNode","_component_inline_action_button","onClick","_ctx","_component_table_header","selected","length","total","$setup","loading","onDelete","_hoisted_4","_component_oxd_card_table","headers","items","selectable","clickable","_hoisted_5","_component_oxd_pagination","current","_component_delete_confirmation","ref"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\pages\\payGrade\\PayGradeCurrency.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n<template>\n  <save-pay-currency\n    v-if=\"showSaveModal\"\n    :pay-grade-id=\"payGradeId\"\n    @close=\"onSaveModalClose\"\n  ></save-pay-currency>\n  <edit-pay-currency\n    v-if=\"showEditModal\"\n    :data=\"editModalState\"\n    :pay-grade-id=\"payGradeId\"\n    @close=\"onEditModalClose\"\n  ></edit-pay-currency>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-paper-container\">\n      <div class=\"orangehrm-header-container\">\n        <inline-action-button display-type=\"secondary\" @click=\"onClickAdd\">\n          {{ $t('general.currencies') }}\n        </inline-action-button>\n      </div>\n      <table-header\n        :selected=\"checkedItems.length\"\n        :total=\"total\"\n        :loading=\"isLoading\"\n        @delete=\"onClickDeleteSelected\"\n      ></table-header>\n      <div class=\"orangehrm-container\">\n        <oxd-card-table\n          v-model:selected=\"checkedItems\"\n          :headers=\"headers\"\n          :items=\"items?.data\"\n          :selectable=\"selectable\"\n          :clickable=\"false\"\n          :loading=\"isLoading\"\n          row-decorator=\"oxd-table-decorator-card\"\n        />\n      </div>\n      <div class=\"orangehrm-bottom-container\">\n        <oxd-pagination\n          v-if=\"showPaginator\"\n          v-model:current=\"currentPage\"\n          :length=\"pages\"\n        />\n      </div>\n      <delete-confirmation ref=\"deleteDialog\"></delete-confirmation>\n    </div>\n  </div>\n</template>\n<script>\nimport InlineActionButton from '@/orangehrmAdminPlugin/components/InlineActionButton.vue';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport SavePayCurrency from '@/orangehrmAdminPlugin/pages/payGrade/SavePayCurrency.vue';\nimport EditPayCurrency from '@/orangehrmAdminPlugin/pages/payGrade/EditPayCurrency.vue';\nimport DeleteConfirmationDialog from '@/core/components/dialogs/DeleteConfirmationDialog';\n\nconst PayGradeCurrencyNormalizer = (data) => {\n  return data.map((item) => {\n    let maxSalary = item.maxSalary ? Number(item.maxSalary) : 0;\n    let minSalary = item.minSalary ? Number(item.minSalary) : 0;\n    maxSalary = maxSalary.toLocaleString('en-US', {\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2,\n    });\n    minSalary = minSalary.toLocaleString('en-US', {\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2,\n    });\n\n    return {\n      id: item.currencyType.id,\n      name: item.currencyType.name,\n      maxSalary: maxSalary,\n      minSalary: minSalary,\n    };\n  });\n};\n\nexport default {\n  name: 'PayGradeCurrency',\n  components: {\n    'inline-action-button': InlineActionButton,\n    'save-pay-currency': SavePayCurrency,\n    'edit-pay-currency': EditPayCurrency,\n    'delete-confirmation': DeleteConfirmationDialog,\n  },\n  props: {\n    payGradeId: {\n      type: String,\n      required: true,\n    },\n  },\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/admin/pay-grades/${props.payGradeId}/currencies`,\n    );\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery,\n    } = usePaginate(http, {\n      normalizer: PayGradeCurrencyNormalizer,\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n    };\n  },\n\n  data() {\n    return {\n      headers: [\n        {\n          name: 'name',\n          slot: 'title',\n          title: this.$t('general.currency'),\n          style: {flex: 2},\n        },\n        {\n          name: 'minSalary',\n          title: this.$t('admin.minimum_salary'),\n          style: {flex: 1},\n        },\n        {\n          name: 'maxSalary',\n          title: this.$t('admin.maximum_salary'),\n          style: {flex: 1},\n        },\n        {\n          name: 'actions',\n          slot: 'action',\n          title: this.$t('general.actions'),\n          style: {flex: 1},\n          cellType: 'oxd-table-cell-actions',\n          cellConfig: {\n            delete: {\n              onClick: this.onClickDelete,\n              component: 'oxd-icon-button',\n              props: {\n                name: 'trash',\n              },\n            },\n            edit: {\n              onClick: this.onClickEdit,\n              props: {\n                name: 'pencil-fill',\n              },\n            },\n          },\n        },\n      ],\n      checkedItems: [],\n      showSaveModal: false,\n      showEditModal: false,\n      editModalState: null,\n    };\n  },\n\n  computed: {\n    selectable() {\n      return !(this.showSaveModal || this.showEditModal);\n    },\n  },\n\n  methods: {\n    onClickAdd() {\n      this.showEditModal = false;\n      this.editModalState = null;\n      this.showSaveModal = true;\n      this.checkedItems = [];\n    },\n    onClickDelete(item) {\n      if (!this.selectable) return;\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    onClickDeleteSelected() {\n      if (!this.selectable) return;\n      const ids = this.checkedItems.map((index) => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http\n          .deleteAll({\n            ids: items,\n          })\n          .then(() => {\n            return this.$toast.deleteSuccess();\n          })\n          .then(() => {\n            this.isLoading = false;\n            this.resetDataTable();\n          });\n      }\n    },\n    onSaveModalClose() {\n      this.showSaveModal = false;\n      this.resetDataTable();\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    onClickEdit(item) {\n      this.showSaveModal = false;\n      this.editModalState = item;\n      this.showEditModal = true;\n      this.checkedItems = [];\n    },\n    onEditModalClose() {\n      this.showEditModal = false;\n      this.editModalState = null;\n      this.resetDataTable();\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}