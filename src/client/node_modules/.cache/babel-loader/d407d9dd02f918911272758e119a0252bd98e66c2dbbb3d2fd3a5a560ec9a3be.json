{"ast":null,"code":"import { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport { required, validSelection, validTimeFormat, shouldNotExceedCharLength, endTimeShouldBeAfterStartTime } from '@ohrm/core/util/validation/rules';\nimport { diffInTime } from '@/core/util/helper/datefns';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nimport WorkShiftEmployeeAutocomplete from '@/orangehrmAdminPlugin/components/WorkShiftEmployeeAutocomplete';\nconst workShiftModel = {\n  id: '',\n  name: '',\n  hoursPerDay: '',\n  startTime: '',\n  endTime: '',\n  empNumbers: []\n};\nexport default {\n  components: {\n    'work-shift-employee-autocomplete': WorkShiftEmployeeAutocomplete\n  },\n  props: {\n    workShiftConfig: {\n      type: Object,\n      required: true,\n      default: () => ({})\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/work-shifts');\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const workShiftUniqueValidation = createUniqueValidator('WorkShift', 'name');\n    return {\n      http,\n      workShiftUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      workShift: {\n        ...workShiftModel\n      },\n      rules: {\n        name: [required, this.workShiftUniqueValidation, shouldNotExceedCharLength(50)],\n        fromTime: [required, validTimeFormat],\n        endTime: [required, validTimeFormat, endTimeShouldBeAfterStartTime(() => this.workShift.startTime, this.$t('general.to_time_should_be_after_from_time'))],\n        empNumbers: [validSelection]\n      }\n    };\n  },\n  computed: {\n    selectedTimeDuration() {\n      return parseFloat(diffInTime(this.workShift.startTime, this.workShift.endTime) / 3600).toFixed(2);\n    }\n  },\n  beforeMount() {\n    this.workShift.endTime = this.workShiftConfig.endTime;\n    this.workShift.startTime = this.workShiftConfig.startTime;\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      const payload = {\n        name: this.workShift.name,\n        hoursPerDay: this.selectedTimeDuration,\n        startTime: this.workShift.startTime,\n        endTime: this.workShift.endTime,\n        empNumbers: this.workShift.empNumbers.map(employee => employee.id)\n      };\n      this.http.create(payload).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.workShift = {\n          ...workShiftModel\n        };\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      navigate('/admin/workShift');\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["navigate","APIService","required","validSelection","validTimeFormat","shouldNotExceedCharLength","endTimeShouldBeAfterStartTime","diffInTime","useServerValidation","WorkShiftEmployeeAutocomplete","workShiftModel","id","name","hoursPerDay","startTime","endTime","empNumbers","components","props","workShiftConfig","type","Object","default","setup","http","window","appGlobal","baseUrl","createUniqueValidator","workShiftUniqueValidation","data","isLoading","workShift","rules","fromTime","$t","computed","selectedTimeDuration","parseFloat","toFixed","beforeMount","methods","onSave","payload","map","employee","create","then","$toast","saveSuccess","onCancel"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\pages\\workShift\\SaveWorkShift.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('admin.add_work_shift') }}\n      </oxd-text>\n      <oxd-divider />\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"workShift.name\"\n                :label=\"$t('admin.shift_name')\"\n                :rules=\"rules.name\"\n                required\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <oxd-divider />\n\n        <oxd-form-row>\n          <oxd-text class=\"orangehrm-sub-title\"\n            >{{ $t('admin.working_hours') }} *</oxd-text\n          >\n          <oxd-grid :cols=\"4\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <time-input\n                v-model=\"workShift.startTime\"\n                :rules=\"rules.fromTime\"\n                :label=\"$t('general.from')\"\n              />\n            </oxd-grid-item>\n\n            <oxd-grid-item>\n              <time-input\n                v-model=\"workShift.endTime\"\n                :rules=\"rules.endTime\"\n                :label=\"$t('general.to')\"\n              />\n            </oxd-grid-item>\n\n            <oxd-grid-item>\n              <oxd-input-group :label=\"$t('admin.duration_per_day')\">\n                <oxd-text class=\"orangehrm-workshift-duration\" tag=\"p\">\n                  {{ selectedTimeDuration }}\n                </oxd-text>\n              </oxd-input-group>\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <work-shift-employee-autocomplete\n                v-model=\"workShift.empNumbers\"\n                :rules=\"rules.empNumbers\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport {\n  required,\n  validSelection,\n  validTimeFormat,\n  shouldNotExceedCharLength,\n  endTimeShouldBeAfterStartTime,\n} from '@ohrm/core/util/validation/rules';\nimport {diffInTime} from '@/core/util/helper/datefns';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nimport WorkShiftEmployeeAutocomplete from '@/orangehrmAdminPlugin/components/WorkShiftEmployeeAutocomplete';\n\nconst workShiftModel = {\n  id: '',\n  name: '',\n  hoursPerDay: '',\n  startTime: '',\n  endTime: '',\n  empNumbers: [],\n};\nexport default {\n  components: {\n    'work-shift-employee-autocomplete': WorkShiftEmployeeAutocomplete,\n  },\n  props: {\n    workShiftConfig: {\n      type: Object,\n      required: true,\n      default: () => ({}),\n    },\n  },\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/admin/work-shifts',\n    );\n    const {createUniqueValidator} = useServerValidation(http);\n    const workShiftUniqueValidation = createUniqueValidator(\n      'WorkShift',\n      'name',\n    );\n\n    return {\n      http,\n      workShiftUniqueValidation,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      workShift: {...workShiftModel},\n      rules: {\n        name: [\n          required,\n          this.workShiftUniqueValidation,\n          shouldNotExceedCharLength(50),\n        ],\n        fromTime: [required, validTimeFormat],\n        endTime: [\n          required,\n          validTimeFormat,\n          endTimeShouldBeAfterStartTime(\n            () => this.workShift.startTime,\n            this.$t('general.to_time_should_be_after_from_time'),\n          ),\n        ],\n        empNumbers: [validSelection],\n      },\n    };\n  },\n  computed: {\n    selectedTimeDuration() {\n      return parseFloat(\n        diffInTime(this.workShift.startTime, this.workShift.endTime) / 3600,\n      ).toFixed(2);\n    },\n  },\n  beforeMount() {\n    this.workShift.endTime = this.workShiftConfig.endTime;\n    this.workShift.startTime = this.workShiftConfig.startTime;\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      const payload = {\n        name: this.workShift.name,\n        hoursPerDay: this.selectedTimeDuration,\n        startTime: this.workShift.startTime,\n        endTime: this.workShift.endTime,\n        empNumbers: this.workShift.empNumbers.map((employee) => employee.id),\n      };\n      this.http\n        .create(payload)\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          this.workShift = {...workShiftModel};\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      navigate('/admin/workShift');\n    },\n  },\n};\n</script>\n<style src=\"./work-shift.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}