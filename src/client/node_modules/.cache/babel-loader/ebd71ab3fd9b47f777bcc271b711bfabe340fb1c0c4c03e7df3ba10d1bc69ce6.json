{"ast":null,"code":"import { computed, ref } from 'vue';\nimport { required, shouldNotExceedCharLength, validDateFormat } from '@/core/util/validation/rules';\nimport { navigate } from '@/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { freshDate, formatDate } from '@ohrm/core/util/helper/datefns';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport { yearRange } from '@/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nexport default {\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete\n  },\n  props: {\n    date: {\n      type: String,\n      default: null\n    }\n  },\n  setup(props) {\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const {\n      userDateFormat\n    } = useDateFormat();\n    const rules = {\n      date: [required, validDateFormat(userDateFormat)],\n      employee: [shouldNotExceedCharLength(100)]\n    };\n    const filters = ref({\n      date: props.date ? props.date : formatDate(freshDate(), 'yyyy-MM-dd'),\n      employee: null\n    });\n    const serializedFilters = computed(() => {\n      return {\n        date: filters.value.date,\n        empNumber: filters.value.employee?.id\n      };\n    });\n    const attendanceRecordNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.empNumber,\n          empName: $tEmpName(item, {\n            includeMiddle: false,\n            excludePastEmpTag: false\n          }),\n          duration: item.sum?.label\n        };\n      });\n    };\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/attendance/employees/summary');\n    const {\n      total,\n      pages,\n      response,\n      isLoading,\n      execQuery,\n      currentPage,\n      showPaginator\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: attendanceRecordNormalizer\n    });\n    return {\n      http,\n      rules,\n      total,\n      pages,\n      filters,\n      isLoading,\n      execQuery,\n      currentPage,\n      showPaginator,\n      items: response\n    };\n  },\n  data() {\n    return {\n      yearArray: [...yearRange()],\n      headers: [{\n        name: 'empName',\n        slot: 'title',\n        title: this.$t('general.employee_name'),\n        style: {\n          flex: '40%'\n        }\n      }, {\n        name: 'duration',\n        title: this.$t('time.total_duration'),\n        style: {\n          flex: '40%'\n        }\n      }, {\n        name: 'actions',\n        slot: 'footer',\n        title: this.$t('general.actions'),\n        style: {\n          flex: '20%'\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          view: {\n            onClick: this.onClickView,\n            component: 'oxd-button',\n            props: {\n              label: this.$t('general.view'),\n              displayType: 'text',\n              size: 'medium'\n            }\n          }\n        }\n      }]\n    };\n  },\n  methods: {\n    async resetDataTable() {\n      await this.execQuery();\n    },\n    async filterItems() {\n      if (this.filters.employee && this.filters.date) {\n        return navigate('/attendance/viewAttendanceRecord', undefined, {\n          employeeId: this.filters.employee.id,\n          date: this.filters.date\n        });\n      }\n      await this.execQuery();\n    },\n    onClickView(item) {\n      navigate('/attendance/viewAttendanceRecord', undefined, {\n        employeeId: item.id,\n        date: this.filters.date\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["computed","ref","required","shouldNotExceedCharLength","validDateFormat","navigate","APIService","usePaginate","freshDate","formatDate","EmployeeAutocomplete","yearRange","useDateFormat","useEmployeeNameTranslate","components","props","date","type","String","default","setup","$tEmpName","userDateFormat","rules","employee","filters","serializedFilters","value","empNumber","id","attendanceRecordNormalizer","data","map","item","empName","includeMiddle","excludePastEmpTag","duration","sum","label","http","window","appGlobal","baseUrl","total","pages","response","isLoading","execQuery","currentPage","showPaginator","query","normalizer","items","yearArray","headers","name","slot","title","$t","style","flex","cellType","cellConfig","view","onClick","onClickView","component","displayType","size","methods","resetDataTable","filterItems","undefined","employeeId"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAttendancePlugin\\pages\\ViewEmployeeAttendanceSummary.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-table-filter\n    :filter-title=\"$t('attendance.employee_attendance_records')\"\n  >\n    <oxd-form @submit-valid=\"filterItems\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"4\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <employee-autocomplete\n              v-model=\"filters.employee\"\n              :rules=\"rules.employee\"\n              :params=\"{\n                includeEmployees: 'currentAndPast',\n              }\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <date-input\n              v-model=\"filters.date\"\n              :rules=\"rules.date\"\n              :years=\"yearArray\"\n              :label=\"$t('general.date')\"\n              required\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-divider />\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          display-type=\"secondary\"\n          :label=\"$t('general.view')\"\n          type=\"submit\"\n        />\n      </oxd-form-actions>\n    </oxd-form>\n  </oxd-table-filter>\n  <br />\n  <div class=\"orangehrm-paper-container\">\n    <table-header\n      :total=\"total\"\n      :selected=\"0\"\n      :loading=\"isLoading\"\n      :show-divider=\"false\"\n    ></table-header>\n    <div class=\"orangehrm-container\">\n      <oxd-card-table\n        :headers=\"headers\"\n        :items=\"items?.data\"\n        :selectable=\"false\"\n        :clickable=\"false\"\n        :loading=\"isLoading\"\n        row-decorator=\"oxd-table-decorator-card\"\n      />\n    </div>\n    <div class=\"orangehrm-bottom-container\">\n      <oxd-pagination\n        v-if=\"showPaginator\"\n        v-model:current=\"currentPage\"\n        :length=\"pages\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport {computed, ref} from 'vue';\nimport {\n  required,\n  shouldNotExceedCharLength,\n  validDateFormat,\n} from '@/core/util/validation/rules';\nimport {navigate} from '@/core/util/helper/navigation';\nimport {APIService} from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport {freshDate, formatDate} from '@ohrm/core/util/helper/datefns';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport {yearRange} from '@/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\n\nexport default {\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete,\n  },\n\n  props: {\n    date: {\n      type: String,\n      default: null,\n    },\n  },\n\n  setup(props) {\n    const {$tEmpName} = useEmployeeNameTranslate();\n    const {userDateFormat} = useDateFormat();\n\n    const rules = {\n      date: [required, validDateFormat(userDateFormat)],\n      employee: [shouldNotExceedCharLength(100)],\n    };\n\n    const filters = ref({\n      date: props.date ? props.date : formatDate(freshDate(), 'yyyy-MM-dd'),\n      employee: null,\n    });\n\n    const serializedFilters = computed(() => {\n      return {\n        date: filters.value.date,\n        empNumber: filters.value.employee?.id,\n      };\n    });\n\n    const attendanceRecordNormalizer = (data) => {\n      return data.map((item) => {\n        return {\n          id: item.empNumber,\n          empName: $tEmpName(item, {\n            includeMiddle: false,\n            excludePastEmpTag: false,\n          }),\n          duration: item.sum?.label,\n        };\n      });\n    };\n\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/attendance/employees/summary',\n    );\n    const {\n      total,\n      pages,\n      response,\n      isLoading,\n      execQuery,\n      currentPage,\n      showPaginator,\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: attendanceRecordNormalizer,\n    });\n\n    return {\n      http,\n      rules,\n      total,\n      pages,\n      filters,\n      isLoading,\n      execQuery,\n      currentPage,\n      showPaginator,\n      items: response,\n    };\n  },\n\n  data() {\n    return {\n      yearArray: [...yearRange()],\n      headers: [\n        {\n          name: 'empName',\n          slot: 'title',\n          title: this.$t('general.employee_name'),\n          style: {flex: '40%'},\n        },\n        {\n          name: 'duration',\n          title: this.$t('time.total_duration'),\n          style: {flex: '40%'},\n        },\n        {\n          name: 'actions',\n          slot: 'footer',\n          title: this.$t('general.actions'),\n          style: {flex: '20%'},\n          cellType: 'oxd-table-cell-actions',\n          cellConfig: {\n            view: {\n              onClick: this.onClickView,\n              component: 'oxd-button',\n              props: {\n                label: this.$t('general.view'),\n                displayType: 'text',\n                size: 'medium',\n              },\n            },\n          },\n        },\n      ],\n    };\n  },\n\n  methods: {\n    async resetDataTable() {\n      await this.execQuery();\n    },\n    async filterItems() {\n      if (this.filters.employee && this.filters.date) {\n        return navigate('/attendance/viewAttendanceRecord', undefined, {\n          employeeId: this.filters.employee.id,\n          date: this.filters.date,\n        });\n      }\n      await this.execQuery();\n    },\n    onClickView(item) {\n      navigate('/attendance/viewAttendanceRecord', undefined, {\n        employeeId: item.id,\n        date: this.filters.date,\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n::v-deep(.card-footer-slot) {\n  .oxd-table-cell-actions {\n    justify-content: flex-end;\n  }\n  .oxd-table-cell-actions > * {\n    margin: 0 !important;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}