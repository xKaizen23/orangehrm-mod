{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed, ref } from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport { validSelection } from '@/core/util/validation/rules';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport ProjectAutocomplete from '@/orangehrmTimePlugin/components/ProjectAutocomplete.vue';\nimport CustomerAutocomplete from '@/orangehrmTimePlugin/components/CustomerAutocomplete.vue';\nimport ProjectAdminAutocomplete from '@/orangehrmTimePlugin/components/ProjectAdminAutocomplete.vue';\nconst defaultFilters = {\n  customer: null,\n  project: null,\n  projectAdmin: null\n};\nconst defaultSortOrder = {\n  'project.name': 'ASC',\n  'customer.name': 'DEFAULT',\n  'employee.lastName': 'DEFAULT'\n};\nexport default {\n  components: {\n    'project-autocomplete': ProjectAutocomplete,\n    'customer-autocomplete': CustomerAutocomplete,\n    'delete-confirmation': DeleteConfirmationDialog,\n    'project-admin-autocomplete': ProjectAdminAutocomplete\n  },\n  props: {\n    unselectableIds: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const projectNormalizer = data => {\n      return data.map(item => {\n        const selectable = props.unselectableIds.findIndex(id => id == item.id);\n        return {\n          id: item.id,\n          project: item.name,\n          customer: item.customer?.deleted ? item.customer?.name + $t('general.deleted') : item.customer?.name,\n          projectAdmins: item.projectAdmins?.map(projectAdmin => $tEmpName(projectAdmin)).join(', '),\n          isSelectable: selectable === -1\n        };\n      });\n    };\n    const filters = ref({\n      ...defaultFilters\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        customerId: filters.value.customer?.id,\n        projectId: filters.value.project?.id,\n        empNumber: filters.value.projectAdmin?.id,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n        model: 'detailed'\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/time/projects');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: projectNormalizer\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      sortDefinition\n    };\n  },\n  data() {\n    return {\n      checkedItems: [],\n      rules: {\n        project: [validSelection],\n        customer: [validSelection],\n        projectAdmin: [validSelection]\n      }\n    };\n  },\n  computed: {\n    headers() {\n      const headers = [{\n        name: 'customer',\n        title: this.$t('time.customer_name'),\n        sortField: 'customer.name',\n        style: {\n          flex: '15%'\n        }\n      }, {\n        name: 'project',\n        slot: 'title',\n        title: this.$t('time.project'),\n        sortField: 'project.name',\n        style: {\n          flex: '15%'\n        }\n      }, {\n        name: 'projectAdmins',\n        title: this.$t('time.project_admins'),\n        style: {\n          flex: '20%'\n        }\n      }];\n      const headerActions = {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {}\n      };\n      if (this.$can.delete(`time_projects`)) {\n        headerActions.cellConfig.delete = {\n          onClick: this.onClickDelete,\n          props: {\n            name: 'trash'\n          }\n        };\n      }\n      if (this.$can.update(`time_project_activities`)) {\n        headerActions.cellConfig.edit = {\n          onClick: this.onClickEdit,\n          props: {\n            name: 'pencil-fill'\n          }\n        };\n      }\n      if (Object.keys(headerActions.cellConfig).length > 0) {\n        headers.push(headerActions);\n      }\n      return headers;\n    }\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/time/saveProject');\n    },\n    onClickEdit(item) {\n      navigate('/time/saveProject/{id}', {\n        id: item.id\n      });\n    },\n    onClickDelete(item) {\n      const isSelectable = this.unselectableIds.findIndex(id => id == item.id);\n      if (isSelectable > -1) {\n        return this.$toast.error({\n          title: this.$t('general.error'),\n          message: this.$t('time.not_allowed_to_delete_projects_which_have_time_logged')\n        });\n      }\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteData([item.id]);\n        }\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteData(ids);\n        }\n      });\n    },\n    async deleteData(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["computed","ref","usei18n","validSelection","useSort","navigate","APIService","usePaginate","useEmployeeNameTranslate","DeleteConfirmationDialog","ProjectAutocomplete","CustomerAutocomplete","ProjectAdminAutocomplete","defaultFilters","customer","project","projectAdmin","defaultSortOrder","components","props","unselectableIds","type","Array","default","setup","$t","$tEmpName","projectNormalizer","data","map","item","selectable","findIndex","id","name","deleted","projectAdmins","join","isSelectable","filters","sortDefinition","sortField","sortOrder","onSort","serializedFilters","customerId","value","projectId","empNumber","model","http","window","appGlobal","baseUrl","showPaginator","currentPage","total","pages","pageSize","response","isLoading","execQuery","query","normalizer","items","checkedItems","rules","headers","title","style","flex","slot","headerActions","cellType","cellConfig","$can","delete","onClick","onClickDelete","update","edit","onClickEdit","Object","keys","length","push","methods","onClickAdd","$toast","error","message","$refs","deleteDialog","showDialog","then","confirmation","deleteData","onClickDeleteSelected","ids","index","deleteAll","deleteSuccess","resetDataTable","filterItems"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmTimePlugin\\pages\\project\\Project.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <oxd-table-filter :filter-title=\"$t('general.projects')\">\n      <oxd-form @submit-valid=\"filterItems\" @reset=\"filterItems\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <customer-autocomplete\n                v-model=\"filters.customer\"\n                :rules=\"rules.customer\"\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <project-autocomplete\n                v-model=\"filters.project\"\n                :exclude-customer-name=\"true\"\n                :rules=\"rules.project\"\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <project-admin-autocomplete\n                v-model=\"filters.projectAdmin\"\n                :show-delete=\"false\"\n                :rules=\"rules.projectAdmin\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-divider />\n\n        <oxd-form-actions>\n          <oxd-button\n            type=\"reset\"\n            display-type=\"ghost\"\n            :label=\"$t('general.reset')\"\n          />\n          <submit-button :label=\"$t('general.search')\" />\n        </oxd-form-actions>\n      </oxd-form>\n    </oxd-table-filter>\n\n    <br />\n    <div class=\"orangehrm-paper-container\">\n      <div\n        v-if=\"$can.create(`time_projects`)\"\n        class=\"orangehrm-header-container\"\n      >\n        <oxd-button\n          icon-name=\"plus\"\n          display-type=\"secondary\"\n          :label=\"$t('general.add')\"\n          @click=\"onClickAdd\"\n        />\n      </div>\n      <table-header\n        :selected=\"checkedItems.length\"\n        :loading=\"isLoading\"\n        :total=\"total\"\n        :show-divider=\"$can.create(`time_projects`)\"\n        @delete=\"onClickDeleteSelected\"\n      ></table-header>\n      <div class=\"orangehrm-container\">\n        <oxd-card-table\n          v-model:selected=\"checkedItems\"\n          v-model:order=\"sortDefinition\"\n          :headers=\"headers\"\n          :items=\"items?.data\"\n          :clickable=\"false\"\n          :loading=\"isLoading\"\n          row-decorator=\"oxd-table-decorator-card\"\n          :selectable=\"$can.delete(`time_projects`)\"\n        />\n      </div>\n      <div class=\"orangehrm-bottom-container\">\n        <oxd-pagination\n          v-if=\"showPaginator\"\n          v-model:current=\"currentPage\"\n          :length=\"pages\"\n        />\n      </div>\n    </div>\n    <delete-confirmation ref=\"deleteDialog\"></delete-confirmation>\n  </div>\n</template>\n\n<script>\nimport {computed, ref} from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport {validSelection} from '@/core/util/validation/rules';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {APIService} from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport ProjectAutocomplete from '@/orangehrmTimePlugin/components/ProjectAutocomplete.vue';\nimport CustomerAutocomplete from '@/orangehrmTimePlugin/components/CustomerAutocomplete.vue';\nimport ProjectAdminAutocomplete from '@/orangehrmTimePlugin/components/ProjectAdminAutocomplete.vue';\n\nconst defaultFilters = {\n  customer: null,\n  project: null,\n  projectAdmin: null,\n};\n\nconst defaultSortOrder = {\n  'project.name': 'ASC',\n  'customer.name': 'DEFAULT',\n  'employee.lastName': 'DEFAULT',\n};\n\nexport default {\n  components: {\n    'project-autocomplete': ProjectAutocomplete,\n    'customer-autocomplete': CustomerAutocomplete,\n    'delete-confirmation': DeleteConfirmationDialog,\n    'project-admin-autocomplete': ProjectAdminAutocomplete,\n  },\n  props: {\n    unselectableIds: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  setup(props) {\n    const {$t} = usei18n();\n    const {$tEmpName} = useEmployeeNameTranslate();\n\n    const projectNormalizer = (data) => {\n      return data.map((item) => {\n        const selectable = props.unselectableIds.findIndex(\n          (id) => id == item.id,\n        );\n        return {\n          id: item.id,\n          project: item.name,\n          customer: item.customer?.deleted\n            ? item.customer?.name + $t('general.deleted')\n            : item.customer?.name,\n          projectAdmins: item.projectAdmins\n            ?.map((projectAdmin) => $tEmpName(projectAdmin))\n            .join(', '),\n          isSelectable: selectable === -1,\n        };\n      });\n    };\n\n    const filters = ref({...defaultFilters});\n    const {sortDefinition, sortField, sortOrder, onSort} = useSort({\n      sortDefinition: defaultSortOrder,\n    });\n\n    const serializedFilters = computed(() => {\n      return {\n        customerId: filters.value.customer?.id,\n        projectId: filters.value.project?.id,\n        empNumber: filters.value.projectAdmin?.id,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n        model: 'detailed',\n      };\n    });\n\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/time/projects',\n    );\n\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery,\n    } = usePaginate(http, {\n      query: serializedFilters,\n      normalizer: projectNormalizer,\n    });\n\n    onSort(execQuery);\n\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      filters,\n      sortDefinition,\n    };\n  },\n  data() {\n    return {\n      checkedItems: [],\n      rules: {\n        project: [validSelection],\n        customer: [validSelection],\n        projectAdmin: [validSelection],\n      },\n    };\n  },\n  computed: {\n    headers() {\n      const headers = [\n        {\n          name: 'customer',\n          title: this.$t('time.customer_name'),\n          sortField: 'customer.name',\n          style: {flex: '15%'},\n        },\n        {\n          name: 'project',\n          slot: 'title',\n          title: this.$t('time.project'),\n          sortField: 'project.name',\n          style: {flex: '15%'},\n        },\n        {\n          name: 'projectAdmins',\n          title: this.$t('time.project_admins'),\n          style: {flex: '20%'},\n        },\n      ];\n      const headerActions = {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {flex: 1},\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {},\n      };\n      if (this.$can.delete(`time_projects`)) {\n        headerActions.cellConfig.delete = {\n          onClick: this.onClickDelete,\n          props: {\n            name: 'trash',\n          },\n        };\n      }\n      if (this.$can.update(`time_project_activities`)) {\n        headerActions.cellConfig.edit = {\n          onClick: this.onClickEdit,\n          props: {\n            name: 'pencil-fill',\n          },\n        };\n      }\n      if (Object.keys(headerActions.cellConfig).length > 0) {\n        headers.push(headerActions);\n      }\n      return headers;\n    },\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/time/saveProject');\n    },\n    onClickEdit(item) {\n      navigate('/time/saveProject/{id}', {id: item.id});\n    },\n    onClickDelete(item) {\n      const isSelectable = this.unselectableIds.findIndex(\n        (id) => id == item.id,\n      );\n      if (isSelectable > -1) {\n        return this.$toast.error({\n          title: this.$t('general.error'),\n          message: this.$t(\n            'time.not_allowed_to_delete_projects_which_have_time_logged',\n          ),\n        });\n      }\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteData([item.id]);\n        }\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map((index) => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteData(ids);\n        }\n      });\n    },\n    async deleteData(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http\n          .deleteAll({\n            ids: items,\n          })\n          .then(() => {\n            return this.$toast.deleteSuccess();\n          })\n          .then(() => {\n            this.isLoading = false;\n            this.resetDataTable();\n          });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}