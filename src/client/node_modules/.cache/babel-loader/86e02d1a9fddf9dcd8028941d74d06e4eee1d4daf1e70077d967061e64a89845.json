{"ast":null,"code":"import { required, shouldNotExceedCharLength, validDateFormat, endDateShouldBeAfterStartDate } from '@ohrm/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst workExpModel = {\n  company: '',\n  jobTitle: '',\n  fromDate: '',\n  toDate: '',\n  comment: ''\n};\nexport default {\n  name: 'EditWorkExperience',\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    data: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup() {\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      workExperience: {\n        ...workExpModel\n      },\n      rules: {\n        company: [required, shouldNotExceedCharLength(100)],\n        jobTitle: [required, shouldNotExceedCharLength(100)],\n        fromDate: [validDateFormat(this.userDateFormat)],\n        toDate: [validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.workExperience.fromDate, this.$t('general.to_date_should_be_after_from_date'))],\n        comment: [shouldNotExceedCharLength(200)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.data.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.workExperience = {\n        ...data\n      };\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.data.id, {\n        ...this.workExperience\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"AA+FA,SACEA,QAAQ,EACRC,yBAAyB,EACzBC,eAAe,EACfC,6BAA6B,QACxB,kCAAkC;AACzC,OAAOC,aAAY,MAAO,sCAAsC;AAEhE,MAAMC,YAAW,GAAI;EACnBC,OAAO,EAAE,EAAE;EACXC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,EAAE;EACVC,OAAO,EAAE;AACX,CAAC;AAED,eAAe;EACbC,IAAI,EAAE,oBAAoB;EAE1BC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MAAM;MACZf,QAAQ,EAAE;IACZ,CAAC;IACDgB,IAAI,EAAE;MACJF,IAAI,EAAEC,MAAM;MACZf,QAAQ,EAAE;IACZ;EACF,CAAC;EAEDiB,KAAK,EAAE,CAAC,OAAO,CAAC;EAEhBC,KAAK,GAAG;IACN,MAAM;MAACC;IAAc,IAAIf,aAAa,EAAE;IAExC,OAAO;MACLe;IACF,CAAC;EACH,CAAC;EAEDH,IAAI,GAAG;IACL,OAAO;MACLI,SAAS,EAAE,KAAK;MAChBC,cAAc,EAAE;QAAC,GAAGhB;MAAY,CAAC;MACjCiB,KAAK,EAAE;QACLhB,OAAO,EAAE,CAACN,QAAQ,EAAEC,yBAAyB,CAAC,GAAG,CAAC,CAAC;QACnDM,QAAQ,EAAE,CAACP,QAAQ,EAAEC,yBAAyB,CAAC,GAAG,CAAC,CAAC;QACpDO,QAAQ,EAAE,CAACN,eAAe,CAAC,IAAI,CAACiB,cAAc,CAAC,CAAC;QAChDV,MAAM,EAAE,CACNP,eAAe,CAAC,IAAI,CAACiB,cAAc,CAAC,EACpChB,6BAA6B,CAC3B,MAAM,IAAI,CAACkB,cAAc,CAACb,QAAQ,EAClC,IAAI,CAACe,EAAE,CAAC,2CAA2C,CAAC,CACrD,CACF;QACDb,OAAO,EAAE,CAACT,yBAAyB,CAAC,GAAG,CAAC;MAC1C;IACF,CAAC;EACH,CAAC;EAEDuB,WAAW,GAAG;IACZ,IAAI,CAACJ,SAAQ,GAAI,IAAI;IACrB,IAAI,CAACP,IAAG,CACLY,GAAG,CAAC,IAAI,CAACT,IAAI,CAACU,EAAE,EAChBC,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAACZ;MAAI,IAAIY,QAAQ,CAACZ,IAAI;MAC5B,IAAI,CAACK,cAAa,GAAI;QAAC,GAAGL;MAAI,CAAC;IACjC,CAAC,EACAa,OAAO,CAAC,MAAM;MACb,IAAI,CAACT,SAAQ,GAAI,KAAK;IACxB,CAAC,CAAC;EACN,CAAC;EAEDU,OAAO,EAAE;IACPC,MAAM,GAAG;MACP,IAAI,CAACX,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACP,IAAG,CACLmB,MAAM,CAAC,IAAI,CAAChB,IAAI,CAACU,EAAE,EAAE;QACpB,GAAG,IAAI,CAACL;MACV,CAAC,EACAM,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACM,MAAM,CAACC,aAAa,EAAE;MACpC,CAAC,EACAP,IAAI,CAAC,MAAM;QACV,IAAI,CAACQ,QAAQ,EAAE;MACjB,CAAC,CAAC;IACN,CAAC;IACDA,QAAQ,GAAG;MACT,IAAI,CAACC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;IAC3B;EACF;AACF,CAAC","names":["required","shouldNotExceedCharLength","validDateFormat","endDateShouldBeAfterStartDate","useDateFormat","workExpModel","company","jobTitle","fromDate","toDate","comment","name","props","http","type","Object","data","emits","setup","userDateFormat","isLoading","workExperience","rules","$t","beforeMount","get","id","then","response","finally","methods","onSave","update","$toast","updateSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\EditWorkExperience.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-horizontal-padding orangehrm-top-padding\">\n    <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n      Edit Work Experience\n    </oxd-text>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"workExperience.company\"\n              :label=\"$t('pim.company')\"\n              :rules=\"rules.company\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"workExperience.jobTitle\"\n              :label=\"$t('general.job_title')\"\n              :rules=\"rules.jobTitle\"\n              required\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <date-input\n              v-model=\"workExperience.fromDate\"\n              :label=\"$t('general.from')\"\n              :rules=\"rules.fromDate\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <date-input\n              v-model=\"workExperience.toDate\"\n              :label=\"$t('general.to')\"\n              :rules=\"rules.toDate\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item class=\"--span-column-2\">\n            <oxd-input-field\n              v-model=\"workExperience.comment\"\n              type=\"textarea\"\n              :label=\"$t('general.comment')\"\n              :rules=\"rules.comment\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n    <oxd-divider />\n  </div>\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n  validDateFormat,\n  endDateShouldBeAfterStartDate,\n} from '@ohrm/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\n\nconst workExpModel = {\n  company: '',\n  jobTitle: '',\n  fromDate: '',\n  toDate: '',\n  comment: '',\n};\n\nexport default {\n  name: 'EditWorkExperience',\n\n  props: {\n    http: {\n      type: Object,\n      required: true,\n    },\n    data: {\n      type: Object,\n      required: true,\n    },\n  },\n\n  emits: ['close'],\n\n  setup() {\n    const {userDateFormat} = useDateFormat();\n\n    return {\n      userDateFormat,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      workExperience: {...workExpModel},\n      rules: {\n        company: [required, shouldNotExceedCharLength(100)],\n        jobTitle: [required, shouldNotExceedCharLength(100)],\n        fromDate: [validDateFormat(this.userDateFormat)],\n        toDate: [\n          validDateFormat(this.userDateFormat),\n          endDateShouldBeAfterStartDate(\n            () => this.workExperience.fromDate,\n            this.$t('general.to_date_should_be_after_from_date'),\n          ),\n        ],\n        comment: [shouldNotExceedCharLength(200)],\n      },\n    };\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.data.id)\n      .then((response) => {\n        const {data} = response.data;\n        this.workExperience = {...data};\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.data.id, {\n          ...this.workExperience,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}