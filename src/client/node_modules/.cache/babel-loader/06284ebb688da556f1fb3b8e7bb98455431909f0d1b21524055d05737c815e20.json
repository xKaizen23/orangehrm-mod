{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport { computed, reactive, toRefs } from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useToast from '@/core/util/composable/useToast';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { APIService } from '@/core/util/services/api.service';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport PostModal from '@/orangehrmBuzzPlugin/components/PostModal';\nimport PhotoFrame from '@/orangehrmBuzzPlugin/components/PhotoFrame';\nimport VideoFrame from '@/orangehrmBuzzPlugin/components/VideoFrame';\nimport PhotoInput from '@/orangehrmBuzzPlugin/components/PhotoInput';\nimport useBuzzAPIs from '@/orangehrmBuzzPlugin/util/composable/useBuzzAPIs';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport { OxdBuzzPostInput, promiseDebounce } from '@ohrm/oxd';\nexport default {\n  name: 'EditPostModal',\n  components: {\n    'post-modal': PostModal,\n    'photo-frame': PhotoFrame,\n    'photo-input': PhotoInput,\n    'video-frame': VideoFrame,\n    'oxd-buzz-post-input': OxdBuzzPostInput\n  },\n  props: {\n    data: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup(props, context) {\n    const {\n      $t\n    } = usei18n();\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat,\n      jsTimeFormat\n    } = useDateFormat();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {\n      updateSuccess\n    } = useToast();\n    const {\n      updatePost,\n      updateSharedPost\n    } = useBuzzAPIs(http);\n    const state = reactive({\n      post: {\n        text: props.data.text,\n        type: props.data.type,\n        photos: props.data.photoIds || [],\n        video: props.data.video?.link || null\n      },\n      isLoading: false,\n      embedURL: props.data.video?.link || null\n    });\n    const onSubmit = () => {\n      let type = 'text';\n      state.isLoading = true;\n      if (state.post.photos.length > 0) {\n        type = 'photo';\n      }\n      if (state.post.video) {\n        type = 'video';\n      }\n      new Promise(resolve => {\n        if (props.data.originalPost) {\n          resolve(updateSharedPost(props.data.id, state.post.text));\n        } else {\n          resolve(updatePost(props.data.post.id, {\n            type: type,\n            text: state.post.text,\n            link: state.post.video,\n            photos: state.post.photos.filter(id => typeof id === 'object'),\n            deletedPhotos: (props.data.photoIds || []).filter(id => {\n              return state.post.photos.findIndex(photo => photo === id) === -1;\n            })\n          }));\n        }\n      }).then(response => {\n        updateSuccess();\n        context.emit('close', response.data);\n      });\n    };\n    const rules = {\n      url: [required, promiseDebounce(async value => {\n        if (!value) return true;\n        state.embedURL = null;\n        const response = await http.request({\n          method: 'GET',\n          url: '/api/v2/buzz/validation/links',\n          params: {\n            url: value\n          }\n        });\n        const {\n          data\n        } = response.data;\n        if (data?.valid === true) {\n          state.embedURL = data.embeddedURL;\n          return true;\n        } else {\n          return $t('general.invalid_video_url_message');\n        }\n      }, 500)],\n      text: [shouldNotExceedCharLength(65530), value => {\n        if (props.data.type === 'video' || state.post.photos.length > 0) {\n          return true;\n        }\n        return required(value);\n      }]\n    };\n    const originalPost = computed(() => {\n      const originalText = props.data.originalPost?.text;\n      const originalEmployee = props.data.originalPost?.employee;\n      const {\n        createdDate,\n        createdTime\n      } = props.data.originalPost;\n      const utcDate = parseDate(`${createdDate} ${createdTime} +00:00`, 'yyyy-MM-dd HH:mm xxx');\n      return {\n        text: originalText,\n        employee: $tEmpName(originalEmployee, {\n          includeMiddle: true,\n          excludePastEmpTag: false\n        }),\n        dateTime: formatDate(utcDate, `${jsDateFormat} ${jsTimeFormat}`, {\n          locale\n        })\n      };\n    });\n    return {\n      rules,\n      onSubmit,\n      originalPost,\n      ...toRefs(state)\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["required","shouldNotExceedCharLength","computed","reactive","toRefs","usei18n","useToast","useLocale","APIService","formatDate","parseDate","useDateFormat","PostModal","PhotoFrame","VideoFrame","PhotoInput","useBuzzAPIs","useEmployeeNameTranslate","OxdBuzzPostInput","promiseDebounce","name","components","props","data","type","Object","emits","setup","context","$t","locale","jsDateFormat","jsTimeFormat","$tEmpName","http","window","appGlobal","baseUrl","updateSuccess","updatePost","updateSharedPost","state","post","text","photos","photoIds","video","link","isLoading","embedURL","onSubmit","length","Promise","resolve","originalPost","id","filter","deletedPhotos","findIndex","photo","then","response","emit","rules","url","value","request","method","params","valid","embeddedURL","originalText","originalEmployee","employee","createdDate","createdTime","utcDate","includeMiddle","excludePastEmpTag","dateTime"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmBuzzPlugin\\components\\EditPostModal.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <post-modal\n    :loading=\"isLoading\"\n    :title=\"$t('buzz.edit_post')\"\n    :action-label=\"$t('buzz.post')\"\n    @submit=\"onSubmit\"\n    @close=\"$emit('close', false)\"\n  >\n    <template #header>\n      <oxd-buzz-post-input v-model=\"post.text\" :rules=\"rules.text\">\n      </oxd-buzz-post-input>\n    </template>\n\n    <template v-if=\"data.originalPost\">\n      <video-frame v-if=\"data.type === 'video'\" :video-src=\"data.video.link\">\n      </video-frame>\n      <photo-frame v-if=\"data.type === 'photo'\" :media=\"data.photoIds\">\n      </photo-frame>\n      <br v-if=\"data.type === 'video' || data.type === 'photo'\" />\n\n      <oxd-text tag=\"p\" class=\"orangehrm-buzz-share-employee\">\n        {{ originalPost.employee }}\n      </oxd-text>\n      <oxd-text tag=\"p\" class=\"orangehrm-buzz-share-date\">\n        {{ originalPost.dateTime }}\n      </oxd-text>\n      <oxd-text\n        v-if=\"originalPost.text\"\n        tag=\"p\"\n        class=\"orangehrm-buzz-share-text\"\n      >\n        {{ originalPost.text }}\n      </oxd-text>\n    </template>\n\n    <template v-else>\n      <photo-input\n        v-if=\"post.type === 'text' || post.type === 'photo'\"\n        v-model=\"post.photos\"\n      />\n      <oxd-input-field\n        v-if=\"post.type === 'video'\"\n        v-model=\"post.video\"\n        type=\"textarea\"\n        :rules=\"rules.url\"\n        :label=\"$t('buzz.video_url')\"\n      />\n      <video-frame v-if=\"embedURL\" :video-src=\"embedURL\"> </video-frame>\n    </template>\n  </post-modal>\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@/core/util/validation/rules';\nimport {computed, reactive, toRefs} from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useToast from '@/core/util/composable/useToast';\nimport useLocale from '@/core/util/composable/useLocale';\nimport {APIService} from '@/core/util/services/api.service';\nimport {formatDate, parseDate} from '@/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport PostModal from '@/orangehrmBuzzPlugin/components/PostModal';\nimport PhotoFrame from '@/orangehrmBuzzPlugin/components/PhotoFrame';\nimport VideoFrame from '@/orangehrmBuzzPlugin/components/VideoFrame';\nimport PhotoInput from '@/orangehrmBuzzPlugin/components/PhotoInput';\nimport useBuzzAPIs from '@/orangehrmBuzzPlugin/util/composable/useBuzzAPIs';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport {OxdBuzzPostInput, promiseDebounce} from '@ohrm/oxd';\n\nexport default {\n  name: 'EditPostModal',\n\n  components: {\n    'post-modal': PostModal,\n    'photo-frame': PhotoFrame,\n    'photo-input': PhotoInput,\n    'video-frame': VideoFrame,\n    'oxd-buzz-post-input': OxdBuzzPostInput,\n  },\n\n  props: {\n    data: {\n      type: Object,\n      required: true,\n    },\n  },\n\n  emits: ['close'],\n\n  setup(props, context) {\n    const {$t} = usei18n();\n    const {locale} = useLocale();\n    const {jsDateFormat, jsTimeFormat} = useDateFormat();\n    const {$tEmpName} = useEmployeeNameTranslate();\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {updateSuccess} = useToast();\n    const {updatePost, updateSharedPost} = useBuzzAPIs(http);\n\n    const state = reactive({\n      post: {\n        text: props.data.text,\n        type: props.data.type,\n        photos: props.data.photoIds || [],\n        video: props.data.video?.link || null,\n      },\n      isLoading: false,\n      embedURL: props.data.video?.link || null,\n    });\n\n    const onSubmit = () => {\n      let type = 'text';\n      state.isLoading = true;\n\n      if (state.post.photos.length > 0) {\n        type = 'photo';\n      }\n      if (state.post.video) {\n        type = 'video';\n      }\n\n      new Promise((resolve) => {\n        if (props.data.originalPost) {\n          resolve(updateSharedPost(props.data.id, state.post.text));\n        } else {\n          resolve(\n            updatePost(props.data.post.id, {\n              type: type,\n              text: state.post.text,\n              link: state.post.video,\n              photos: state.post.photos.filter((id) => typeof id === 'object'),\n              deletedPhotos: (props.data.photoIds || []).filter((id) => {\n                return (\n                  state.post.photos.findIndex((photo) => photo === id) === -1\n                );\n              }),\n            }),\n          );\n        }\n      }).then((response) => {\n        updateSuccess();\n        context.emit('close', response.data);\n      });\n    };\n\n    const rules = {\n      url: [\n        required,\n        promiseDebounce(async (value) => {\n          if (!value) return true;\n          state.embedURL = null;\n          const response = await http.request({\n            method: 'GET',\n            url: '/api/v2/buzz/validation/links',\n            params: {\n              url: value,\n            },\n          });\n          const {data} = response.data;\n          if (data?.valid === true) {\n            state.embedURL = data.embeddedURL;\n            return true;\n          } else {\n            return $t('general.invalid_video_url_message');\n          }\n        }, 500),\n      ],\n      text: [\n        shouldNotExceedCharLength(65530),\n        (value) => {\n          if (props.data.type === 'video' || state.post.photos.length > 0) {\n            return true;\n          }\n          return required(value);\n        },\n      ],\n    };\n\n    const originalPost = computed(() => {\n      const originalText = props.data.originalPost?.text;\n      const originalEmployee = props.data.originalPost?.employee;\n      const {createdDate, createdTime} = props.data.originalPost;\n      const utcDate = parseDate(\n        `${createdDate} ${createdTime} +00:00`,\n        'yyyy-MM-dd HH:mm xxx',\n      );\n\n      return {\n        text: originalText,\n        employee: $tEmpName(originalEmployee, {\n          includeMiddle: true,\n          excludePastEmpTag: false,\n        }),\n        dateTime: formatDate(utcDate, `${jsDateFormat} ${jsTimeFormat}`, {\n          locale,\n        }),\n      };\n    });\n\n    return {\n      rules,\n      onSubmit,\n      originalPost,\n      ...toRefs(state),\n    };\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.orangehrm-buzz-share {\n  &-employee {\n    font-size: 0.9rem;\n  }\n  &-date {\n    font-size: 0.6rem;\n    color: $oxd-interface-gray-color;\n  }\n  &-text {\n    font-weight: 300;\n    margin-top: 0.5rem;\n    @include truncate(6, 1.5, #fff);\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}