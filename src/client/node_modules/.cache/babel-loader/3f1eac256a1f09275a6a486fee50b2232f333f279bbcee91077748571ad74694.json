{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  return _openBlock(), _createBlock(_component_oxd_input_field, {\n    type: \"autocomplete\",\n    clear: false,\n    label: _ctx.$t('time.project'),\n    \"create-options\": $options.loadProjects\n  }, {\n    option: _withCtx(({\n      data\n    }) => [_createElementVNode(\"span\", null, _toDisplayString(data.label), 1)]),\n    _: 1\n  }, 8, [\"label\", \"create-options\"]);\n}","map":{"version":3,"mappings":";;;uBAoBEA,aASkBC;IARhBC,IAAI,EAAC,cAAc;IAClBC,KAAK,EAAE,KAAK;IACZC,KAAK,EAAEC,OAAE;IACT,gBAAc,EAAEC;;IAENC,MAAM,WACf,CAA+B;MADbC;IAAI,OACtBC,oBAA+B,+BAArBD,IAAI,CAACJ,KAAK","names":["_createBlock","_component_oxd_input_field","type","clear","label","_ctx","$options","option","data","_createElementVNode"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmTimePlugin\\components\\ProjectAutocomplete.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-input-field\n    type=\"autocomplete\"\n    :clear=\"false\"\n    :label=\"$t('time.project')\"\n    :create-options=\"loadProjects\"\n  >\n    <template #option=\"{data}\">\n      <span> {{ data.label }} </span>\n    </template>\n  </oxd-input-field>\n</template>\n\n<script>\nimport {APIService} from '@ohrm/core/util/services/api.service';\nexport default {\n  name: 'ProjectAutocomplete',\n  props: {\n    onlyAllowed: {\n      type: Boolean,\n      required: false,\n      default: true,\n    },\n    excludeProjectIds: {\n      type: Array,\n      required: false,\n      default: () => [],\n    },\n    excludeCustomerName: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/time/projects',\n    );\n    return {\n      http,\n    };\n  },\n  methods: {\n    async loadProjects(serachParam) {\n      return new Promise((resolve) => {\n        if (serachParam.trim()) {\n          const params = {\n            name: this.excludeCustomerName ? serachParam.trim() : undefined,\n            onlyAllowed: this.onlyAllowed,\n            model: 'detailed',\n            excludeProjectIds:\n              this.excludeProjectIds.length > 0\n                ? this.excludeProjectIds\n                : undefined,\n            customerOrProjectName: !this.excludeCustomerName\n              ? serachParam.trim()\n              : undefined,\n          };\n          this.http.getAll(params).then(({data}) => {\n            resolve(\n              data.data.map((project) => {\n                return {\n                  id: project.id,\n                  label: this.excludeCustomerName\n                    ? project.name\n                    : `${project.customer?.name} - ${project.name}`,\n                  _customer: project.customer,\n                };\n              }),\n            );\n          });\n        } else {\n          resolve([]);\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n::v-deep(.oxd-autocomplete-wrapper) {\n  min-width: 150px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}