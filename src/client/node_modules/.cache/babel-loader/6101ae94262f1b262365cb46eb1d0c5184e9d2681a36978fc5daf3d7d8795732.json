{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, vShow as _vShow, withDirectives as _withDirectives, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-ae2b7cba\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"orangehrm-paper-container\"\n};\nconst _hoisted_2 = {\n  class: \"orangehrm-header-container\"\n};\nconst _hoisted_3 = {\n  class: \"orangehrm-ldap-sync\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_text = _resolveComponent(\"oxd-text\");\n  const _component_oxd_loading_spinner = _resolveComponent(\"oxd-loading-spinner\");\n  const _component_oxd_button = _resolveComponent(\"oxd-button\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_oxd_text, {\n    tag: \"h6\",\n    class: \"orangehrm-main-title\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('admin.sync_connection')), 1)]),\n    _: 1\n  }), _withDirectives(_createVNode(_component_oxd_text, {\n    type: \"card-body\",\n    class: \"orangehrm-ldap-sync-time\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\" (\" + _toDisplayString($options.lastSync) + \") \", 1)]),\n    _: 1\n  }, 512), [[_vShow, $options.lastSync]])]), $data.isLoading ? (_openBlock(), _createBlock(_component_oxd_loading_spinner, {\n    key: 0,\n    class: \"orangehrm-ldap-sync-loader\"\n  })) : (_openBlock(), _createBlock(_component_oxd_button, {\n    key: 1,\n    \"display-type\": \"secondary\",\n    class: \"orangehrm-ldap-sync-button\",\n    label: _ctx.$t('admin.sync_now'),\n    onClick: $options.onClickSync\n  }, null, 8, [\"label\", \"onClick\"]))])]);\n}","map":{"version":3,"mappings":";;;EAoBOA,KAAK,EAAC;AAA2B;;EAC/BA,KAAK,EAAC;AAA4B;;EAChCA,KAAK,EAAC;AAAqB;;;;;uBAFpCC,oBA0BM,OA1BNC,UA0BM,GAzBJC,oBAwBM,OAxBNC,UAwBM,GAvBJD,oBAWM,OAXNE,UAWM,GAVJC,aAEWC;IAFDC,GAAG,EAAC,IAAI;IAACR,KAAK,EAAC;;sBACvB,MAAiC,mCAA9BS,OAAE;;sBAEPH,aAMWC;IAJTG,IAAI,EAAC,WAAW;IAChBV,KAAK,EAAC;;sBACP,MACE,kBADF,IACE,oBAAGW,iBAAQ,IAAG,IACjB;;qBALUA,iBAAQ,OAQZC,eAAS,kBADjBC,aAGEC;;IADAd,KAAK,EAAC;uBAERa,aAMEE;;IAJA,cAAY,EAAC,WAAW;IACxBf,KAAK,EAAC,4BAA4B;IACjCgB,KAAK,EAAEP,OAAE;IACTQ,OAAK,EAAEN","names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_createVNode","_component_oxd_text","tag","_ctx","type","$options","$data","_createBlock","_component_oxd_loading_spinner","_component_oxd_button","label","onClick"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\components\\LdapSyncConnection.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-paper-container\">\n    <div class=\"orangehrm-header-container\">\n      <div class=\"orangehrm-ldap-sync\">\n        <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n          {{ $t('admin.sync_connection') }}\n        </oxd-text>\n        <oxd-text\n          v-show=\"lastSync\"\n          type=\"card-body\"\n          class=\"orangehrm-ldap-sync-time\"\n        >\n          ({{ lastSync }})\n        </oxd-text>\n      </div>\n      <oxd-loading-spinner\n        v-if=\"isLoading\"\n        class=\"orangehrm-ldap-sync-loader\"\n      />\n      <oxd-button\n        v-else\n        display-type=\"secondary\"\n        class=\"orangehrm-ldap-sync-button\"\n        :label=\"$t('admin.sync_now')\"\n        @click=\"onClickSync\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport {formatDate, parseDate} from '@/core/util/helper/datefns';\nimport {APIService} from '@/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport {OxdSpinner} from '@ohrm/oxd';\n\nexport default {\n  name: 'LdapSyncConnection',\n  components: {\n    'oxd-loading-spinner': OxdSpinner,\n  },\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/admin/ldap/user-sync',\n    );\n    const {jsDateFormat} = useDateFormat();\n\n    return {\n      http,\n      jsDateFormat,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      lastSyncDate: null,\n      lastSyncTime: null,\n      lastSyncStatus: null,\n    };\n  },\n  computed: {\n    lastSync() {\n      if (this.lastSyncStatus === 2) return null;\n      if (this.lastSyncDate && this.lastSyncTime) {\n        const parsedDateTime = parseDate(\n          `${this.lastSyncDate} ${this.lastSyncTime} +00:00`,\n          'yyyy-MM-dd HH:mm xxx',\n        );\n        return this.$t(\n          this.lastSyncStatus === 1\n            ? 'admin.last_synced_on_datetime'\n            : 'admin.last_sync_failed_on_datetime',\n          {\n            datetime: formatDate(\n              parsedDateTime,\n              `hh:mm a ${this.jsDateFormat}`,\n            ),\n          },\n        );\n      } else {\n        return null;\n      }\n    },\n  },\n  beforeMount() {\n    this.getLastSyncStatus();\n  },\n  methods: {\n    getLastSyncStatus() {\n      this.isLoading = true;\n      this.http\n        .getAll()\n        .then((response) => {\n          const {data} = response.data;\n          this.lastSyncStatus = data.syncStatus;\n          this.lastSyncDate =\n            data.syncFinishedAt?.date || data.syncStartedAt?.date;\n          this.lastSyncTime =\n            data.syncFinishedAt?.time || data.syncStartedAt?.time;\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n    },\n    onClickSync() {\n      this.isLoading = true;\n      this.http\n        .create()\n        .then((response) => {\n          const {data} = response.data;\n          this.lastSyncStatus = data.syncStatus;\n          this.lastSyncDate =\n            data.syncFinishedAt?.date || data.syncStartedAt?.date;\n          this.lastSyncTime =\n            data.syncFinishedAt?.time || data.syncStartedAt?.time;\n          this.$toast.success({\n            title: this.$t('general.success'),\n            message: this.$t('admin.synchronization_successful'),\n          });\n        })\n        .catch(() => {\n          this.getLastSyncStatus();\n          this.$toast.error({\n            title: this.$t('general.error'),\n            message: this.$t('admin.synchronization_failed'),\n          });\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n    },\n  },\n};\n</script>\n\n<style src=\"./ldap-sync-connection.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}