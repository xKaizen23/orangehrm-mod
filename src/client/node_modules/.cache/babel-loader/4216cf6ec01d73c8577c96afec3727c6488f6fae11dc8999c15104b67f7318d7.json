{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { OxdDialog } from '@ohrm/oxd';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport LeaveComment from '@/orangehrmLeavePlugin/components/LeaveComment';\nexport default {\n  name: 'LeaveCommentModal',\n  components: {\n    'oxd-dialog': OxdDialog,\n    'leave-comment': LeaveComment\n  },\n  props: {\n    id: {\n      type: Number,\n      required: false,\n      default: null\n    },\n    leaveRequest: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    const apiPath = props.leaveRequest ? 'leave-requests' : 'leaves';\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/leave/${apiPath}/${props.id}/leave-comments`);\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      comment: null,\n      rules: {\n        comment: [required, shouldNotExceedCharLength(255)]\n      },\n      comments: []\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.getAll({\n      limit: 0\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.comments = data;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        comment: this.comment\n      }).then(() => {\n        this.$toast.saveSuccess();\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.comment = null;\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"AA0DA,SAAQA,UAAU,QAAO,kCAAkC;AAC3D,SAAQC,SAAS,QAAO,WAAW;AACnC,SACEC,QAAQ,EACRC,yBAAyB,QACpB,kCAAkC;AACzC,OAAOC,YAAW,MAAO,gDAAgD;AAEzE,eAAe;EACbC,IAAI,EAAE,mBAAmB;EACzBC,UAAU,EAAE;IACV,YAAY,EAAEL,SAAS;IACvB,eAAe,EAAEG;EACnB,CAAC;EACDG,KAAK,EAAE;IACLC,EAAE,EAAE;MACFC,IAAI,EAAEC,MAAM;MACZR,QAAQ,EAAE,KAAK;MACfS,OAAO,EAAE;IACX,CAAC;IACDC,YAAY,EAAE;MACZH,IAAI,EAAEI,OAAO;MACbF,OAAO,EAAE;IACX;EACF,CAAC;EACDG,KAAK,EAAE,CAAC,OAAO,CAAC;EAChBC,KAAK,CAACR,KAAK,EAAE;IACX,MAAMS,OAAM,GAAIT,KAAK,CAACK,YAAW,GAAI,gBAAe,GAAI,QAAQ;IAChE,MAAMK,IAAG,GAAI,IAAIjB,UAAU,CACzBkB,MAAM,CAACC,SAAS,CAACC,OAAO,EACvB,iBAAgBJ,OAAQ,IAAGT,KAAK,CAACC,EAAG,iBAAgB,CACtD;IACD,OAAO;MACLS;IACF,CAAC;EACH,CAAC;EACDI,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;QACLD,OAAO,EAAE,CAACrB,QAAQ,EAAEC,yBAAyB,CAAC,GAAG,CAAC;MACpD,CAAC;MACDsB,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,WAAW,GAAG;IACZ,IAAI,CAACJ,SAAQ,GAAI,IAAI;IACrB,IAAI,CAACL,IAAG,CACLU,MAAM,CAAC;MAACC,KAAK,EAAE;IAAC,CAAC,EACjBC,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAACT;MAAI,IAAIS,QAAQ,CAACT,IAAI;MAC5B,IAAI,CAACI,QAAO,GAAIJ,IAAI;IACtB,CAAC,EACAU,OAAO,CAAC,MAAM;MACb,IAAI,CAACT,SAAQ,GAAI,KAAK;IACxB,CAAC,CAAC;EACN,CAAC;EACDU,OAAO,EAAE;IACPC,MAAM,GAAG;MACP,IAAI,CAACX,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACL,IAAG,CACLiB,MAAM,CAAC;QACNX,OAAO,EAAE,IAAI,CAACA;MAChB,CAAC,EACAM,IAAI,CAAC,MAAM;QACV,IAAI,CAACM,MAAM,CAACC,WAAW,EAAE;QACzB,IAAI,CAACC,QAAQ,EAAE;MACjB,CAAC,CAAC;IACN,CAAC;IACDA,QAAQ,GAAG;MACT,IAAI,CAACd,OAAM,GAAI,IAAI;MACnB,IAAI,CAACe,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;IAC3B;EACF;AACF,CAAC","names":["APIService","OxdDialog","required","shouldNotExceedCharLength","LeaveComment","name","components","props","id","type","Number","default","leaveRequest","Boolean","emits","setup","apiPath","http","window","appGlobal","baseUrl","data","isLoading","comment","rules","comments","beforeMount","getAll","limit","then","response","finally","methods","onSave","create","$toast","saveSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmLeavePlugin\\components\\LeaveCommentsModal.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-dialog class=\"orangehrm-dialog-modal\" @update:show=\"onCancel\">\n    <div class=\"orangehrm-modal-header\">\n      <oxd-text type=\"card-title\">\n        {{ $t('leave.leave_request_comments') }}\n      </oxd-text>\n    </div>\n    <oxd-divider />\n    <div v-if=\"!isLoading\" class=\"orangehrm-modal-content\">\n      <leave-comment\n        v-for=\"comm in comments\"\n        :key=\"comm.id\"\n        :data=\"comm\"\n      ></leave-comment>\n    </div>\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-input-field\n          v-model=\"comment\"\n          type=\"textarea\"\n          :placeholder=\"$t('general.comment_here')\"\n          :rules=\"rules.comment\"\n        />\n      </oxd-form-row>\n      <oxd-divider />\n      <oxd-form-actions>\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </oxd-dialog>\n</template>\n\n<script>\nimport {APIService} from '@/core/util/services/api.service';\nimport {OxdDialog} from '@ohrm/oxd';\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport LeaveComment from '@/orangehrmLeavePlugin/components/LeaveComment';\n\nexport default {\n  name: 'LeaveCommentModal',\n  components: {\n    'oxd-dialog': OxdDialog,\n    'leave-comment': LeaveComment,\n  },\n  props: {\n    id: {\n      type: Number,\n      required: false,\n      default: null,\n    },\n    leaveRequest: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  emits: ['close'],\n  setup(props) {\n    const apiPath = props.leaveRequest ? 'leave-requests' : 'leaves';\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/leave/${apiPath}/${props.id}/leave-comments`,\n    );\n    return {\n      http,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      comment: null,\n      rules: {\n        comment: [required, shouldNotExceedCharLength(255)],\n      },\n      comments: [],\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .getAll({limit: 0})\n      .then((response) => {\n        const {data} = response.data;\n        this.comments = data;\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .create({\n          comment: this.comment,\n        })\n        .then(() => {\n          this.$toast.saveSuccess();\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.comment = null;\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n\n<style src=\"./leave-comment-modal.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}