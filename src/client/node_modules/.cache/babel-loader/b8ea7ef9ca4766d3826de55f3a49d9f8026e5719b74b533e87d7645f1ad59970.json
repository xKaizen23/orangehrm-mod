{"ast":null,"code":"import { required, validDateFormat, endDateShouldBeAfterStartDate, maxCurrency, digitsOnlyWithDecimalPoint } from '@ohrm/core/util/validation/rules';\nimport { yearRange } from '@ohrm/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst membershipModel = {\n  membership: [],\n  subscriptionFee: '',\n  subscriptionPaidBy: null,\n  currencyType: [],\n  subscriptionCommenceDate: '',\n  subscriptionRenewalDate: ''\n};\nexport default {\n  name: 'EditMembership',\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    data: {\n      type: Object,\n      required: true\n    },\n    currencies: {\n      type: Array,\n      default: () => []\n    },\n    paidBy: {\n      type: Array,\n      default: () => []\n    },\n    memberships: {\n      type: Array,\n      default: () => []\n    }\n  },\n  emits: ['close'],\n  setup() {\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      membership: {\n        ...membershipModel\n      },\n      yearArray: [...yearRange()],\n      rules: {\n        membership: [required],\n        subscriptionCommenceDate: [validDateFormat(this.userDateFormat)],\n        subscriptionRenewalDate: [validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.membership.subscriptionCommenceDate, this.$t('pim.renewal_date_should_be_after_the_commencing_date'))],\n        subscriptionFee: [digitsOnlyWithDecimalPoint, maxCurrency(1000000000)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.data.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.membership.subscriptionFee = data.subscriptionFee;\n      this.membership.subscriptionCommenceDate = data.subscriptionCommenceDate;\n      this.membership.subscriptionRenewalDate = data.subscriptionRenewalDate;\n      this.membership.membership = this.memberships.find(item => item.id === data.membership.id);\n      this.membership.subscriptionPaidBy = this.paidBy.find(item => item.id === data.subscriptionPaidBy);\n      this.membership.currencyType = this.currencies.find(item => item.id === data.currencyType?.id);\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.data.id, {\n        subscriptionFee: this.membership.subscriptionFee,\n        subscriptionCommenceDate: this.membership.subscriptionCommenceDate,\n        subscriptionRenewalDate: this.membership.subscriptionRenewalDate,\n        membershipId: this.membership.membership.id,\n        subscriptionPaidBy: this.membership.subscriptionPaidBy?.id,\n        currencyTypeId: this.membership.currencyType?.id\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.membership = {\n          ...membershipModel\n        };\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["required","validDateFormat","endDateShouldBeAfterStartDate","maxCurrency","digitsOnlyWithDecimalPoint","yearRange","useDateFormat","membershipModel","membership","subscriptionFee","subscriptionPaidBy","currencyType","subscriptionCommenceDate","subscriptionRenewalDate","name","props","http","type","Object","data","currencies","Array","default","paidBy","memberships","emits","setup","userDateFormat","isLoading","yearArray","rules","$t","beforeMount","get","id","then","response","find","item","finally","methods","onSave","update","membershipId","currencyTypeId","$toast","updateSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\EditMembership.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-horizontal-padding orangehrm-vertical-padding\">\n    <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n      {{ $t('general.edit_membership') }}\n    </oxd-text>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"membership.membership\"\n              type=\"select\"\n              :label=\"$t('pim.membership')\"\n              :options=\"memberships\"\n              :rules=\"rules.membership\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"membership.subscriptionPaidBy\"\n              type=\"select\"\n              :label=\"$t('pim.subscription_paid_by')\"\n              :options=\"paidBy\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"membership.subscriptionFee\"\n              :label=\"$t('pim.subscription_amount')\"\n              :rules=\"rules.subscriptionFee\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"membership.currencyType\"\n              type=\"select\"\n              :label=\"$t('general.currency')\"\n              :options=\"currencies\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <date-input\n              v-model=\"membership.subscriptionCommenceDate\"\n              :label=\"$t('pim.subscription_commence_date')\"\n              :rules=\"rules.subscriptionCommenceDate\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <date-input\n              v-model=\"membership.subscriptionRenewalDate\"\n              :label=\"$t('pim.subscription_renewal_date')\"\n              :years=\"yearArray\"\n              :rules=\"rules.subscriptionRenewalDate\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </div>\n  <oxd-divider />\n</template>\n\n<script>\nimport {\n  required,\n  validDateFormat,\n  endDateShouldBeAfterStartDate,\n  maxCurrency,\n  digitsOnlyWithDecimalPoint,\n} from '@ohrm/core/util/validation/rules';\nimport {yearRange} from '@ohrm/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\n\nconst membershipModel = {\n  membership: [],\n  subscriptionFee: '',\n  subscriptionPaidBy: null,\n  currencyType: [],\n  subscriptionCommenceDate: '',\n  subscriptionRenewalDate: '',\n};\n\nexport default {\n  name: 'EditMembership',\n\n  props: {\n    http: {\n      type: Object,\n      required: true,\n    },\n    data: {\n      type: Object,\n      required: true,\n    },\n    currencies: {\n      type: Array,\n      default: () => [],\n    },\n    paidBy: {\n      type: Array,\n      default: () => [],\n    },\n    memberships: {\n      type: Array,\n      default: () => [],\n    },\n  },\n\n  emits: ['close'],\n\n  setup() {\n    const {userDateFormat} = useDateFormat();\n\n    return {\n      userDateFormat,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      membership: {...membershipModel},\n      yearArray: [...yearRange()],\n      rules: {\n        membership: [required],\n        subscriptionCommenceDate: [validDateFormat(this.userDateFormat)],\n        subscriptionRenewalDate: [\n          validDateFormat(this.userDateFormat),\n          endDateShouldBeAfterStartDate(\n            () => this.membership.subscriptionCommenceDate,\n            this.$t('pim.renewal_date_should_be_after_the_commencing_date'),\n          ),\n        ],\n        subscriptionFee: [digitsOnlyWithDecimalPoint, maxCurrency(1000000000)],\n      },\n    };\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.data.id)\n      .then((response) => {\n        const {data} = response.data;\n        this.membership.subscriptionFee = data.subscriptionFee;\n        this.membership.subscriptionCommenceDate =\n          data.subscriptionCommenceDate;\n        this.membership.subscriptionRenewalDate = data.subscriptionRenewalDate;\n        this.membership.membership = this.memberships.find(\n          (item) => item.id === data.membership.id,\n        );\n        this.membership.subscriptionPaidBy = this.paidBy.find(\n          (item) => item.id === data.subscriptionPaidBy,\n        );\n        this.membership.currencyType = this.currencies.find(\n          (item) => item.id === data.currencyType?.id,\n        );\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.data.id, {\n          subscriptionFee: this.membership.subscriptionFee,\n          subscriptionCommenceDate: this.membership.subscriptionCommenceDate,\n          subscriptionRenewalDate: this.membership.subscriptionRenewalDate,\n          membershipId: this.membership.membership.id,\n          subscriptionPaidBy: this.membership.subscriptionPaidBy?.id,\n          currencyTypeId: this.membership.currencyType?.id,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.membership = {...membershipModel};\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}