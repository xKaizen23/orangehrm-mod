{"ast":null,"code":"import { onBeforeMount, reactive, toRefs } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport ProfileImage from '@/orangehrmBuzzPlugin/components/ProfileImage';\nimport useInfiniteScroll from '@/core/util/composable/useInfiniteScroll';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport { OxdDialog, OxdIcon, OxdSheet, OxdSpinner } from '@ohrm/oxd';\nexport default {\n  name: 'PostStatsModal',\n  components: {\n    'oxd-icon': OxdIcon,\n    'oxd-sheet': OxdSheet,\n    'oxd-dialog': OxdDialog,\n    'profile-image': ProfileImage,\n    'oxd-loading-spinner': OxdSpinner\n  },\n  props: {\n    postId: {\n      type: Number,\n      required: true\n    },\n    type: {\n      type: String,\n      required: true\n    },\n    icon: {\n      type: String,\n      required: true\n    },\n    mobile: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['close'],\n  setup(props, context) {\n    let apiPath;\n    const EMPLOYEE_LIMIT = 10;\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    switch (props.type) {\n      case 'likes':\n        apiPath = `/api/v2/buzz/shares/${props.postId}/likes`;\n        break;\n      case 'shares':\n        apiPath = `/api/v2/buzz/posts/${props.postId}/shares`;\n        break;\n      default:\n        break;\n    }\n    const http = new APIService(window.appGlobal.baseUrl, apiPath);\n    const state = reactive({\n      total: 0,\n      offset: 0,\n      users: [],\n      isLoading: false\n    });\n    const fetchData = () => {\n      state.isLoading = true;\n      http.getAll({\n        limit: EMPLOYEE_LIMIT,\n        offset: state.offset\n      }).then(response => {\n        const {\n          data,\n          meta\n        } = response.data;\n        state.total = meta?.total || 0;\n        if (Array.isArray(data)) {\n          const _data = data.map(user => {\n            const {\n              employee\n            } = user;\n            return {\n              employee,\n              fullName: $tEmpName(employee, {\n                includeMiddle: false,\n                excludePastEmpTag: false\n              })\n            };\n          });\n          state.users = [...state.users, ..._data];\n        }\n      }).finally(() => state.isLoading = false);\n    };\n    useInfiniteScroll(() => {\n      if (state.users.length >= state.total) return;\n      state.offset += EMPLOYEE_LIMIT;\n      fetchData();\n    });\n    onBeforeMount(() => fetchData());\n    const onClose = () => {\n      context.emit('close');\n    };\n    return {\n      onClose,\n      fetchData,\n      ...toRefs(state)\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["onBeforeMount","reactive","toRefs","APIService","ProfileImage","useInfiniteScroll","useEmployeeNameTranslate","OxdDialog","OxdIcon","OxdSheet","OxdSpinner","name","components","props","postId","type","Number","required","String","icon","mobile","Boolean","default","emits","setup","context","apiPath","EMPLOYEE_LIMIT","$tEmpName","http","window","appGlobal","baseUrl","state","total","offset","users","isLoading","fetchData","getAll","limit","then","response","data","meta","Array","isArray","_data","map","user","employee","fullName","includeMiddle","excludePastEmpTag","finally","length","onClose","emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmBuzzPlugin\\components\\PostStatsModal.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-sheet\n    v-if=\"!mobile\"\n    :gutters=\"false\"\n    type=\"white\"\n    class=\"orangehrm-buzz-stats-modal\"\n  >\n    <div\n      v-for=\"user in users\"\n      :key=\"user\"\n      class=\"orangehrm-buzz-stats-modal-employee\"\n    >\n      <profile-image :employee=\"user.employee\"></profile-image>\n      <oxd-text tag=\"p\" class=\"orangehrm-buzz-stats-modal-employee-name\">\n        {{ user.fullName }}\n      </oxd-text>\n    </div>\n    <oxd-loading-spinner v-if=\"isLoading\" class=\"orangehrm-buzz-loader\" />\n  </oxd-sheet>\n  <oxd-dialog v-else class=\"orangehrm-buzz-stats-dialog\" @update:show=\"onClose\">\n    <div class=\"orangehrm-buzz-stats-dialog-header\">\n      <oxd-icon\n        :class=\"{\n          'orangehrm-buzz-stats-dialog-icon': true,\n          '--likes': type === 'likes',\n        }\"\n        :name=\"icon\"\n        :with-container=\"true\"\n      />\n      <oxd-text v-if=\"type === 'shares'\">\n        {{ $t('buzz.n_share', {shareCount: total}) }}\n      </oxd-text>\n      <oxd-text v-if=\"type === 'likes'\">\n        {{ $t('buzz.n_like', {likesCount: total}) }}\n      </oxd-text>\n    </div>\n    <oxd-divider />\n    <div\n      v-for=\"user in users\"\n      :key=\"user\"\n      class=\"orangehrm-buzz-stats-dialog-employee\"\n    >\n      <profile-image :employee=\"user.employee\"></profile-image>\n      <oxd-text tag=\"p\" class=\"orangehrm-buzz-stats-dialog-employee-name\">\n        {{ user.fullName }}\n      </oxd-text>\n    </div>\n    <oxd-loading-spinner v-if=\"isLoading\" class=\"orangehrm-buzz-loader\" />\n  </oxd-dialog>\n</template>\n\n<script>\nimport {onBeforeMount, reactive, toRefs} from 'vue';\nimport {APIService} from '@/core/util/services/api.service';\nimport ProfileImage from '@/orangehrmBuzzPlugin/components/ProfileImage';\nimport useInfiniteScroll from '@/core/util/composable/useInfiniteScroll';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport {OxdDialog, OxdIcon, OxdSheet, OxdSpinner} from '@ohrm/oxd';\n\nexport default {\n  name: 'PostStatsModal',\n\n  components: {\n    'oxd-icon': OxdIcon,\n    'oxd-sheet': OxdSheet,\n    'oxd-dialog': OxdDialog,\n    'profile-image': ProfileImage,\n    'oxd-loading-spinner': OxdSpinner,\n  },\n\n  props: {\n    postId: {\n      type: Number,\n      required: true,\n    },\n    type: {\n      type: String,\n      required: true,\n    },\n    icon: {\n      type: String,\n      required: true,\n    },\n    mobile: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: ['close'],\n\n  setup(props, context) {\n    let apiPath;\n    const EMPLOYEE_LIMIT = 10;\n    const {$tEmpName} = useEmployeeNameTranslate();\n\n    switch (props.type) {\n      case 'likes':\n        apiPath = `/api/v2/buzz/shares/${props.postId}/likes`;\n        break;\n\n      case 'shares':\n        apiPath = `/api/v2/buzz/posts/${props.postId}/shares`;\n        break;\n\n      default:\n        break;\n    }\n\n    const http = new APIService(window.appGlobal.baseUrl, apiPath);\n\n    const state = reactive({\n      total: 0,\n      offset: 0,\n      users: [],\n      isLoading: false,\n    });\n\n    const fetchData = () => {\n      state.isLoading = true;\n      http\n        .getAll({\n          limit: EMPLOYEE_LIMIT,\n          offset: state.offset,\n        })\n        .then((response) => {\n          const {data, meta} = response.data;\n          state.total = meta?.total || 0;\n          if (Array.isArray(data)) {\n            const _data = data.map((user) => {\n              const {employee} = user;\n              return {\n                employee,\n                fullName: $tEmpName(employee, {\n                  includeMiddle: false,\n                  excludePastEmpTag: false,\n                }),\n              };\n            });\n            state.users = [...state.users, ..._data];\n          }\n        })\n        .finally(() => (state.isLoading = false));\n    };\n\n    useInfiniteScroll(() => {\n      if (state.users.length >= state.total) return;\n      state.offset += EMPLOYEE_LIMIT;\n      fetchData();\n    });\n\n    onBeforeMount(() => fetchData());\n\n    const onClose = () => {\n      context.emit('close');\n    };\n\n    return {\n      onClose,\n      fetchData,\n      ...toRefs(state),\n    };\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped src=\"./post-stats-modal.scss\"></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}