{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useLocale from '@/core/util/composable/useLocale';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport { navigate } from '@/core/util/helper/navigation';\nimport usei18n from '@/core/util/composable/usei18n';\nconst ACTION_ASSIGNED_VACANCY = 1;\nconst ACTION_SHORTLISTED = 2;\nconst ACTION_REJECTED = 3;\nconst ACTION_INTERVIEW_SCHEDULED = 4;\nconst ACTION_INTERVIEW_PASSED = 5;\nconst ACTION_INTERVIEW_FAILED = 6;\nconst ACTION_JOB_OFFERED = 7;\nconst ACTION_OFFER_DECLINED = 8;\nconst ACTION_HIRED = 9;\nconst ACTION_REMOVED = 15;\nconst ACTION_ADDED = 16;\nconst ACTION_APPLIED = 17;\nexport default {\n  name: 'HistoryTable',\n  props: {\n    candidate: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      $tEmpName\n    } = useEmployeeNameTranslate();\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/recruitment/candidates/${props.candidate?.id}/history`);\n    const historyDataNormalizer = data => {\n      const candidateName = `${props.candidate?.firstName} ${props.candidate?.middleName || ''} ${props.candidate?.lastName}`;\n      return data.map(item => {\n        let description = null;\n        const interview = {\n          name: '',\n          data: '',\n          interviewers: ''\n        };\n        const performerName = $tEmpName(item.performedBy, {\n          includeMiddle: true,\n          excludePastEmpTag: false\n        });\n        if (item.interview) {\n          interview.name = item.interview.name;\n          interview.date = item.interview.date;\n          const interviewers = item.interview.interviewers.map(interviewer => {\n            return $tEmpName(interviewer, {\n              includeMiddle: true,\n              excludePastEmpTag: false\n            });\n          });\n          interview.interviewers = interviewers.join(', ');\n        }\n        switch (item?.action.id) {\n          case ACTION_APPLIED:\n            description = $t('recruitment.candidate_applied_for_the_vacancy', {\n              candidate: candidateName,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_ADDED:\n            description = $t('recruitment.employee_added_candidate', {\n              employee: performerName,\n              candidate: candidateName\n            });\n            break;\n          case ACTION_ASSIGNED_VACANCY:\n            description = $t('recruitment.employee_assigned_vacancy_to_candidate', {\n              employee: performerName,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_SHORTLISTED:\n            description = $t('recruitment.candidate_shortlisted_for_vacancy_by_employee', {\n              vacancy: item.vacancyName,\n              employee: performerName\n            });\n            break;\n          case ACTION_REJECTED:\n            description = $t('recruitment.employee_rejected_the_candidate', {\n              employee: performerName,\n              candidate: candidateName,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_INTERVIEW_SCHEDULED:\n            description = $t('recruitment.employee_schedule_interview_with_interviewers', {\n              employee: performerName,\n              interview: interview.name,\n              interviewDate: interview.date,\n              interviewers: interview.interviewers,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_INTERVIEW_PASSED:\n            description = $t('recruitment.employee_marked_interveiw_passed', {\n              employee: performerName,\n              interview: interview.name,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_INTERVIEW_FAILED:\n            description = $t('recruitment.employee_marked_interveiw_failed', {\n              employee: performerName,\n              interview: interview.name,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_JOB_OFFERED:\n            description = $t('recruitment.employee_offered_the_job', {\n              employee: performerName,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_OFFER_DECLINED:\n            description = $t('recruitment.employee_marked_the_offer_declined', {\n              employee: performerName,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_HIRED:\n            description = $t('recruitment.employee_hired_the_candidate', {\n              employee: performerName,\n              candidate: candidateName,\n              vacancy: item.vacancyName\n            });\n            break;\n          case ACTION_REMOVED:\n            description = $t('recruitment.employee_removed_candidate_from_vacancy', {\n              employee: performerName,\n              candidate: candidateName,\n              vacancy: item.vacancyName\n            });\n            break;\n        }\n        return {\n          ...item,\n          description: description,\n          performedDate: formatDate(parseDate(item.performedDate), jsDateFormat, {\n            locale\n          })\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: historyDataNormalizer\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'performedDate',\n        slot: 'title',\n        title: this.$t('recruitment.performed_date'),\n        style: {\n          flex: '20%'\n        }\n      }, {\n        name: 'description',\n        title: this.$t('general.description'),\n        style: {\n          flex: '65%'\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: '15%'\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellRenderer: this.cellRenderer\n      }]\n    };\n  },\n  watch: {\n    candidate() {\n      this.execQuery();\n    }\n  },\n  methods: {\n    cellRenderer(...[,,, row]) {\n      const cellConfig = {};\n      if (row.action?.id != ACTION_ASSIGNED_VACANCY && row.action?.id != ACTION_ADDED && row.action?.id != ACTION_REMOVED && row.action?.id != ACTION_APPLIED && row.editable) {\n        cellConfig.edit = {\n          onClick: this.onClickEdit,\n          props: {\n            name: 'pencil-fill'\n          }\n        };\n      }\n      if ((row.action?.id === ACTION_INTERVIEW_SCHEDULED || row.action?.id === ACTION_INTERVIEW_PASSED || row.action?.id === ACTION_INTERVIEW_FAILED) && row.editable) {\n        cellConfig.attachment = {\n          onClick: this.onClickAttachment,\n          props: {\n            name: 'paperclip'\n          }\n        };\n      }\n      return {\n        props: {\n          header: {\n            cellConfig\n          }\n        }\n      };\n    },\n    onClickEdit(item) {\n      navigate('/recruitment/candidateHistory/{candidateId}/{historyId}', {\n        candidateId: this.candidate.id,\n        historyId: item.id\n      });\n    },\n    onClickAttachment(item) {\n      navigate('/recruitment/interviewAttachments/{interviewId}', {\n        interviewId: item.interview?.id\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["APIService","usePaginate","useLocale","useDateFormat","useEmployeeNameTranslate","formatDate","parseDate","navigate","usei18n","ACTION_ASSIGNED_VACANCY","ACTION_SHORTLISTED","ACTION_REJECTED","ACTION_INTERVIEW_SCHEDULED","ACTION_INTERVIEW_PASSED","ACTION_INTERVIEW_FAILED","ACTION_JOB_OFFERED","ACTION_OFFER_DECLINED","ACTION_HIRED","ACTION_REMOVED","ACTION_ADDED","ACTION_APPLIED","name","props","candidate","type","Object","required","setup","$t","locale","jsDateFormat","$tEmpName","http","window","appGlobal","baseUrl","id","historyDataNormalizer","data","candidateName","firstName","middleName","lastName","map","item","description","interview","interviewers","performerName","performedBy","includeMiddle","excludePastEmpTag","date","interviewer","join","action","vacancy","vacancyName","employee","interviewDate","performedDate","showPaginator","currentPage","total","pages","pageSize","response","isLoading","execQuery","normalizer","items","headers","slot","title","style","flex","cellType","cellRenderer","watch","methods","row","cellConfig","editable","edit","onClick","onClickEdit","attachment","onClickAttachment","header","candidateId","historyId","interviewId"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmRecruitmentPlugin\\components\\HistoryTable.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-paper-container\">\n    <div class=\"orangehrm-header-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('recruitment.candidate_history') }}\n      </oxd-text>\n    </div>\n    <table-header\n      :selected=\"0\"\n      :total=\"total\"\n      :loading=\"isLoading\"\n    ></table-header>\n    <div class=\"orangehrm-container\">\n      <oxd-card-table\n        :headers=\"headers\"\n        :items=\"items?.data\"\n        :clickable=\"false\"\n        :selectable=\"false\"\n        :loading=\"isLoading\"\n        row-decorator=\"oxd-table-decorator-card\"\n      />\n    </div>\n    <div class=\"orangehrm-bottom-container\">\n      <oxd-pagination\n        v-if=\"showPaginator\"\n        v-model:current=\"currentPage\"\n        :length=\"pages\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport {APIService} from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useLocale from '@/core/util/composable/useLocale';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport {formatDate, parseDate} from '@/core/util/helper/datefns';\nimport {navigate} from '@/core/util/helper/navigation';\nimport usei18n from '@/core/util/composable/usei18n';\n\nconst ACTION_ASSIGNED_VACANCY = 1;\nconst ACTION_SHORTLISTED = 2;\nconst ACTION_REJECTED = 3;\nconst ACTION_INTERVIEW_SCHEDULED = 4;\nconst ACTION_INTERVIEW_PASSED = 5;\nconst ACTION_INTERVIEW_FAILED = 6;\nconst ACTION_JOB_OFFERED = 7;\nconst ACTION_OFFER_DECLINED = 8;\nconst ACTION_HIRED = 9;\nconst ACTION_REMOVED = 15;\nconst ACTION_ADDED = 16;\nconst ACTION_APPLIED = 17;\n\nexport default {\n  name: 'HistoryTable',\n  props: {\n    candidate: {\n      type: Object,\n      required: true,\n    },\n  },\n  setup(props) {\n    const {$t} = usei18n();\n    const {locale} = useLocale();\n    const {jsDateFormat} = useDateFormat();\n    const {$tEmpName} = useEmployeeNameTranslate();\n\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/recruitment/candidates/${props.candidate?.id}/history`,\n    );\n\n    const historyDataNormalizer = (data) => {\n      const candidateName = `${props.candidate?.firstName} ${\n        props.candidate?.middleName || ''\n      } ${props.candidate?.lastName}`;\n      return data.map((item) => {\n        let description = null;\n        const interview = {\n          name: '',\n          data: '',\n          interviewers: '',\n        };\n        const performerName = $tEmpName(item.performedBy, {\n          includeMiddle: true,\n          excludePastEmpTag: false,\n        });\n        if (item.interview) {\n          interview.name = item.interview.name;\n          interview.date = item.interview.date;\n          const interviewers = item.interview.interviewers.map(\n            (interviewer) => {\n              return $tEmpName(interviewer, {\n                includeMiddle: true,\n                excludePastEmpTag: false,\n              });\n            },\n          );\n          interview.interviewers = interviewers.join(', ');\n        }\n\n        switch (item?.action.id) {\n          case ACTION_APPLIED:\n            description = $t('recruitment.candidate_applied_for_the_vacancy', {\n              candidate: candidateName,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_ADDED:\n            description = $t('recruitment.employee_added_candidate', {\n              employee: performerName,\n              candidate: candidateName,\n            });\n            break;\n          case ACTION_ASSIGNED_VACANCY:\n            description = $t(\n              'recruitment.employee_assigned_vacancy_to_candidate',\n              {\n                employee: performerName,\n                vacancy: item.vacancyName,\n              },\n            );\n            break;\n          case ACTION_SHORTLISTED:\n            description = $t(\n              'recruitment.candidate_shortlisted_for_vacancy_by_employee',\n              {\n                vacancy: item.vacancyName,\n                employee: performerName,\n              },\n            );\n            break;\n          case ACTION_REJECTED:\n            description = $t('recruitment.employee_rejected_the_candidate', {\n              employee: performerName,\n              candidate: candidateName,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_INTERVIEW_SCHEDULED:\n            description = $t(\n              'recruitment.employee_schedule_interview_with_interviewers',\n              {\n                employee: performerName,\n                interview: interview.name,\n                interviewDate: interview.date,\n                interviewers: interview.interviewers,\n                vacancy: item.vacancyName,\n              },\n            );\n            break;\n          case ACTION_INTERVIEW_PASSED:\n            description = $t('recruitment.employee_marked_interveiw_passed', {\n              employee: performerName,\n              interview: interview.name,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_INTERVIEW_FAILED:\n            description = $t('recruitment.employee_marked_interveiw_failed', {\n              employee: performerName,\n              interview: interview.name,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_JOB_OFFERED:\n            description = $t('recruitment.employee_offered_the_job', {\n              employee: performerName,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_OFFER_DECLINED:\n            description = $t('recruitment.employee_marked_the_offer_declined', {\n              employee: performerName,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_HIRED:\n            description = $t('recruitment.employee_hired_the_candidate', {\n              employee: performerName,\n              candidate: candidateName,\n              vacancy: item.vacancyName,\n            });\n            break;\n          case ACTION_REMOVED:\n            description = $t(\n              'recruitment.employee_removed_candidate_from_vacancy',\n              {\n                employee: performerName,\n                candidate: candidateName,\n                vacancy: item.vacancyName,\n              },\n            );\n            break;\n        }\n\n        return {\n          ...item,\n          description: description,\n          performedDate: formatDate(\n            parseDate(item.performedDate),\n            jsDateFormat,\n            {\n              locale,\n            },\n          ),\n        };\n      });\n    };\n\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery,\n    } = usePaginate(http, {normalizer: historyDataNormalizer});\n\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n    };\n  },\n\n  data() {\n    return {\n      headers: [\n        {\n          name: 'performedDate',\n          slot: 'title',\n          title: this.$t('recruitment.performed_date'),\n          style: {flex: '20%'},\n        },\n        {\n          name: 'description',\n          title: this.$t('general.description'),\n          style: {flex: '65%'},\n        },\n        {\n          name: 'actions',\n          slot: 'action',\n          title: this.$t('general.actions'),\n          style: {flex: '15%'},\n          cellType: 'oxd-table-cell-actions',\n          cellRenderer: this.cellRenderer,\n        },\n      ],\n    };\n  },\n  watch: {\n    candidate() {\n      this.execQuery();\n    },\n  },\n  methods: {\n    cellRenderer(...[, , , row]) {\n      const cellConfig = {};\n\n      if (\n        row.action?.id != ACTION_ASSIGNED_VACANCY &&\n        row.action?.id != ACTION_ADDED &&\n        row.action?.id != ACTION_REMOVED &&\n        row.action?.id != ACTION_APPLIED &&\n        row.editable\n      ) {\n        cellConfig.edit = {\n          onClick: this.onClickEdit,\n          props: {\n            name: 'pencil-fill',\n          },\n        };\n      }\n\n      if (\n        (row.action?.id === ACTION_INTERVIEW_SCHEDULED ||\n          row.action?.id === ACTION_INTERVIEW_PASSED ||\n          row.action?.id === ACTION_INTERVIEW_FAILED) &&\n        row.editable\n      ) {\n        cellConfig.attachment = {\n          onClick: this.onClickAttachment,\n          props: {\n            name: 'paperclip',\n          },\n        };\n      }\n\n      return {\n        props: {\n          header: {\n            cellConfig,\n          },\n        },\n      };\n    },\n\n    onClickEdit(item) {\n      navigate('/recruitment/candidateHistory/{candidateId}/{historyId}', {\n        candidateId: this.candidate.id,\n        historyId: item.id,\n      });\n    },\n\n    onClickAttachment(item) {\n      navigate('/recruitment/interviewAttachments/{interviewId}', {\n        interviewId: item.interview?.id,\n      });\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.orangehrm-card-container {\n  padding: 1.2rem 0;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}