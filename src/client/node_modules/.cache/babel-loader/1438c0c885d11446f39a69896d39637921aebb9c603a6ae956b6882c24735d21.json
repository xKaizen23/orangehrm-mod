{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { navigate } from '@/core/util/helper/navigation';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog.vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport ExpenseTypeAutocomplete from '@/orangehrmClaimPlugin/components/ExpenseTypeAutocomplete.vue';\nconst defaultFilters = {\n  name: '',\n  status: null\n};\nconst defaultSortOrder = {\n  'expenseType.name': 'ASC',\n  'expenseType.status': 'DESC'\n};\nexport default {\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'expense-type-autocomplete': ExpenseTypeAutocomplete\n  },\n  setup() {\n    const filters = ref({\n      ...defaultFilters\n    });\n    const {\n      $t\n    } = usei18n();\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilters = computed(() => {\n      return {\n        expenseTypeId: typeof filters.value.name === 'object' ? filters.value.name.id : null,\n        name: typeof filters.value.name === 'string' ? filters.value.name : null,\n        status: filters.value.status ? filters.value.status?.id === 1 : null,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value\n      };\n    });\n    const expenseTypeDataNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          name: item.name,\n          description: item.description,\n          status: item.status ? $t('general.active') : $t('performance.inactive')\n        };\n      });\n    };\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/claim/expenses/types');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: expenseTypeDataNormalizer,\n      query: serializedFilters\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      response,\n      filters,\n      sortDefinition\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'name',\n        title: this.$t('general.name'),\n        slot: 'title',\n        sortField: 'expenseType.name',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        sortField: 'expenseType.status',\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'actions',\n        title: this.$t('general.actions'),\n        slot: 'action',\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      checkedItems: [],\n      ExpenseTypeStatuses: [{\n        id: 1,\n        label: this.$t('general.active')\n      }, {\n        id: 0,\n        label: this.$t('performance.inactive')\n      }]\n    };\n  },\n  methods: {\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.filterItems();\n    },\n    onClickAdd() {\n      navigate('/claim/saveExpense');\n    },\n    onClickDeleteSelected() {\n      const ids = [];\n      this.checkedItems.forEach(index => {\n        ids.push(this.items?.data[index].id);\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    onClickEdit(item) {\n      navigate('/claim/saveExpense/{id}', {\n        id: item.id\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["ref","computed","APIService","usePaginate","useSort","navigate","DeleteConfirmationDialog","usei18n","ExpenseTypeAutocomplete","defaultFilters","name","status","defaultSortOrder","components","setup","filters","$t","sortDefinition","sortField","sortOrder","onSort","serializedFilters","expenseTypeId","value","id","expenseTypeDataNormalizer","data","map","item","description","http","window","appGlobal","baseUrl","showPaginator","currentPage","total","pages","pageSize","response","isLoading","execQuery","normalizer","query","items","headers","title","slot","style","flex","cellType","cellConfig","delete","onClick","onClickDelete","component","props","edit","onClickEdit","checkedItems","ExpenseTypeStatuses","label","methods","resetDataTable","filterItems","onClickReset","onClickAdd","onClickDeleteSelected","ids","forEach","index","push","$refs","deleteDialog","showDialog","then","confirmation","deleteItems","Array","deleteAll","$toast","deleteSuccess"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmClaimPlugin\\pages\\claimExpenseTypes\\ClaimExpenseType.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-table-filter :filter-title=\"$t('claim.expense_types')\">\n    <oxd-form @submit-valid=\"filterItems\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <expense-type-autocomplete\n              v-model=\"filters.name\"\n              :label=\"$t('general.name')\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"filters.status\"\n              type=\"select\"\n              :label=\"$t('general.status')\"\n              :options=\"ExpenseTypeStatuses\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n      <oxd-divider />\n      <oxd-form-actions>\n        <oxd-button\n          display-type=\"ghost\"\n          :label=\"$t('general.reset')\"\n          @click=\"onClickReset\"\n        />\n        <oxd-button\n          class=\"orangehrm-left-space\"\n          display-type=\"secondary\"\n          :label=\"$t('general.search')\"\n          type=\"submit\"\n        />\n      </oxd-form-actions>\n    </oxd-form>\n  </oxd-table-filter>\n  <br />\n  <div class=\"orangehrm-paper-container\">\n    <div class=\"orangehrm-header-container\">\n      <oxd-button\n        :label=\"$t('general.add')\"\n        icon-name=\"plus\"\n        display-type=\"secondary\"\n        @click=\"onClickAdd\"\n      />\n    </div>\n    <table-header\n      :total=\"total\"\n      :loading=\"isLoading\"\n      :selected=\"checkedItems.length\"\n      @delete=\"onClickDeleteSelected\"\n    />\n    <div class=\"orangehrm-container\">\n      <oxd-card-table\n        v-model:selected=\"checkedItems\"\n        v-model:order=\"sortDefinition\"\n        :items=\"items.data\"\n        :headers=\"headers\"\n        :selectable=\"true\"\n        :clickable=\"false\"\n        :loading=\"isLoading\"\n        row-decorator=\"oxd-table-decorator-card\"\n      />\n    </div>\n    <div class=\"orangehrm-bottom-container\">\n      <oxd-pagination\n        v-if=\"showPaginator\"\n        v-model:current=\"currentPage\"\n        :length=\"pages\"\n      />\n    </div>\n  </div>\n  <delete-confirmation ref=\"deleteDialog\"></delete-confirmation>\n</template>\n\n<script>\nimport {ref, computed} from 'vue';\nimport {APIService} from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport {navigate} from '@/core/util/helper/navigation';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog.vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport ExpenseTypeAutocomplete from '@/orangehrmClaimPlugin/components/ExpenseTypeAutocomplete.vue';\n\nconst defaultFilters = {\n  name: '',\n  status: null,\n};\n\nconst defaultSortOrder = {\n  'expenseType.name': 'ASC',\n  'expenseType.status': 'DESC',\n};\n\nexport default {\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n    'expense-type-autocomplete': ExpenseTypeAutocomplete,\n  },\n  setup() {\n    const filters = ref({...defaultFilters});\n    const {$t} = usei18n();\n    const {sortDefinition, sortField, sortOrder, onSort} = useSort({\n      sortDefinition: defaultSortOrder,\n    });\n\n    const serializedFilters = computed(() => {\n      return {\n        expenseTypeId:\n          typeof filters.value.name === 'object' ? filters.value.name.id : null,\n        name:\n          typeof filters.value.name === 'string' ? filters.value.name : null,\n        status: filters.value.status ? filters.value.status?.id === 1 : null,\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n      };\n    });\n\n    const expenseTypeDataNormalizer = (data) => {\n      return data.map((item) => {\n        return {\n          id: item.id,\n          name: item.name,\n          description: item.description,\n          status: item.status\n            ? $t('general.active')\n            : $t('performance.inactive'),\n        };\n      });\n    };\n\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/claim/expenses/types',\n    );\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery,\n    } = usePaginate(http, {\n      normalizer: expenseTypeDataNormalizer,\n      query: serializedFilters,\n    });\n    onSort(execQuery);\n\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      response,\n      filters,\n      sortDefinition,\n    };\n  },\n  data() {\n    return {\n      headers: [\n        {\n          name: 'name',\n          title: this.$t('general.name'),\n          slot: 'title',\n          sortField: 'expenseType.name',\n          style: {flex: 3},\n        },\n        {\n          name: 'status',\n          title: this.$t('general.status'),\n          sortField: 'expenseType.status',\n          style: {flex: 2},\n        },\n        {\n          name: 'actions',\n          title: this.$t('general.actions'),\n          slot: 'action',\n          style: {flex: 1},\n          cellType: 'oxd-table-cell-actions',\n          cellConfig: {\n            delete: {\n              onClick: this.onClickDelete,\n              component: 'oxd-icon-button',\n              props: {\n                name: 'trash',\n              },\n            },\n            edit: {\n              onClick: this.onClickEdit,\n              props: {\n                name: 'pencil-fill',\n              },\n            },\n          },\n        },\n      ],\n      checkedItems: [],\n      ExpenseTypeStatuses: [\n        {id: 1, label: this.$t('general.active')},\n        {id: 0, label: this.$t('performance.inactive')},\n      ],\n    };\n  },\n\n  methods: {\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {...defaultFilters};\n      this.filterItems();\n    },\n    onClickAdd() {\n      navigate('/claim/saveExpense');\n    },\n    onClickDeleteSelected() {\n      const ids = [];\n      this.checkedItems.forEach((index) => {\n        ids.push(this.items?.data[index].id);\n      });\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http\n          .deleteAll({\n            ids: items,\n          })\n          .then(() => {\n            return this.$toast.deleteSuccess();\n          })\n          .then(() => {\n            this.isLoading = false;\n            this.resetDataTable();\n          });\n      }\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    onClickEdit(item) {\n      navigate('/claim/saveExpense/{id}', {id: item.id});\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}