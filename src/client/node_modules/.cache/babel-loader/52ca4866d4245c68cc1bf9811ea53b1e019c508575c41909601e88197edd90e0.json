{"ast":null,"code":"import { maxFileSize, shouldNotExceedCharLength, validFileTypes } from '@ohrm/core/util/validation/rules';\nconst attachmentModel = {\n  attachment: null,\n  description: ''\n};\nexport default {\n  name: 'EditAttachment',\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    data: {\n      type: Object,\n      required: true\n    },\n    allowedFileTypes: {\n      type: Array,\n      required: true\n    },\n    maxFileSize: {\n      type: Number,\n      required: true\n    }\n  },\n  emits: ['close'],\n  data() {\n    return {\n      isLoading: false,\n      currentFile: '',\n      attachment: {\n        ...attachmentModel\n      },\n      rules: {\n        description: [shouldNotExceedCharLength(200)],\n        attachment: [maxFileSize(this.maxFileSize), validFileTypes(this.allowedFileTypes)]\n      }\n    };\n  },\n  computed: {\n    formattedFileSize() {\n      return Math.round(this.maxFileSize / (1024 * 1024) * 100) / 100;\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.data.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.currentFile = data.filename;\n      this.attachment.description = data.description;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.data.id, {\n        ...this.attachment\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.attachment = {\n          ...attachmentModel\n        };\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"AAsFA,SACEA,WAAW,EACXC,yBAAyB,EACzBC,cAAc,QACT,kCAAkC;AACzC,MAAMC,eAAc,GAAI;EACtBC,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAE;AACf,CAAC;AAED,eAAe;EACbC,IAAI,EAAE,gBAAgB;EAEtBC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,IAAI,EAAE;MACJH,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDE,gBAAgB,EAAE;MAChBJ,IAAI,EAAEK,KAAK;MACXH,QAAQ,EAAE;IACZ,CAAC;IACDX,WAAW,EAAE;MACXS,IAAI,EAAEM,MAAM;MACZJ,QAAQ,EAAE;IACZ;EACF,CAAC;EAEDK,KAAK,EAAE,CAAC,OAAO,CAAC;EAEhBJ,IAAI,GAAG;IACL,OAAO;MACLK,SAAS,EAAE,KAAK;MAChBC,WAAW,EAAE,EAAE;MACfd,UAAU,EAAE;QACV,GAAGD;MACL,CAAC;MACDgB,KAAK,EAAE;QACLd,WAAW,EAAE,CAACJ,yBAAyB,CAAC,GAAG,CAAC,CAAC;QAC7CG,UAAU,EAAE,CACVJ,WAAW,CAAC,IAAI,CAACA,WAAW,CAAC,EAC7BE,cAAc,CAAC,IAAI,CAACW,gBAAgB,CAAC;MAEzC;IACF,CAAC;EACH,CAAC;EAEDO,QAAQ,EAAE;IACRC,iBAAiB,GAAG;MAClB,OAAOC,IAAI,CAACC,KAAK,CAAE,IAAI,CAACvB,WAAU,IAAK,IAAG,GAAI,IAAI,CAAC,GAAI,GAAG,IAAI,GAAG;IACnE;EACF,CAAC;EAEDwB,WAAW,GAAG;IACZ,IAAI,CAACP,SAAQ,GAAI,IAAI;IACrB,IAAI,CAACT,IAAG,CACLiB,GAAG,CAAC,IAAI,CAACb,IAAI,CAACc,EAAE,EAChBC,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAAChB;MAAI,IAAIgB,QAAQ,CAAChB,IAAI;MAC5B,IAAI,CAACM,WAAU,GAAIN,IAAI,CAACiB,QAAQ;MAChC,IAAI,CAACzB,UAAU,CAACC,WAAU,GAAIO,IAAI,CAACP,WAAW;IAChD,CAAC,EACAyB,OAAO,CAAC,MAAM;MACb,IAAI,CAACb,SAAQ,GAAI,KAAK;IACxB,CAAC,CAAC;EACN,CAAC;EAEDc,OAAO,EAAE;IACPC,MAAM,GAAG;MACP,IAAI,CAACf,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACT,IAAG,CACLyB,MAAM,CAAC,IAAI,CAACrB,IAAI,CAACc,EAAE,EAAE;QAAC,GAAG,IAAI,CAACtB;MAAU,CAAC,EACzCuB,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACO,MAAM,CAACC,aAAa,EAAE;MACpC,CAAC,EACAR,IAAI,CAAC,MAAM;QACV,IAAI,CAACvB,UAAS,GAAI;UAAC,GAAGD;QAAe,CAAC;QACtC,IAAI,CAACiC,QAAQ,EAAE;MACjB,CAAC,CAAC;IACN,CAAC;IACDA,QAAQ,GAAG;MACT,IAAI,CAACC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;IAC3B;EACF;AACF,CAAC","names":["maxFileSize","shouldNotExceedCharLength","validFileTypes","attachmentModel","attachment","description","name","props","http","type","Object","required","data","allowedFileTypes","Array","Number","emits","isLoading","currentFile","rules","computed","formattedFileSize","Math","round","beforeMount","get","id","then","response","filename","finally","methods","onSave","update","$toast","updateSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\EditAttachment.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-card-container\">\n    <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n      {{ $t('general.edit_attachment') }}\n    </oxd-text>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-group :label=\"$t('general.current_file')\">\n              <oxd-text tag=\"p\">\n                {{ currentFile }}\n              </oxd-text>\n            </oxd-input-group>\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"attachment.attachment\"\n              type=\"file\"\n              :label=\"$t('general.replace_with')\"\n              :button-label=\"$t('general.browse')\"\n              :rules=\"rules.attachment\"\n              :placeholder=\"$t('general.no_file_selected')\"\n            />\n            <oxd-text class=\"orangehrm-input-hint\" tag=\"p\">\n              {{ $t('general.accepts_up_to_n_mb', {count: formattedFileSize}) }}\n            </oxd-text>\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-row>\n        <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"attachment.description\"\n              type=\"textarea\"\n              :label=\"$t('general.comment')\"\n              :placeholder=\"$t('general.type_comment_here')\"\n              :rules=\"rules.description\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-divider />\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </div>\n</template>\n\n<script>\nimport {\n  maxFileSize,\n  shouldNotExceedCharLength,\n  validFileTypes,\n} from '@ohrm/core/util/validation/rules';\nconst attachmentModel = {\n  attachment: null,\n  description: '',\n};\n\nexport default {\n  name: 'EditAttachment',\n\n  props: {\n    http: {\n      type: Object,\n      required: true,\n    },\n    data: {\n      type: Object,\n      required: true,\n    },\n    allowedFileTypes: {\n      type: Array,\n      required: true,\n    },\n    maxFileSize: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  emits: ['close'],\n\n  data() {\n    return {\n      isLoading: false,\n      currentFile: '',\n      attachment: {\n        ...attachmentModel,\n      },\n      rules: {\n        description: [shouldNotExceedCharLength(200)],\n        attachment: [\n          maxFileSize(this.maxFileSize),\n          validFileTypes(this.allowedFileTypes),\n        ],\n      },\n    };\n  },\n\n  computed: {\n    formattedFileSize() {\n      return Math.round((this.maxFileSize / (1024 * 1024)) * 100) / 100;\n    },\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.data.id)\n      .then((response) => {\n        const {data} = response.data;\n        this.currentFile = data.filename;\n        this.attachment.description = data.description;\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.data.id, {...this.attachment})\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.attachment = {...attachmentModel};\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}