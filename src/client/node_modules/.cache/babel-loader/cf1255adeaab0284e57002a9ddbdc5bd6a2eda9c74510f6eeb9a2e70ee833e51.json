{"ast":null,"code":"import { computed, onBeforeMount, ref, watch } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { CellAdapter, OxdMultilineCell, OxdReportTable } from '@ohrm/oxd';\nexport default {\n  name: 'ReportsTable',\n  components: {\n    'oxd-report-table': OxdReportTable\n  },\n  props: {\n    name: {\n      type: String,\n      required: true\n    },\n    module: {\n      type: String,\n      required: true\n    },\n    prefetch: {\n      type: Boolean,\n      default: false\n    },\n    filters: {\n      type: Object,\n      default: () => ({})\n    },\n    columnCount: {\n      type: Number,\n      default: null,\n      required: false\n    },\n    canFocus: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    range: {\n      type: Boolean,\n      default: false,\n      required: false\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/${props.module}/reports/data`);\n    const headers = ref([]);\n    const colCount = ref(props.columnCount ? props.columnCount : 0);\n    const serializedFilters = computed(() => {\n      return {\n        ...props.filters,\n        name: props.name,\n        _dateFormattingEnabled: true\n      };\n    });\n    const {\n      total,\n      pages,\n      response,\n      isLoading,\n      currentPage,\n      showPaginator,\n      execQuery: fetchTableData\n    } = usePaginate(http, {\n      query: serializedFilters,\n      prefetch: false\n    });\n    const items = computed(() => {\n      const _items = Array.isArray(response.value.data) ? response.value.data : [];\n      return _items.map(item => {\n        let _rows = 0;\n        for (const key in item) {\n          const value = item[key];\n          if (Array.isArray(value) && value.length > _rows) _rows = value.length;\n        }\n        return {\n          ...item,\n          _rows\n        };\n      });\n    });\n    const setupTableHeaders = header => {\n      delete header['size'];\n      const {\n        type,\n        ...rest\n      } = header.cellProperties ?? {};\n      const cellProperties = function ({\n        prop,\n        model\n      }) {\n        const url = model?._url ? model?._url[prop] : undefined;\n        return {\n          ...rest,\n          onClick: url ? () => navigate(url) : undefined\n        };\n      };\n      return {\n        ...header,\n        cellProperties,\n        cellTemplate: type === 'list' ? CellAdapter(OxdMultilineCell) : undefined\n      };\n    };\n    const fetchTableHeaders = async () => {\n      isLoading.value = true;\n      http.request({\n        method: 'GET',\n        url: `/api/v2/${props.module}/reports`,\n        params: {\n          name: serializedFilters.value.name,\n          reportId: serializedFilters.value?.reportId\n        }\n      }).then(response => {\n        const {\n          data,\n          meta\n        } = response.data;\n        headers.value = data.headers.map(header => {\n          if (header?.children && Array.isArray(header.children)) {\n            header.children = header.children.map(child => setupTableHeaders(child));\n            return header;\n          } else {\n            return setupTableHeaders(header);\n          }\n        });\n        if (meta.headers?.columnCount) {\n          colCount.value = meta.headers.columnCount;\n        }\n        isLoading.value = false;\n      });\n    };\n    const generateReport = async () => {\n      if (headers.value.length === 0) await fetchTableHeaders();\n      await fetchTableData();\n    };\n    watch(() => props.name, () => {\n      headers.value = [];\n    });\n    props.prefetch && onBeforeMount(() => generateReport());\n    return {\n      total,\n      pages,\n      items,\n      headers,\n      colCount,\n      response,\n      isLoading,\n      currentPage,\n      showPaginator,\n      generateReport\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["computed","onBeforeMount","ref","watch","APIService","navigate","usePaginate","CellAdapter","OxdMultilineCell","OxdReportTable","name","components","props","type","String","required","module","prefetch","Boolean","default","filters","Object","columnCount","Number","canFocus","range","setup","http","window","appGlobal","baseUrl","headers","colCount","serializedFilters","_dateFormattingEnabled","total","pages","response","isLoading","currentPage","showPaginator","execQuery","fetchTableData","query","items","_items","Array","isArray","value","data","map","item","_rows","key","length","setupTableHeaders","header","rest","cellProperties","prop","model","url","_url","undefined","onClick","cellTemplate","fetchTableHeaders","request","method","params","reportId","then","meta","children","child","generateReport"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\core\\components\\table\\ReportsTable.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <slot :generate-report=\"generateReport\"></slot>\n    <div v-if=\"headers.length !== 0\" class=\"orangehrm-paper-container\">\n      <oxd-report-table\n        :items=\"items\"\n        :headers=\"headers\"\n        :loading=\"isLoading\"\n        :column-count=\"colCount\"\n        :can-focus=\"canFocus\"\n        :range=\"range\"\n      >\n        <template #pagination>\n          <oxd-text class=\"oxd-text--count\" tag=\"span\">\n            {{ $t('general.n_records_found', {count: total}) }}\n          </oxd-text>\n          <oxd-pagination\n            v-if=\"showPaginator\"\n            v-model:current=\"currentPage\"\n            :length=\"pages\"\n          />\n        </template>\n        <template #footer>\n          <oxd-text class=\"oxd-text--footer\" tag=\"span\">\n            <slot name=\"footer\" :data=\"response\"></slot>\n          </oxd-text>\n        </template>\n      </oxd-report-table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {computed, onBeforeMount, ref, watch} from 'vue';\nimport {APIService} from '@/core/util/services/api.service';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport {CellAdapter, OxdMultilineCell, OxdReportTable} from '@ohrm/oxd';\n\nexport default {\n  name: 'ReportsTable',\n\n  components: {\n    'oxd-report-table': OxdReportTable,\n  },\n\n  props: {\n    name: {\n      type: String,\n      required: true,\n    },\n    module: {\n      type: String,\n      required: true,\n    },\n    prefetch: {\n      type: Boolean,\n      default: false,\n    },\n    filters: {\n      type: Object,\n      default: () => ({}),\n    },\n    columnCount: {\n      type: Number,\n      default: null,\n      required: false,\n    },\n    canFocus: {\n      type: Boolean,\n      default: false,\n      required: false,\n    },\n    range: {\n      type: Boolean,\n      default: false,\n      required: false,\n    },\n  },\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/${props.module}/reports/data`,\n    );\n\n    const headers = ref([]);\n    const colCount = ref(props.columnCount ? props.columnCount : 0);\n    const serializedFilters = computed(() => {\n      return {...props.filters, name: props.name, _dateFormattingEnabled: true};\n    });\n\n    const {\n      total,\n      pages,\n      response,\n      isLoading,\n      currentPage,\n      showPaginator,\n      execQuery: fetchTableData,\n    } = usePaginate(http, {\n      query: serializedFilters,\n      prefetch: false,\n    });\n\n    const items = computed(() => {\n      const _items = Array.isArray(response.value.data)\n        ? response.value.data\n        : [];\n      return _items.map((item) => {\n        let _rows = 0;\n        for (const key in item) {\n          const value = item[key];\n          if (Array.isArray(value) && value.length > _rows)\n            _rows = value.length;\n        }\n        return {...item, _rows};\n      });\n    });\n\n    const setupTableHeaders = (header) => {\n      delete header['size'];\n      const {type, ...rest} = header.cellProperties ?? {};\n      const cellProperties = function ({prop, model}) {\n        const url = model?._url ? model?._url[prop] : undefined;\n        return {\n          ...rest,\n          onClick: url ? () => navigate(url) : undefined,\n        };\n      };\n      return {\n        ...header,\n        cellProperties,\n        cellTemplate:\n          type === 'list' ? CellAdapter(OxdMultilineCell) : undefined,\n      };\n    };\n\n    const fetchTableHeaders = async () => {\n      isLoading.value = true;\n      http\n        .request({\n          method: 'GET',\n          url: `/api/v2/${props.module}/reports`,\n          params: {\n            name: serializedFilters.value.name,\n            reportId: serializedFilters.value?.reportId,\n          },\n        })\n        .then((response) => {\n          const {data, meta} = response.data;\n          headers.value = data.headers.map((header) => {\n            if (header?.children && Array.isArray(header.children)) {\n              header.children = header.children.map((child) =>\n                setupTableHeaders(child),\n              );\n              return header;\n            } else {\n              return setupTableHeaders(header);\n            }\n          });\n          if (meta.headers?.columnCount) {\n            colCount.value = meta.headers.columnCount;\n          }\n          isLoading.value = false;\n        });\n    };\n\n    const generateReport = async () => {\n      if (headers.value.length === 0) await fetchTableHeaders();\n      await fetchTableData();\n    };\n\n    watch(\n      () => props.name,\n      () => {\n        headers.value = [];\n      },\n    );\n\n    props.prefetch && onBeforeMount(() => generateReport());\n\n    return {\n      total,\n      pages,\n      items,\n      headers,\n      colCount,\n      response,\n      isLoading,\n      currentPage,\n      showPaginator,\n      generateReport,\n    };\n  },\n};\n</script>\n\n<style src=\"./reports-table.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}