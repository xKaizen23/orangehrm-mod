{"ast":null,"code":"import { APIService } from '@ohrm/core/util/services/api.service';\nimport { required } from '@/core/util/validation/rules';\nimport { navigate } from '@/core/util/helper/navigation';\nimport useLocale from '@/core/util/composable/useLocale';\nconst timeSheetPeriodModel = {\n  startDay: null\n};\nexport default {\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/time/time-sheet-period');\n    const {\n      locale\n    } = useLocale();\n    return {\n      http,\n      locale\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      timeSheetPeriod: {\n        ...timeSheetPeriodModel\n      },\n      rules: {\n        startDay: [required]\n      }\n    };\n  },\n  computed: {\n    days() {\n      return Array(7).fill('').map((...[, index]) => {\n        return {\n          id: index === 0 ? 7 : index,\n          label: this.locale.localize.day(index, {\n            width: 'wide'\n          })\n        };\n      });\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.request({\n      method: 'GET'\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.updateTimeSheetPeriodModel(parseInt(data.startDay));\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'PUT',\n        data: {\n          startDay: this.timeSheetPeriod.startDay?.id\n        }\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        navigate('/time/viewEmployeeTimesheet');\n      });\n    },\n    updateTimeSheetPeriodModel(day) {\n      this.timeSheetPeriod.startDay = this.days.find(d => {\n        return d.id === day;\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAoDA,SAAQA,UAAU,QAAO,sCAAsC;AAC/D,SAAQC,QAAQ,QAAO,8BAA8B;AACrD,SAAQC,QAAQ,QAAO,+BAA+B;AACtD,OAAOC,SAAQ,MAAO,kCAAkC;AAExD,MAAMC,oBAAmB,GAAI;EAC3BC,QAAQ,EAAE;AACZ,CAAC;AAED,eAAe;EACbC,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIP,UAAU,CACzBQ,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,gCAAgC,CACjC;IACD,MAAM;MAACC;IAAM,IAAIR,SAAS,EAAE;IAC5B,OAAO;MACLI,IAAI;MACJI;IACF,CAAC;EACH,CAAC;EACDC,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,eAAe,EAAE;QAAC,GAAGV;MAAoB,CAAC;MAC1CW,KAAK,EAAE;QACLV,QAAQ,EAAE,CAACJ,QAAQ;MACrB;IACF,CAAC;EACH,CAAC;EACDe,QAAQ,EAAE;IACRC,IAAI,GAAG;MACL,OAAOC,KAAK,CAAC,CAAC,EACXC,IAAI,CAAC,EAAE,EACPC,GAAG,CAAC,CAAC,GAAG,GAAGC,KAAK,CAAC,KAAK;QACrB,OAAO;UACLC,EAAE,EAAED,KAAI,KAAM,IAAI,IAAIA,KAAK;UAC3BE,KAAK,EAAE,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAACC,GAAG,CAACJ,KAAK,EAAE;YACrCK,KAAK,EAAE;UACT,CAAC;QACH,CAAC;MACH,CAAC,CAAC;IACN;EACF,CAAC;EACDC,WAAW,GAAG;IACZ,IAAI,CAACd,SAAQ,GAAI,IAAI;IACrB,IAAI,CAACN,IAAG,CACLqB,OAAO,CAAC;MACPC,MAAM,EAAE;IACV,CAAC,EACAC,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAACnB;MAAI,IAAImB,QAAQ,CAACnB,IAAI;MAC5B,IAAI,CAACoB,0BAA0B,CAACC,QAAQ,CAACrB,IAAI,CAACP,QAAQ,CAAC,CAAC;IAC1D,CAAC,EACA6B,OAAO,CAAC,MAAM;MACb,IAAI,CAACrB,SAAQ,GAAI,KAAK;IACxB,CAAC,CAAC;EACN,CAAC;EACDsB,OAAO,EAAE;IACPC,MAAM,GAAG;MACP,IAAI,CAACvB,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACN,IAAG,CACLqB,OAAO,CAAC;QACPC,MAAM,EAAE,KAAK;QACbjB,IAAI,EAAE;UACJP,QAAQ,EAAE,IAAI,CAACS,eAAe,CAACT,QAAQ,EAAEiB;QAC3C;MACF,CAAC,EACAQ,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACO,MAAM,CAACC,WAAW,EAAE;MAClC,CAAC,EACAR,IAAI,CAAC,MAAM;QACV5B,QAAQ,CAAC,6BAA6B,CAAC;MACzC,CAAC,CAAC;IACN,CAAC;IACD8B,0BAA0B,CAACP,GAAG,EAAE;MAC9B,IAAI,CAACX,eAAe,CAACT,QAAO,GAAI,IAAI,CAACY,IAAI,CAACsB,IAAI,CAAEC,CAAC,IAAK;QACpD,OAAOA,CAAC,CAAClB,EAAC,KAAMG,GAAG;MACrB,CAAC,CAAC;IACJ;EACF;AACF,CAAC","names":["APIService","required","navigate","useLocale","timeSheetPeriodModel","startDay","setup","http","window","appGlobal","baseUrl","locale","data","isLoading","timeSheetPeriod","rules","computed","days","Array","fill","map","index","id","label","localize","day","width","beforeMount","request","method","then","response","updateTimeSheetPeriodModel","parseInt","finally","methods","onSave","$toast","saveSuccess","find","d"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmTimePlugin\\pages\\configure\\TimeSheetPeriod.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text class=\"orangehrm-main-title\">\n        {{ $t('time.timesheet_period_config') }}\n      </oxd-text>\n      <oxd-divider />\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"timeSheetPeriod.startDay\"\n                type=\"select\"\n                :label=\"$t('time.add_timesheet_period_config')\"\n                :options=\"days\"\n                :rules=\"rules.startDay\"\n                required\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport {required} from '@/core/util/validation/rules';\nimport {navigate} from '@/core/util/helper/navigation';\nimport useLocale from '@/core/util/composable/useLocale';\n\nconst timeSheetPeriodModel = {\n  startDay: null,\n};\n\nexport default {\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/time/time-sheet-period',\n    );\n    const {locale} = useLocale();\n    return {\n      http,\n      locale,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      timeSheetPeriod: {...timeSheetPeriodModel},\n      rules: {\n        startDay: [required],\n      },\n    };\n  },\n  computed: {\n    days() {\n      return Array(7)\n        .fill('')\n        .map((...[, index]) => {\n          return {\n            id: index === 0 ? 7 : index,\n            label: this.locale.localize.day(index, {\n              width: 'wide',\n            }),\n          };\n        });\n    },\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .request({\n        method: 'GET',\n      })\n      .then((response) => {\n        const {data} = response.data;\n        this.updateTimeSheetPeriodModel(parseInt(data.startDay));\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .request({\n          method: 'PUT',\n          data: {\n            startDay: this.timeSheetPeriod.startDay?.id,\n          },\n        })\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          navigate('/time/viewEmployeeTimesheet');\n        });\n    },\n    updateTimeSheetPeriodModel(day) {\n      this.timeSheetPeriod.startDay = this.days.find((d) => {\n        return d.id === day;\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}