{"ast":null,"code":"import { APIService } from '@ohrm/core/util/services/api.service';\nexport default {\n  name: 'CandidateAutocomplete',\n  props: {\n    params: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/recruitment/candidates');\n    return {\n      http\n    };\n  },\n  methods: {\n    async loadCandidates(serachParam) {\n      return new Promise(resolve => {\n        if (serachParam.trim()) {\n          this.http.getAll({\n            candidateName: serachParam.trim(),\n            ...this.params\n          }).then(({\n            data\n          }) => {\n            resolve(data.data.map(candidate => {\n              return {\n                id: candidate.id,\n                label: `${candidate.firstName} ${candidate.middleName || ''} ${candidate.lastName}`,\n                _candidate: candidate\n              };\n            }));\n          });\n        } else {\n          resolve([]);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAiCA,SAAQA,UAAU,QAAO,sCAAsC;AAC/D,eAAe;EACbC,IAAI,EAAE,uBAAuB;EAC7BC,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE,OAAO,CAAC,CAAC;IACpB;EACF,CAAC;EACDC,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIR,UAAU,CACzBS,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,gCAAgC,CACjC;IACD,OAAO;MACLH;IACF,CAAC;EACH,CAAC;EACDI,OAAO,EAAE;IACP,MAAMC,cAAc,CAACC,WAAW,EAAE;MAChC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;QAC9B,IAAIF,WAAW,CAACG,IAAI,EAAE,EAAE;UACtB,IAAI,CAACT,IAAG,CACLU,MAAM,CAAC;YACNC,aAAa,EAAEL,WAAW,CAACG,IAAI,EAAE;YACjC,GAAG,IAAI,CAACd;UACV,CAAC,EACAiB,IAAI,CAAC,CAAC;YAACC;UAAI,CAAC,KAAK;YAChBL,OAAO,CACLK,IAAI,CAACA,IAAI,CAACC,GAAG,CAAEC,SAAS,IAAK;cAC3B,OAAO;gBACLC,EAAE,EAAED,SAAS,CAACC,EAAE;gBAChBC,KAAK,EAAG,GAAEF,SAAS,CAACG,SAAS,IAC3BH,SAAS,CAACI,UAAS,IAAK,EAC1B,IAAIJ,SAAS,CAACK,QAAS,EAAC;gBACxBC,UAAU,EAAEN;cACd,CAAC;YACH,CAAC,CAAC,CACH;UACH,CAAC,CAAC;QACN,OAAO;UACLP,OAAO,CAAC,EAAE,CAAC;QACb;MACF,CAAC,CAAC;IACJ;EACF;AACF,CAAC","names":["APIService","name","props","params","type","Object","default","setup","http","window","appGlobal","baseUrl","methods","loadCandidates","serachParam","Promise","resolve","trim","getAll","candidateName","then","data","map","candidate","id","label","firstName","middleName","lastName","_candidate"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmRecruitmentPlugin\\components\\CandidateAutocomplete.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-input-field\n    type=\"autocomplete\"\n    :label=\"$t('recruitment.candidate_name')\"\n    :clear=\"false\"\n    :create-options=\"loadCandidates\"\n  >\n    <template #option=\"{data}\">\n      <span>{{ data.label }}</span>\n    </template>\n  </oxd-input-field>\n</template>\n\n<script>\nimport {APIService} from '@ohrm/core/util/services/api.service';\nexport default {\n  name: 'CandidateAutocomplete',\n  props: {\n    params: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/recruitment/candidates',\n    );\n    return {\n      http,\n    };\n  },\n  methods: {\n    async loadCandidates(serachParam) {\n      return new Promise((resolve) => {\n        if (serachParam.trim()) {\n          this.http\n            .getAll({\n              candidateName: serachParam.trim(),\n              ...this.params,\n            })\n            .then(({data}) => {\n              resolve(\n                data.data.map((candidate) => {\n                  return {\n                    id: candidate.id,\n                    label: `${candidate.firstName} ${\n                      candidate.middleName || ''\n                    } ${candidate.lastName}`,\n                    _candidate: candidate,\n                  };\n                }),\n              );\n            });\n        } else {\n          resolve([]);\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.past-employee-tag {\n  margin-left: auto;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}