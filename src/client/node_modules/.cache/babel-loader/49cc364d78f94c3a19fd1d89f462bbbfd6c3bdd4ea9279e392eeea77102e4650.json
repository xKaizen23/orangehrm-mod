{"ast":null,"code":"import { promiseDebounce } from '@ohrm/oxd';\nimport { APIService } from '@/core/util/services/api.service';\nimport usei18n from '@/core/util/composable/usei18n';\nimport { required, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nexport default {\n  props: {\n    langStringId: {\n      type: Number,\n      required: true\n    },\n    required: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const validateLangString = value => {\n      return new Promise(resolve => {\n        if (value) {\n          const http = new APIService(window.appGlobal.baseUrl, `/api/v2/admin/i18n/translation/${props.langStringId}/validate`);\n          http.request({\n            method: 'GET',\n            params: {\n              translation: value\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            return data.valid === true ? resolve(true) : resolve($t('admin.' + data.code));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    };\n    return {\n      validateLangString\n    };\n  },\n  data() {\n    return {\n      rules: {\n        langStringTarget: this.required ? [required, shouldNotExceedCharLength(1000), promiseDebounce(this.validateLangString, 500)] : [shouldNotExceedCharLength(1000), promiseDebounce(this.validateLangString, 500)]\n      }\n    };\n  }\n};","map":{"version":3,"mappings":"AAwBA,SAAQA,eAAe,QAAO,WAAW;AACzC,SAAQC,UAAU,QAAO,kCAAkC;AAC3D,OAAOC,OAAM,MAAO,gCAAgC;AACpD,SACEC,QAAQ,EACRC,yBAAyB,QACpB,8BAA8B;AAErC,eAAe;EACbC,KAAK,EAAE;IACLC,YAAY,EAAE;MACZC,IAAI,EAAEC,MAAM;MACZL,QAAQ,EAAE;IACZ,CAAC;IACDA,QAAQ,EAAE;MACRI,IAAI,EAAEE,OAAO;MACbC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,KAAK,CAACN,KAAK,EAAE;IACX,MAAM;MAACO;IAAE,IAAIV,OAAO,EAAE;IAEtB,MAAMW,kBAAiB,GAAKC,KAAK,IAAK;MACpC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;QAC9B,IAAIF,KAAK,EAAE;UACT,MAAMG,IAAG,GAAI,IAAIhB,UAAU,CACzBiB,MAAM,CAACC,SAAS,CAACC,OAAO,EACvB,kCAAiCf,KAAK,CAACC,YAAa,WAAU,CAChE;UACDW,IAAG,CACAI,OAAO,CAAC;YACPC,MAAM,EAAE,KAAK;YACbC,MAAM,EAAE;cACNC,WAAW,EAAEV;YACf;UACF,CAAC,EACAW,IAAI,CAAEC,QAAQ,IAAK;YAClB,MAAM;cAACC;YAAI,IAAID,QAAQ,CAACC,IAAI;YAC5B,OAAOA,IAAI,CAACC,KAAI,KAAM,IAAG,GACrBZ,OAAO,CAAC,IAAI,IACZA,OAAO,CAACJ,EAAE,CAAC,QAAO,GAAIe,IAAI,CAACE,IAAI,CAAC,CAAC;UACvC,CAAC,CAAC;QACN,OAAO;UACLb,OAAO,CAAC,IAAI,CAAC;QACf;MACF,CAAC,CAAC;IACJ,CAAC;IAED,OAAO;MACLH;IACF,CAAC;EACH,CAAC;EACDc,IAAI,GAAG;IACL,OAAO;MACLG,KAAK,EAAE;QACLC,gBAAgB,EAAE,IAAI,CAAC5B,QAAO,GAC1B,CACEA,QAAQ,EACRC,yBAAyB,CAAC,IAAI,CAAC,EAC/BJ,eAAe,CAAC,IAAI,CAACa,kBAAkB,EAAE,GAAG,CAAC,CAC/C,GACA,CACET,yBAAyB,CAAC,IAAI,CAAC,EAC/BJ,eAAe,CAAC,IAAI,CAACa,kBAAkB,EAAE,GAAG,CAAC;MAErD;IACF,CAAC;EACH;AACF,CAAC","names":["promiseDebounce","APIService","usei18n","required","shouldNotExceedCharLength","props","langStringId","type","Number","Boolean","default","setup","$t","validateLangString","value","Promise","resolve","http","window","appGlobal","baseUrl","request","method","params","translation","then","response","data","valid","code","rules","langStringTarget"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\components\\LangStringTargetInput.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-input-field type=\"input\" :rules=\"rules.langStringTarget\" />\n</template>\n\n<script>\nimport {promiseDebounce} from '@ohrm/oxd';\nimport {APIService} from '@/core/util/services/api.service';\nimport usei18n from '@/core/util/composable/usei18n';\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@/core/util/validation/rules';\n\nexport default {\n  props: {\n    langStringId: {\n      type: Number,\n      required: true,\n    },\n    required: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props) {\n    const {$t} = usei18n();\n\n    const validateLangString = (value) => {\n      return new Promise((resolve) => {\n        if (value) {\n          const http = new APIService(\n            window.appGlobal.baseUrl,\n            `/api/v2/admin/i18n/translation/${props.langStringId}/validate`,\n          );\n          http\n            .request({\n              method: 'GET',\n              params: {\n                translation: value,\n              },\n            })\n            .then((response) => {\n              const {data} = response.data;\n              return data.valid === true\n                ? resolve(true)\n                : resolve($t('admin.' + data.code));\n            });\n        } else {\n          resolve(true);\n        }\n      });\n    };\n\n    return {\n      validateLangString,\n    };\n  },\n  data() {\n    return {\n      rules: {\n        langStringTarget: this.required\n          ? [\n              required,\n              shouldNotExceedCharLength(1000),\n              promiseDebounce(this.validateLangString, 500),\n            ]\n          : [\n              shouldNotExceedCharLength(1000),\n              promiseDebounce(this.validateLangString, 500),\n            ],\n      },\n    };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}