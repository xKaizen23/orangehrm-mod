{"ast":null,"code":"import { ref, computed } from 'vue';\nimport { navigate } from '@/core/util/helper/navigation';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport ReferenceIdAutocomplete from '@/orangehrmClaimPlugin/components/ReferenceIdAutocomplete.vue';\nimport ClaimEventDropdown from '@/orangehrmClaimPlugin/components/ClaimEventDropdown.vue';\nimport StatusDropdown from '@/orangehrmClaimPlugin/components/StatusDropdown.vue';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport { validDateFormat, endDateShouldBeAfterStartDate } from '@/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst defaultFilters = {\n  referenceId: '',\n  claimEvent: null,\n  status: null,\n  fromDate: null,\n  toDate: null\n};\nconst defaultSortOrder = {\n  'claimRequest.referenceId': 'DESC',\n  'claimRequest.claimEvent.name': 'ASC',\n  'claimRequest.status': 'ASC',\n  'claimRequest.submittedDate': 'ASC'\n};\nexport default {\n  components: {\n    'reference-id-autocomplete': ReferenceIdAutocomplete,\n    'claim-event-dropdown': ClaimEventDropdown,\n    'status-dropdown': StatusDropdown\n  },\n  setup() {\n    const filters = ref({\n      ...defaultFilters\n    });\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const {\n      locale\n    } = useLocale();\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const serializedFilters = computed(() => {\n      return {\n        referenceId: typeof filters.value.referenceId === 'object' && filters.value.referenceId ? filters.value.referenceId.id : typeof filters.value.referenceId === 'string' ? filters.value.referenceId : null,\n        eventId: filters.value.claimEvent ? filters.value.claimEvent?.id : null,\n        status: filters.value.status ? filters.value.status?.id : null,\n        fromDate: filters.value.fromDate,\n        toDate: filters.value.toDate,\n        sortField: sortField.value === 'claimRequest.claimEvent.name' ? 'claimEvent.name' : sortField.value,\n        sortOrder: sortOrder.value\n      };\n    });\n    const claimRequestDataNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          referenceId: item.referenceId,\n          eventName: item.claimEvent.name,\n          description: item.description,\n          currency: item.currencyType.name,\n          status: item.status.charAt(0).toUpperCase() + item.status.slice(1).toLowerCase(),\n          submittedDate: formatDate(parseDate(item.submittedDate), jsDateFormat, {\n            locale\n          }),\n          amount: Number(item.amount).toLocaleString('en-US', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n          })\n        };\n      });\n    };\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/claim/requests');\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: claimRequestDataNormalizer,\n      query: serializedFilters\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      response,\n      filters,\n      sortDefinition,\n      useDateFormat\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'referenceId',\n        title: this.$t('claim.reference_id'),\n        slot: 'title',\n        sortField: 'claimRequest.referenceId',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'eventName',\n        title: this.$t('claim.event_name'),\n        slot: 'title',\n        cellType: 'oxd-table-cell-truncate',\n        sortField: 'claimRequest.claimEvent.name',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'description',\n        title: this.$t('general.description'),\n        slot: 'title',\n        cellType: 'oxd-table-cell-truncate',\n        sortField: 'claimRequest.description',\n        style: {\n          flex: 4\n        }\n      }, {\n        name: 'currency',\n        title: this.$t('general.currency'),\n        slot: 'title',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'submittedDate',\n        title: this.$t('claim.submitted_date'),\n        slot: 'title',\n        sortField: 'claimRequest.submittedDate',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'status',\n        title: this.$t('general.status'),\n        sortField: 'claimRequest.status',\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'amount',\n        title: this.$t('general.amount'),\n        slot: 'title',\n        sortField: 'claimRequest.amount',\n        style: {\n          flex: 3\n        }\n      }, {\n        name: 'actions',\n        slot: 'right',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 3\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          view: {\n            onClick: this.onClickView,\n            component: 'oxd-button',\n            props: {\n              label: this.$t('claim.view_details'),\n              displayType: 'text',\n              size: 'medium'\n            }\n          }\n        }\n      }],\n      rules: {\n        date: [validDateFormat(this.userDateFormat)],\n        toDate: [validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.filters.fromDate, this.$t('general.to_date_should_be_after_from_date'), {\n          allowSameDate: true\n        })]\n      }\n    };\n  },\n  methods: {\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {\n        ...defaultFilters\n      };\n      this.filterItems();\n    },\n    onClickAdd() {\n      navigate('/claim/submitClaim');\n    },\n    onClickView(item) {\n      navigate('/claim/submitClaim/id/{id}', {\n        id: item.id\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["ref","computed","navigate","useSort","APIService","usePaginate","ReferenceIdAutocomplete","ClaimEventDropdown","StatusDropdown","useLocale","formatDate","parseDate","validDateFormat","endDateShouldBeAfterStartDate","useDateFormat","defaultFilters","referenceId","claimEvent","status","fromDate","toDate","defaultSortOrder","components","setup","filters","sortDefinition","sortField","sortOrder","onSort","locale","jsDateFormat","serializedFilters","value","id","eventId","claimRequestDataNormalizer","data","map","item","eventName","name","description","currency","currencyType","charAt","toUpperCase","slice","toLowerCase","submittedDate","amount","Number","toLocaleString","minimumFractionDigits","maximumFractionDigits","http","window","appGlobal","baseUrl","showPaginator","currentPage","total","pages","pageSize","response","isLoading","execQuery","normalizer","query","items","headers","title","$t","slot","style","flex","cellType","cellConfig","view","onClick","onClickView","component","props","label","displayType","size","rules","date","userDateFormat","allowSameDate","methods","resetDataTable","checkedItems","filterItems","onClickReset","onClickAdd"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmClaimPlugin\\pages\\myClaims\\MyClaims.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-table-filter :filter-title=\"$t('claim.my_claims')\">\n    <oxd-form @submit-valid=\"filterItems\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"4\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <reference-id-autocomplete\n              v-model=\"filters.referenceId\"\n              :label=\"$t('claim.reference_id')\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <claim-event-dropdown\n              v-model=\"filters.claimEvent\"\n              :label=\"$t('claim.event_name')\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <status-dropdown\n              v-model=\"filters.status\"\n              :label=\"$t('general.status')\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n      <oxd-form-row>\n        <oxd-grid :cols=\"4\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <date-input\n              v-model=\"filters.fromDate\"\n              :label=\"$t('general.from_date')\"\n              :rules=\"rules.date\"\n              :years=\"yearsArray\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <date-input\n              v-model=\"filters.toDate\"\n              :label=\"$t('general.to_date')\"\n              :rules=\"rules.toDate\"\n              :years=\"yearsArray\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n      <oxd-divider />\n      <oxd-form-actions>\n        <oxd-button\n          display-type=\"ghost\"\n          :label=\"$t('general.reset')\"\n          @click=\"onClickReset\"\n        />\n        <oxd-button\n          class=\"orangehrm-left-space\"\n          display-type=\"secondary\"\n          :label=\"$t('general.search')\"\n          type=\"submit\"\n        />\n      </oxd-form-actions>\n    </oxd-form>\n  </oxd-table-filter>\n  <br />\n  <div class=\"orangehrm-paper-container\">\n    <div class=\"orangehrm-header-container\">\n      <oxd-button\n        :label=\"$t('claim.submit_claim')\"\n        icon-name=\"plus\"\n        display-type=\"secondary\"\n        @click=\"onClickAdd\"\n      />\n    </div>\n    <table-header :total=\"total\" :loading=\"isLoading\" />\n    <div class=\"orangehrm-container\">\n      <oxd-card-table\n        v-model:order=\"sortDefinition\"\n        :items=\"items.data\"\n        :headers=\"headers\"\n        :selectable=\"false\"\n        :clickable=\"false\"\n        :loading=\"isLoading\"\n        row-decorator=\"oxd-table-decorator-card\"\n      />\n    </div>\n    <div class=\"orangehrm-bottom-container\">\n      <oxd-pagination\n        v-if=\"showPaginator\"\n        v-model:current=\"currentPage\"\n        :length=\"pages\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport {ref, computed} from 'vue';\nimport {navigate} from '@/core/util/helper/navigation';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport {APIService} from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport ReferenceIdAutocomplete from '@/orangehrmClaimPlugin/components/ReferenceIdAutocomplete.vue';\nimport ClaimEventDropdown from '@/orangehrmClaimPlugin/components/ClaimEventDropdown.vue';\nimport StatusDropdown from '@/orangehrmClaimPlugin/components/StatusDropdown.vue';\nimport useLocale from '@/core/util/composable/useLocale';\nimport {formatDate, parseDate} from '@ohrm/core/util/helper/datefns';\nimport {\n  validDateFormat,\n  endDateShouldBeAfterStartDate,\n} from '@/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\n\nconst defaultFilters = {\n  referenceId: '',\n  claimEvent: null,\n  status: null,\n  fromDate: null,\n  toDate: null,\n};\n\nconst defaultSortOrder = {\n  'claimRequest.referenceId': 'DESC',\n  'claimRequest.claimEvent.name': 'ASC',\n  'claimRequest.status': 'ASC',\n  'claimRequest.submittedDate': 'ASC',\n};\n\nexport default {\n  components: {\n    'reference-id-autocomplete': ReferenceIdAutocomplete,\n    'claim-event-dropdown': ClaimEventDropdown,\n    'status-dropdown': StatusDropdown,\n  },\n  setup() {\n    const filters = ref({...defaultFilters});\n    const {sortDefinition, sortField, sortOrder, onSort} = useSort({\n      sortDefinition: defaultSortOrder,\n    });\n    const {locale} = useLocale();\n    const {jsDateFormat} = useDateFormat();\n\n    const serializedFilters = computed(() => {\n      return {\n        referenceId:\n          typeof filters.value.referenceId === 'object' &&\n          filters.value.referenceId\n            ? filters.value.referenceId.id\n            : typeof filters.value.referenceId === 'string'\n            ? filters.value.referenceId\n            : null,\n        eventId: filters.value.claimEvent ? filters.value.claimEvent?.id : null,\n        status: filters.value.status ? filters.value.status?.id : null,\n        fromDate: filters.value.fromDate,\n        toDate: filters.value.toDate,\n        sortField:\n          sortField.value === 'claimRequest.claimEvent.name'\n            ? 'claimEvent.name'\n            : sortField.value,\n        sortOrder: sortOrder.value,\n      };\n    });\n\n    const claimRequestDataNormalizer = (data) => {\n      return data.map((item) => {\n        return {\n          id: item.id,\n          referenceId: item.referenceId,\n          eventName: item.claimEvent.name,\n          description: item.description,\n          currency: item.currencyType.name,\n          status:\n            item.status.charAt(0).toUpperCase() +\n            item.status.slice(1).toLowerCase(),\n          submittedDate: formatDate(\n            parseDate(item.submittedDate),\n            jsDateFormat,\n            {locale},\n          ),\n          amount: Number(item.amount).toLocaleString('en-US', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n          }),\n        };\n      });\n    };\n\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/claim/requests',\n    );\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery,\n    } = usePaginate(http, {\n      normalizer: claimRequestDataNormalizer,\n      query: serializedFilters,\n    });\n    onSort(execQuery);\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n      response,\n      filters,\n      sortDefinition,\n      useDateFormat,\n    };\n  },\n  data() {\n    return {\n      headers: [\n        {\n          name: 'referenceId',\n          title: this.$t('claim.reference_id'),\n          slot: 'title',\n          sortField: 'claimRequest.referenceId',\n          style: {flex: 3},\n        },\n        {\n          name: 'eventName',\n          title: this.$t('claim.event_name'),\n          slot: 'title',\n          cellType: 'oxd-table-cell-truncate',\n          sortField: 'claimRequest.claimEvent.name',\n          style: {flex: 3},\n        },\n        {\n          name: 'description',\n          title: this.$t('general.description'),\n          slot: 'title',\n          cellType: 'oxd-table-cell-truncate',\n          sortField: 'claimRequest.description',\n          style: {flex: 4},\n        },\n        {\n          name: 'currency',\n          title: this.$t('general.currency'),\n          slot: 'title',\n          style: {flex: 3},\n        },\n        {\n          name: 'submittedDate',\n          title: this.$t('claim.submitted_date'),\n          slot: 'title',\n          sortField: 'claimRequest.submittedDate',\n          style: {flex: 3},\n        },\n        {\n          name: 'status',\n          title: this.$t('general.status'),\n          sortField: 'claimRequest.status',\n          style: {flex: 2},\n        },\n        {\n          name: 'amount',\n          title: this.$t('general.amount'),\n          slot: 'title',\n          sortField: 'claimRequest.amount',\n          style: {flex: 3},\n        },\n        {\n          name: 'actions',\n          slot: 'right',\n          title: this.$t('general.actions'),\n          style: {flex: 3},\n          cellType: 'oxd-table-cell-actions',\n          cellConfig: {\n            view: {\n              onClick: this.onClickView,\n              component: 'oxd-button',\n              props: {\n                label: this.$t('claim.view_details'),\n                displayType: 'text',\n                size: 'medium',\n              },\n            },\n          },\n        },\n      ],\n      rules: {\n        date: [validDateFormat(this.userDateFormat)],\n        toDate: [\n          validDateFormat(this.userDateFormat),\n          endDateShouldBeAfterStartDate(\n            () => this.filters.fromDate,\n            this.$t('general.to_date_should_be_after_from_date'),\n            {allowSameDate: true},\n          ),\n        ],\n      },\n    };\n  },\n\n  methods: {\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    async filterItems() {\n      await this.execQuery();\n    },\n    onClickReset() {\n      this.filters = {...defaultFilters};\n      this.filterItems();\n    },\n    onClickAdd() {\n      navigate('/claim/submitClaim');\n    },\n    onClickView(item) {\n      navigate('/claim/submitClaim/id/{id}', {id: item.id});\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}