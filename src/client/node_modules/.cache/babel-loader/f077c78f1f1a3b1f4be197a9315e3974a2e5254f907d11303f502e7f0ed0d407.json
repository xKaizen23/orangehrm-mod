{"ast":null,"code":"import usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport ProfileActionHeader from '@/orangehrmPimPlugin/components/ProfileActionHeader';\nimport EditEmployeeLayout from '@/orangehrmPimPlugin/components/EditEmployeeLayout';\nimport SaveMembership from '@/orangehrmPimPlugin/components/SaveMembership';\nimport EditMembership from '@/orangehrmPimPlugin/components/EditMembership';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\nexport default {\n  components: {\n    'profile-action-header': ProfileActionHeader,\n    'edit-employee-layout': EditEmployeeLayout,\n    'save-membership': SaveMembership,\n    'edit-membership': EditMembership,\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  props: {\n    empNumber: {\n      type: String,\n      required: true\n    },\n    currencies: {\n      type: Array,\n      default: () => []\n    },\n    paidBy: {\n      type: Array,\n      default: () => []\n    },\n    memberships: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/pim/employees/${props.empNumber}/memberships`);\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const membershipNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          membershipId: item.membership.id,\n          membershipName: item.membership.name,\n          subscriptionPaidBy: item.subscriptionPaidBy,\n          subscriptionFee: item.subscriptionFee,\n          subscriptionTypeId: item.currencyType.id,\n          subscriptionCurrencyName: item.currencyType.name,\n          subscriptionCommenceDate: formatDate(parseDate(item.subscriptionCommenceDate), jsDateFormat, {\n            locale\n          }),\n          subscriptionRenewalDate: formatDate(parseDate(item.subscriptionRenewalDate), jsDateFormat, {\n            locale\n          })\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: membershipNormalizer,\n      toastNoRecords: false\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'membershipName',\n        slot: 'title',\n        title: this.$t('pim.membership'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'subscriptionPaidBy',\n        title: this.$t('pim.subscription_paid_by'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'subscriptionFee',\n        title: this.$t('pim.subscription_amount'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'subscriptionCurrencyName',\n        title: this.$t('general.currency'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'subscriptionCommenceDate',\n        title: this.$t('pim.subscription_commence_date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'subscriptionRenewalDate',\n        title: this.$t('pim.subscription_renewal_date'),\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'actions',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      checkedItems: [],\n      showSaveModal: false,\n      showEditModal: false,\n      editModalState: null\n    };\n  },\n  computed: {\n    isDisabled() {\n      return this.showSaveModal || this.showEditModal;\n    }\n  },\n  methods: {\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    onClickAdd() {\n      this.showEditModal = false;\n      this.editModalState = null;\n      this.showSaveModal = true;\n    },\n    onClickEdit(item) {\n      this.showSaveModal = false;\n      this.editModalState = item;\n      this.showEditModal = true;\n    },\n    onSaveModalClose() {\n      this.showSaveModal = false;\n      this.resetDataTable();\n    },\n    onEditModalClose() {\n      this.showEditModal = false;\n      this.editModalState = null;\n      this.resetDataTable();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["usePaginate","APIService","ProfileActionHeader","EditEmployeeLayout","SaveMembership","EditMembership","DeleteConfirmationDialog","useDateFormat","formatDate","parseDate","useLocale","components","props","empNumber","type","String","required","currencies","Array","default","paidBy","memberships","setup","http","window","appGlobal","baseUrl","jsDateFormat","locale","membershipNormalizer","data","map","item","id","membershipId","membership","membershipName","name","subscriptionPaidBy","subscriptionFee","subscriptionTypeId","currencyType","subscriptionCurrencyName","subscriptionCommenceDate","subscriptionRenewalDate","showPaginator","currentPage","total","pages","pageSize","response","isLoading","execQuery","normalizer","toastNoRecords","items","headers","slot","title","$t","style","flex","cellType","cellConfig","delete","onClick","onClickDelete","component","edit","onClickEdit","checkedItems","showSaveModal","showEditModal","editModalState","computed","isDisabled","methods","onClickDeleteSelected","ids","index","$refs","deleteDialog","showDialog","then","confirmation","deleteItems","deleteAll","$toast","deleteSuccess","resetDataTable","onClickAdd","onSaveModalClose","onEditModalClose"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\pages\\employee\\EmployeeMembership.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <edit-employee-layout :employee-id=\"empNumber\" screen=\"membership\">\n    <save-membership\n      v-if=\"showSaveModal\"\n      :http=\"http\"\n      :currencies=\"currencies\"\n      :paid-by=\"paidBy\"\n      :memberships=\"memberships\"\n      @close=\"onSaveModalClose\"\n    ></save-membership>\n    <edit-membership\n      v-if=\"showEditModal\"\n      :http=\"http\"\n      :currencies=\"currencies\"\n      :paid-by=\"paidBy\"\n      :memberships=\"memberships\"\n      :data=\"editModalState\"\n      @close=\"onEditModalClose\"\n    ></edit-membership>\n    <div class=\"orangehrm-horizontal-padding orangehrm-vertical-padding\">\n      <profile-action-header @click=\"onClickAdd\">\n        {{ $t('pim.assigned_memberships') }}\n      </profile-action-header>\n    </div>\n    <table-header\n      :selected=\"checkedItems.length\"\n      :total=\"total\"\n      :loading=\"isLoading\"\n      @delete=\"onClickDeleteSelected\"\n    ></table-header>\n    <div class=\"orangehrm-container\">\n      <oxd-card-table\n        v-model:selected=\"checkedItems\"\n        :headers=\"headers\"\n        :items=\"items?.data\"\n        :selectable=\"true\"\n        :disabled=\"isDisabled\"\n        :clickable=\"false\"\n        :loading=\"isLoading\"\n        row-decorator=\"oxd-table-decorator-card\"\n      />\n    </div>\n    <div class=\"orangehrm-bottom-container\">\n      <oxd-pagination\n        v-if=\"showPaginator\"\n        v-model:current=\"currentPage\"\n        :length=\"pages\"\n      />\n    </div>\n    <delete-confirmation ref=\"deleteDialog\"></delete-confirmation>\n  </edit-employee-layout>\n</template>\n\n<script>\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport ProfileActionHeader from '@/orangehrmPimPlugin/components/ProfileActionHeader';\nimport EditEmployeeLayout from '@/orangehrmPimPlugin/components/EditEmployeeLayout';\nimport SaveMembership from '@/orangehrmPimPlugin/components/SaveMembership';\nimport EditMembership from '@/orangehrmPimPlugin/components/EditMembership';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport {formatDate, parseDate} from '@/core/util/helper/datefns';\nimport useLocale from '@/core/util/composable/useLocale';\n\nexport default {\n  components: {\n    'profile-action-header': ProfileActionHeader,\n    'edit-employee-layout': EditEmployeeLayout,\n    'save-membership': SaveMembership,\n    'edit-membership': EditMembership,\n    'delete-confirmation': DeleteConfirmationDialog,\n  },\n\n  props: {\n    empNumber: {\n      type: String,\n      required: true,\n    },\n    currencies: {\n      type: Array,\n      default: () => [],\n    },\n    paidBy: {\n      type: Array,\n      default: () => [],\n    },\n    memberships: {\n      type: Array,\n      default: () => [],\n    },\n  },\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/pim/employees/${props.empNumber}/memberships`,\n    );\n    const {jsDateFormat} = useDateFormat();\n    const {locale} = useLocale();\n\n    const membershipNormalizer = (data) => {\n      return data.map((item) => {\n        return {\n          id: item.id,\n          membershipId: item.membership.id,\n          membershipName: item.membership.name,\n          subscriptionPaidBy: item.subscriptionPaidBy,\n          subscriptionFee: item.subscriptionFee,\n          subscriptionTypeId: item.currencyType.id,\n          subscriptionCurrencyName: item.currencyType.name,\n          subscriptionCommenceDate: formatDate(\n            parseDate(item.subscriptionCommenceDate),\n            jsDateFormat,\n            {locale},\n          ),\n          subscriptionRenewalDate: formatDate(\n            parseDate(item.subscriptionRenewalDate),\n            jsDateFormat,\n            {locale},\n          ),\n        };\n      });\n    };\n\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery,\n    } = usePaginate(http, {\n      normalizer: membershipNormalizer,\n      toastNoRecords: false,\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n    };\n  },\n\n  data() {\n    return {\n      headers: [\n        {\n          name: 'membershipName',\n          slot: 'title',\n          title: this.$t('pim.membership'),\n          style: {flex: 1},\n        },\n        {\n          name: 'subscriptionPaidBy',\n          title: this.$t('pim.subscription_paid_by'),\n          style: {flex: 1},\n        },\n        {\n          name: 'subscriptionFee',\n          title: this.$t('pim.subscription_amount'),\n          style: {flex: 1},\n        },\n        {\n          name: 'subscriptionCurrencyName',\n          title: this.$t('general.currency'),\n          style: {flex: 1},\n        },\n        {\n          name: 'subscriptionCommenceDate',\n          title: this.$t('pim.subscription_commence_date'),\n          style: {flex: 1},\n        },\n        {\n          name: 'subscriptionRenewalDate',\n          title: this.$t('pim.subscription_renewal_date'),\n          style: {flex: 1},\n        },\n        {\n          name: 'actions',\n          slot: 'action',\n          title: this.$t('general.actions'),\n          style: {flex: 1},\n          cellType: 'oxd-table-cell-actions',\n          cellConfig: {\n            delete: {\n              onClick: this.onClickDelete,\n              component: 'oxd-icon-button',\n              props: {\n                name: 'trash',\n              },\n            },\n            edit: {\n              onClick: this.onClickEdit,\n              props: {\n                name: 'pencil-fill',\n              },\n            },\n          },\n        },\n      ],\n      checkedItems: [],\n      showSaveModal: false,\n      showEditModal: false,\n      editModalState: null,\n    };\n  },\n\n  computed: {\n    isDisabled() {\n      return this.showSaveModal || this.showEditModal;\n    },\n  },\n\n  methods: {\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map((index) => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http\n          .deleteAll({\n            ids: items,\n          })\n          .then(() => {\n            return this.$toast.deleteSuccess();\n          })\n          .then(() => {\n            this.isLoading = false;\n            this.resetDataTable();\n          });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n    onClickAdd() {\n      this.showEditModal = false;\n      this.editModalState = null;\n      this.showSaveModal = true;\n    },\n    onClickEdit(item) {\n      this.showSaveModal = false;\n      this.editModalState = item;\n      this.showEditModal = true;\n    },\n    onSaveModalClose() {\n      this.showSaveModal = false;\n      this.resetDataTable();\n    },\n    onEditModalClose() {\n      this.showEditModal = false;\n      this.editModalState = null;\n      this.resetDataTable();\n    },\n  },\n};\n</script>\n\n<style src=\"./employee.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}