{"ast":null,"code":"import { OxdSwitchInput } from '@ohrm/oxd';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nconst initialClaimEvent = {\n  name: '',\n  description: '',\n  status: null\n};\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput\n  },\n  props: {\n    id: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/claim/events');\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const claimEventNameUniqueValidation = createUniqueValidator('ClaimEvent', 'name', {\n      entityId: props.id,\n      matchByField: 'isDeleted',\n      matchByValue: 'false'\n    });\n    return {\n      http,\n      claimEventNameUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      claimEvent: {\n        ...initialClaimEvent\n      },\n      canEdit: false,\n      name: '',\n      rules: {\n        name: [required, this.claimEventNameUniqueValidation, shouldNotExceedCharLength(100)],\n        description: [shouldNotExceedCharLength(1000)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.claimEvent = {\n        ...data\n      };\n      this.name = data.name;\n      this.canEdit = response.data.meta.canEdit;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/claim/viewEvents');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.id, {\n        name: this.canEdit ? this.claimEvent.name : null,\n        description: this.claimEvent.description,\n        status: this.claimEvent.status\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AA6EA,SAAQA,cAAc,QAAO,WAAW;AACxC,SAAQC,QAAQ,QAAO,mCAAmC;AAC1D,SAAQC,UAAU,QAAO,kCAAkC;AAC3D,SACEC,QAAQ,EACRC,yBAAyB,QACpB,kCAAkC;AACzC,OAAOC,mBAAkB,MAAO,4CAA4C;AAE5E,MAAMC,iBAAgB,GAAI;EACxBC,IAAI,EAAE,EAAE;EACRC,WAAW,EAAE,EAAE;EACfC,MAAM,EAAE;AACV,CAAC;AAED,eAAe;EACbC,UAAU,EAAE;IACV,kBAAkB,EAAEV;EACtB,CAAC;EACDW,KAAK,EAAE;IACLC,EAAE,EAAE;MACFC,IAAI,EAAEC,MAAM;MACZX,QAAQ,EAAE;IACZ;EACF,CAAC;EAEDY,KAAK,CAACJ,KAAK,EAAE;IACX,MAAMK,IAAG,GAAI,IAAId,UAAU,CACzBe,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,sBAAsB,CACvB;IACD,MAAM;MAACC;IAAqB,IAAIf,mBAAmB,CAACW,IAAI,CAAC;IACzD,MAAMK,8BAA6B,GAAID,qBAAqB,CAC1D,YAAY,EACZ,MAAM,EACN;MAACE,QAAQ,EAAEX,KAAK,CAACC,EAAE;MAAEW,YAAY,EAAE,WAAW;MAAEC,YAAY,EAAE;IAAO,CAAC,CACvE;IACD,OAAO;MACLR,IAAI;MACJK;IACF,CAAC;EACH,CAAC;EAEDI,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,UAAU,EAAE;QAAC,GAAGrB;MAAiB,CAAC;MAClCsB,OAAO,EAAE,KAAK;MACdrB,IAAI,EAAE,EAAE;MACRsB,KAAK,EAAE;QACLtB,IAAI,EAAE,CACJJ,QAAQ,EACR,IAAI,CAACkB,8BAA8B,EACnCjB,yBAAyB,CAAC,GAAG,CAAC,CAC/B;QACDI,WAAW,EAAE,CAACJ,yBAAyB,CAAC,IAAI,CAAC;MAC/C;IACF,CAAC;EACH,CAAC;EAED0B,WAAW,GAAG;IACZ,IAAI,CAACJ,SAAQ,GAAI,IAAI;IACrB,IAAI,CAACV,IAAG,CACLe,GAAG,CAAC,IAAI,CAACnB,EAAE,EACXoB,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAACR;MAAI,IAAIQ,QAAQ,CAACR,IAAI;MAC5B,IAAI,CAACE,UAAS,GAAI;QAAC,GAAGF;MAAI,CAAC;MAC3B,IAAI,CAAClB,IAAG,GAAIkB,IAAI,CAAClB,IAAI;MACrB,IAAI,CAACqB,OAAM,GAAIK,QAAQ,CAACR,IAAI,CAACS,IAAI,CAACN,OAAO;IAC3C,CAAC,EACAO,OAAO,CAAC,MAAM;MACb,IAAI,CAACT,SAAQ,GAAI,KAAK;IACxB,CAAC,CAAC;EACN,CAAC;EACDU,OAAO,EAAE;IACPC,QAAQ,GAAG;MACTpC,QAAQ,CAAC,mBAAmB,CAAC;IAC/B,CAAC;IACDqC,MAAM,GAAG;MACP,IAAI,CAACZ,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACV,IAAG,CACLuB,MAAM,CAAC,IAAI,CAAC3B,EAAE,EAAE;QACfL,IAAI,EAAE,IAAI,CAACqB,OAAM,GAAI,IAAI,CAACD,UAAU,CAACpB,IAAG,GAAI,IAAI;QAChDC,WAAW,EAAE,IAAI,CAACmB,UAAU,CAACnB,WAAW;QACxCC,MAAM,EAAE,IAAI,CAACkB,UAAU,CAAClB;MAC1B,CAAC,EACAuB,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACQ,MAAM,CAACC,aAAa,EAAE;MACpC,CAAC,EACAT,IAAI,CAAC,MAAM;QACV,IAAI,CAACK,QAAQ,EAAE;MACjB,CAAC,CAAC;IACN;EACF;AACF,CAAC","names":["OxdSwitchInput","navigate","APIService","required","shouldNotExceedCharLength","useServerValidation","initialClaimEvent","name","description","status","components","props","id","type","Number","setup","http","window","appGlobal","baseUrl","createUniqueValidator","claimEventNameUniqueValidation","entityId","matchByField","matchByValue","data","isLoading","claimEvent","canEdit","rules","beforeMount","get","then","response","meta","finally","methods","onCancel","onSave","update","$toast","updateSuccess"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmClaimPlugin\\pages\\EditClaimEvent.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('claim.edit_event') }}\n      </oxd-text>\n\n      <oxd-divider />\n\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-form-row>\n              <oxd-input-field\n                v-model=\"claimEvent.name\"\n                :label=\"$t('claim.event_name')\"\n                :disabled=\"!canEdit\"\n                :rules=\"rules.name\"\n                required\n              />\n            </oxd-form-row>\n          </oxd-grid-item>\n          <oxd-grid-item class=\"--offset-row-2\">\n            <oxd-form-row>\n              <oxd-input-field\n                v-model=\"claimEvent.description\"\n                type=\"textarea\"\n                :label=\"$t('general.description')\"\n                :rules=\"rules.description\"\n              />\n            </oxd-form-row>\n          </oxd-grid-item>\n          <oxd-grid-item class=\"--offset-row-3\">\n            <div class=\"orangehrm-sm-field\">\n              <oxd-text tag=\"p\" class=\"orangehrm-sm-field-label\">\n                {{ $t('general.active') }}\n              </oxd-text>\n              <oxd-switch-input v-model=\"claimEvent.status\" />\n            </div>\n          </oxd-grid-item>\n        </oxd-grid>\n        <oxd-divider />\n\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {OxdSwitchInput} from '@ohrm/oxd';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {APIService} from '@/core/util/services/api.service';\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\n\nconst initialClaimEvent = {\n  name: '',\n  description: '',\n  status: null,\n};\n\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput,\n  },\n  props: {\n    id: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/claim/events',\n    );\n    const {createUniqueValidator} = useServerValidation(http);\n    const claimEventNameUniqueValidation = createUniqueValidator(\n      'ClaimEvent',\n      'name',\n      {entityId: props.id, matchByField: 'isDeleted', matchByValue: 'false'},\n    );\n    return {\n      http,\n      claimEventNameUniqueValidation,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      claimEvent: {...initialClaimEvent},\n      canEdit: false,\n      name: '',\n      rules: {\n        name: [\n          required,\n          this.claimEventNameUniqueValidation,\n          shouldNotExceedCharLength(100),\n        ],\n        description: [shouldNotExceedCharLength(1000)],\n      },\n    };\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.id)\n      .then((response) => {\n        const {data} = response.data;\n        this.claimEvent = {...data};\n        this.name = data.name;\n        this.canEdit = response.data.meta.canEdit;\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n  methods: {\n    onCancel() {\n      navigate('/claim/viewEvents');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.id, {\n          name: this.canEdit ? this.claimEvent.name : null,\n          description: this.claimEvent.description,\n          status: this.claimEvent.status,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n  },\n};\n</script>\n\n<style src=\"./save-claim-event.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}