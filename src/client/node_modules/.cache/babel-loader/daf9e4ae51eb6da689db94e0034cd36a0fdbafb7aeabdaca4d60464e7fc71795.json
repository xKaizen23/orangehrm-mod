{"ast":null,"code":"import { ref, onBeforeMount } from 'vue';\nimport { required } from '@ohrm/core/util/validation/rules';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nexport default {\n  name: 'ReportCriterionSelect',\n  inheritAttrs: false,\n  props: {\n    api: {\n      type: String,\n      required: false,\n      default: null\n    },\n    options: {\n      type: Array,\n      default: () => []\n    },\n    valueX: {\n      type: Object,\n      required: false,\n      default: () => null\n    }\n  },\n  emits: ['update:valueX', 'update:operator'],\n  setup(props, context) {\n    const opts = ref(props.options);\n    const rules = [required];\n    if (props.api) {\n      const http = new APIService(window.appGlobal.baseUrl, props.api);\n      onBeforeMount(() => {\n        http.getAll({\n          ...(props.api !== '/api/v2/admin/subunits' && {\n            limit: 0\n          })\n        }).then(({\n          data\n        }) => {\n          opts.value = data.data.map(item => {\n            return {\n              id: item.id,\n              label: item.name ? item.name : item.title,\n              _indent: item.level ? item.level + 1 : 1\n            };\n          });\n        });\n      });\n    }\n    if (props.api === '/api/v2/admin/locations' || props.api === '/api/v2/admin/subunits') {\n      context.emit('update:operator', {\n        id: 'in',\n        label: 'Equal'\n      });\n    } else {\n      context.emit('update:operator', {\n        id: 'eq',\n        label: 'Equal'\n      });\n    }\n    return {\n      opts,\n      rules\n    };\n  }\n};","map":{"version":3,"mappings":"AAiCA,SAAQA,GAAG,EAAEC,aAAa,QAAO,KAAK;AACtC,SAAQC,QAAQ,QAAO,kCAAkC;AACzD,SAAQC,UAAU,QAAO,sCAAsC;AAE/D,eAAe;EACbC,IAAI,EAAE,uBAAuB;EAC7BC,YAAY,EAAE,KAAK;EACnBC,KAAK,EAAE;IACLC,GAAG,EAAE;MACHC,IAAI,EAAEC,MAAM;MACZP,QAAQ,EAAE,KAAK;MACfQ,OAAO,EAAE;IACX,CAAC;IACDC,OAAO,EAAE;MACPH,IAAI,EAAEI,KAAK;MACXF,OAAO,EAAE,MAAM;IACjB,CAAC;IACDG,MAAM,EAAE;MACNL,IAAI,EAAEM,MAAM;MACZZ,QAAQ,EAAE,KAAK;MACfQ,OAAO,EAAE,MAAM;IACjB;EACF,CAAC;EACDK,KAAK,EAAE,CAAC,eAAe,EAAE,iBAAiB,CAAC;EAC3CC,KAAK,CAACV,KAAK,EAAEW,OAAO,EAAE;IACpB,MAAMC,IAAG,GAAIlB,GAAG,CAACM,KAAK,CAACK,OAAO,CAAC;IAC/B,MAAMQ,KAAI,GAAI,CAACjB,QAAQ,CAAC;IAExB,IAAII,KAAK,CAACC,GAAG,EAAE;MACb,MAAMa,IAAG,GAAI,IAAIjB,UAAU,CAACkB,MAAM,CAACC,SAAS,CAACC,OAAO,EAAEjB,KAAK,CAACC,GAAG,CAAC;MAChEN,aAAa,CAAC,MAAM;QAClBmB,IAAG,CACAI,MAAM,CAAC;UACN,IAAIlB,KAAK,CAACC,GAAE,KAAM,wBAAuB,IAAK;YAACkB,KAAK,EAAE;UAAC,CAAC;QAC1D,CAAC,EACAC,IAAI,CAAC,CAAC;UAACC;QAAI,CAAC,KAAK;UAChBT,IAAI,CAACU,KAAI,GAAID,IAAI,CAACA,IAAI,CAACE,GAAG,CAAEC,IAAI,IAAK;YACnC,OAAO;cACLC,EAAE,EAAED,IAAI,CAACC,EAAE;cACXC,KAAK,EAAEF,IAAI,CAAC1B,IAAG,GAAI0B,IAAI,CAAC1B,IAAG,GAAI0B,IAAI,CAACG,KAAK;cACzCC,OAAO,EAAEJ,IAAI,CAACK,KAAI,GAAIL,IAAI,CAACK,KAAI,GAAI,IAAI;YACzC,CAAC;UACH,CAAC,CAAC;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;IACJ;IAEA,IACE7B,KAAK,CAACC,GAAE,KAAM,yBAAwB,IACtCD,KAAK,CAACC,GAAE,KAAM,wBAAuB,EACrC;MACAU,OAAO,CAACmB,IAAI,CAAC,iBAAiB,EAAE;QAACL,EAAE,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAO,CAAC,CAAC;IAC7D,OAAO;MACLf,OAAO,CAACmB,IAAI,CAAC,iBAAiB,EAAE;QAACL,EAAE,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAO,CAAC,CAAC;IAC7D;IAEA,OAAO;MACLd,IAAI;MACJC;IACF,CAAC;EACH;AACF,CAAC","names":["ref","onBeforeMount","required","APIService","name","inheritAttrs","props","api","type","String","default","options","Array","valueX","Object","emits","setup","context","opts","rules","http","window","appGlobal","baseUrl","getAll","limit","then","data","value","map","item","id","label","title","_indent","level","emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\ReportCriterionSelect.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-grid-item>\n    <oxd-input-field\n      v-bind=\"$attrs\"\n      type=\"select\"\n      :rules=\"rules\"\n      :options=\"opts\"\n      :model-value=\"valueX\"\n      @update:model-value=\"$emit('update:valueX', $event)\"\n    />\n  </oxd-grid-item>\n</template>\n\n<script>\nimport {ref, onBeforeMount} from 'vue';\nimport {required} from '@ohrm/core/util/validation/rules';\nimport {APIService} from '@ohrm/core/util/services/api.service';\n\nexport default {\n  name: 'ReportCriterionSelect',\n  inheritAttrs: false,\n  props: {\n    api: {\n      type: String,\n      required: false,\n      default: null,\n    },\n    options: {\n      type: Array,\n      default: () => [],\n    },\n    valueX: {\n      type: Object,\n      required: false,\n      default: () => null,\n    },\n  },\n  emits: ['update:valueX', 'update:operator'],\n  setup(props, context) {\n    const opts = ref(props.options);\n    const rules = [required];\n\n    if (props.api) {\n      const http = new APIService(window.appGlobal.baseUrl, props.api);\n      onBeforeMount(() => {\n        http\n          .getAll({\n            ...(props.api !== '/api/v2/admin/subunits' && {limit: 0}),\n          })\n          .then(({data}) => {\n            opts.value = data.data.map((item) => {\n              return {\n                id: item.id,\n                label: item.name ? item.name : item.title,\n                _indent: item.level ? item.level + 1 : 1,\n              };\n            });\n          });\n      });\n    }\n\n    if (\n      props.api === '/api/v2/admin/locations' ||\n      props.api === '/api/v2/admin/subunits'\n    ) {\n      context.emit('update:operator', {id: 'in', label: 'Equal'});\n    } else {\n      context.emit('update:operator', {id: 'eq', label: 'Equal'});\n    }\n\n    return {\n      opts,\n      rules,\n    };\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n::v-deep(.oxd-input-group__label-wrapper) {\n  display: none;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}