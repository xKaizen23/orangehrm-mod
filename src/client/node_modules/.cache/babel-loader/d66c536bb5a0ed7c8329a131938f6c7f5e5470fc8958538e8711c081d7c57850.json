{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport { reactive, toRefs } from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport { APIService } from '@/core/util/services/api.service';\nimport PostModal from '@/orangehrmBuzzPlugin/components/PostModal.vue';\nimport VideoFrame from '@/orangehrmBuzzPlugin/components/VideoFrame.vue';\nimport { OxdBuzzPostInput, promiseDebounce } from '@ohrm/oxd';\nexport default {\n  name: 'ShareVideoModal',\n  components: {\n    'post-modal': PostModal,\n    'video-frame': VideoFrame,\n    'oxd-buzz-post-input': OxdBuzzPostInput\n  },\n  props: {\n    text: {\n      type: String,\n      default: null\n    }\n  },\n  emits: ['close'],\n  setup(props, context) {\n    const {\n      $t\n    } = usei18n();\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/buzz/posts');\n    const state = reactive({\n      post: {\n        text: props.text || null,\n        url: null\n      },\n      embedURL: null,\n      isLoading: false\n    });\n    const rules = {\n      url: [required, promiseDebounce(async value => {\n        if (!value) return true;\n        state.embedURL = null;\n        const response = await http.request({\n          method: 'GET',\n          url: '/api/v2/buzz/validation/links',\n          params: {\n            url: value\n          }\n        });\n        const {\n          data\n        } = response.data;\n        if (data?.valid === true) {\n          state.embedURL = data.embeddedURL;\n          return true;\n        } else {\n          return $t('general.invalid_video_url_message');\n        }\n      }, 500)],\n      text: [shouldNotExceedCharLength(65530)]\n    };\n    const onSubmit = () => {\n      state.isLoading = true;\n      http.create({\n        type: 'video',\n        link: state.post.url,\n        text: state.post.text\n      }).then(() => context.emit('close', true));\n    };\n    return {\n      rules,\n      onSubmit,\n      ...toRefs(state)\n    };\n  }\n};","map":{"version":3,"mappings":"AA8CA,SACEA,QAAQ,EACRC,yBAAyB,QACpB,8BAA8B;AACrC,SAAQC,QAAQ,EAAEC,MAAM,QAAO,KAAK;AACpC,OAAOC,OAAM,MAAO,gCAAgC;AACpD,SAAQC,UAAU,QAAO,kCAAkC;AAC3D,OAAOC,SAAQ,MAAO,gDAAgD;AACtE,OAAOC,UAAS,MAAO,iDAAiD;AACxE,SAAQC,gBAAgB,EAAEC,eAAe,QAAO,WAAW;AAE3D,eAAe;EACbC,IAAI,EAAE,iBAAiB;EAEvBC,UAAU,EAAE;IACV,YAAY,EAAEL,SAAS;IACvB,aAAa,EAAEC,UAAU;IACzB,qBAAqB,EAAEC;EACzB,CAAC;EAEDI,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX;EACF,CAAC;EAEDC,KAAK,EAAE,CAAC,OAAO,CAAC;EAEhBC,KAAK,CAACN,KAAK,EAAEO,OAAO,EAAE;IACpB,MAAM;MAACC;IAAE,IAAIhB,OAAO,EAAE;IACtB,MAAMiB,IAAG,GAAI,IAAIhB,UAAU,CAACiB,MAAM,CAACC,SAAS,CAACC,OAAO,EAAE,oBAAoB,CAAC;IAE3E,MAAMC,KAAI,GAAIvB,QAAQ,CAAC;MACrBwB,IAAI,EAAE;QACJb,IAAI,EAAED,KAAK,CAACC,IAAG,IAAK,IAAI;QACxBc,GAAG,EAAE;MACP,CAAC;MACDC,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAE;IACb,CAAC,CAAC;IAEF,MAAMC,KAAI,GAAI;MACZH,GAAG,EAAE,CACH3B,QAAQ,EACRS,eAAe,CAAC,MAAOsB,KAAK,IAAK;QAC/B,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;QACvBN,KAAK,CAACG,QAAO,GAAI,IAAI;QACrB,MAAMI,QAAO,GAAI,MAAMX,IAAI,CAACY,OAAO,CAAC;UAClCC,MAAM,EAAE,KAAK;UACbP,GAAG,EAAE,+BAA+B;UACpCQ,MAAM,EAAE;YACNR,GAAG,EAAEI;UACP;QACF,CAAC,CAAC;QACF,MAAM;UAACK;QAAI,IAAIJ,QAAQ,CAACI,IAAI;QAC5B,IAAIA,IAAI,EAAEC,KAAI,KAAM,IAAI,EAAE;UACxBZ,KAAK,CAACG,QAAO,GAAIQ,IAAI,CAACE,WAAW;UACjC,OAAO,IAAI;QACb,OAAO;UACL,OAAOlB,EAAE,CAAC,mCAAmC,CAAC;QAChD;MACF,CAAC,EAAE,GAAG,CAAC,CACR;MACDP,IAAI,EAAE,CAACZ,yBAAyB,CAAC,KAAK,CAAC;IACzC,CAAC;IAED,MAAMsC,QAAO,GAAI,MAAM;MACrBd,KAAK,CAACI,SAAQ,GAAI,IAAI;MACtBR,IAAG,CACAmB,MAAM,CAAC;QACN1B,IAAI,EAAE,OAAO;QACb2B,IAAI,EAAEhB,KAAK,CAACC,IAAI,CAACC,GAAG;QACpBd,IAAI,EAAEY,KAAK,CAACC,IAAI,CAACb;MACnB,CAAC,EACA6B,IAAI,CAAC,MAAMvB,OAAO,CAACwB,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,OAAO;MACLb,KAAK;MACLS,QAAQ;MACR,GAAGpC,MAAM,CAACsB,KAAK;IACjB,CAAC;EACH;AACF,CAAC","names":["required","shouldNotExceedCharLength","reactive","toRefs","usei18n","APIService","PostModal","VideoFrame","OxdBuzzPostInput","promiseDebounce","name","components","props","text","type","String","default","emits","setup","context","$t","http","window","appGlobal","baseUrl","state","post","url","embedURL","isLoading","rules","value","response","request","method","params","data","valid","embeddedURL","onSubmit","create","link","then","emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmBuzzPlugin\\components\\ShareVideoModal.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <post-modal\n    :loading=\"isLoading\"\n    :title=\"$t('buzz.share_video')\"\n    @submit=\"onSubmit\"\n    @close=\"$emit('close', false)\"\n  >\n    <template #header>\n      <oxd-buzz-post-input\n        v-model=\"post.text\"\n        :rules=\"rules.text\"\n        :placeholder=\"$t('buzz.post_placeholder')\"\n      >\n      </oxd-buzz-post-input>\n    </template>\n    <oxd-input-field\n      v-model=\"post.url\"\n      type=\"textarea\"\n      :rules=\"rules.url\"\n      :label=\"$t('buzz.video_url')\"\n      :placeholder=\"$t('buzz.paste_video_url')\"\n    />\n    <video-frame v-if=\"embedURL\" :video-src=\"embedURL\"></video-frame>\n  </post-modal>\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@/core/util/validation/rules';\nimport {reactive, toRefs} from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport {APIService} from '@/core/util/services/api.service';\nimport PostModal from '@/orangehrmBuzzPlugin/components/PostModal.vue';\nimport VideoFrame from '@/orangehrmBuzzPlugin/components/VideoFrame.vue';\nimport {OxdBuzzPostInput, promiseDebounce} from '@ohrm/oxd';\n\nexport default {\n  name: 'ShareVideoModal',\n\n  components: {\n    'post-modal': PostModal,\n    'video-frame': VideoFrame,\n    'oxd-buzz-post-input': OxdBuzzPostInput,\n  },\n\n  props: {\n    text: {\n      type: String,\n      default: null,\n    },\n  },\n\n  emits: ['close'],\n\n  setup(props, context) {\n    const {$t} = usei18n();\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/buzz/posts');\n\n    const state = reactive({\n      post: {\n        text: props.text || null,\n        url: null,\n      },\n      embedURL: null,\n      isLoading: false,\n    });\n\n    const rules = {\n      url: [\n        required,\n        promiseDebounce(async (value) => {\n          if (!value) return true;\n          state.embedURL = null;\n          const response = await http.request({\n            method: 'GET',\n            url: '/api/v2/buzz/validation/links',\n            params: {\n              url: value,\n            },\n          });\n          const {data} = response.data;\n          if (data?.valid === true) {\n            state.embedURL = data.embeddedURL;\n            return true;\n          } else {\n            return $t('general.invalid_video_url_message');\n          }\n        }, 500),\n      ],\n      text: [shouldNotExceedCharLength(65530)],\n    };\n\n    const onSubmit = () => {\n      state.isLoading = true;\n      http\n        .create({\n          type: 'video',\n          link: state.post.url,\n          text: state.post.text,\n        })\n        .then(() => context.emit('close', true));\n    };\n\n    return {\n      rules,\n      onSubmit,\n      ...toRefs(state),\n    };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}