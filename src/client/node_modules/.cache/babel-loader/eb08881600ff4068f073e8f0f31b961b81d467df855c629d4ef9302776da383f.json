{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { promiseDebounce, OxdAlert } from '@ohrm/oxd';\nimport { urlFor } from '@/core/util/helper/url';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePasswordPolicy from '@/core/util/composable/usePasswordPolicy';\nimport PasswordStrengthIndicator from '@/core/components/labels/PasswordStrengthIndicator';\nexport default {\n  name: 'ResetWeakPassword',\n  components: {\n    'password-strength-indicator': PasswordStrengthIndicator,\n    'oxd-alert': OxdAlert\n  },\n  props: {\n    username: {\n      type: String,\n      required: true\n    },\n    code: {\n      type: String,\n      required: true\n    },\n    token: {\n      type: String,\n      required: true\n    },\n    error: {\n      type: Object,\n      default: () => null\n    },\n    invalidCode: {\n      type: Boolean,\n      default: () => false\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {\n      passwordStrength,\n      validatePassword\n    } = usePasswordPolicy(http);\n    return {\n      http,\n      passwordStrength,\n      validatePassword\n    };\n  },\n  data() {\n    return {\n      user: {\n        username: '',\n        currentPassword: '',\n        confirmPassword: ''\n      },\n      rules: {\n        currentPassword: [required, shouldNotExceedCharLength(64)],\n        newPassword: [required, shouldNotExceedCharLength(64), promiseDebounce(this.validatePassword, 500)],\n        confirmPassword: [required, shouldNotExceedCharLength(64), v => !!v && v === this.user.newPassword || this.$t('general.passwords_do_not_match')]\n      }\n    };\n  },\n  computed: {\n    submitUrl() {\n      return urlFor('/auth/resetWeakPassword');\n    }\n  },\n  methods: {\n    onSubmit() {\n      this.$refs.resetForm.$el.submit();\n    }\n  }\n};","map":{"version":3,"mappings":"AAmHA,SACEA,QAAQ,EACRC,yBAAyB,QACpB,kCAAkC;AACzC,SAAQC,eAAe,EAAEC,QAAQ,QAAO,WAAW;AACnD,SAAQC,MAAM,QAAO,wBAAwB;AAC7C,SAAQC,UAAU,QAAO,kCAAkC;AAC3D,OAAOC,iBAAgB,MAAO,0CAA0C;AACxE,OAAOC,yBAAwB,MAAO,oDAAoD;AAE1F,eAAe;EACbC,IAAI,EAAE,mBAAmB;EAEzBC,UAAU,EAAE;IACV,6BAA6B,EAAEF,yBAAyB;IACxD,WAAW,EAAEJ;EACf,CAAC;EAEDO,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEC,MAAM;MACZb,QAAQ,EAAE;IACZ,CAAC;IACDc,IAAI,EAAE;MACJF,IAAI,EAAEC,MAAM;MACZb,QAAQ,EAAE;IACZ,CAAC;IACDe,KAAK,EAAE;MACLH,IAAI,EAAEC,MAAM;MACZb,QAAQ,EAAE;IACZ,CAAC;IACDgB,KAAK,EAAE;MACLJ,IAAI,EAAEK,MAAM;MACZC,OAAO,EAAE,MAAM;IACjB,CAAC;IACDC,WAAW,EAAE;MACXP,IAAI,EAAEQ,OAAO;MACbF,OAAO,EAAE,MAAM;IACjB;EACF,CAAC;EAEDG,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIjB,UAAU,CAACkB,MAAM,CAACC,SAAS,CAACC,OAAO,EAAE,EAAE,CAAC;IACzD,MAAM;MAACC,gBAAgB;MAAEC;IAAgB,IAAIrB,iBAAiB,CAACgB,IAAI,CAAC;IAEpE,OAAO;MACLA,IAAI;MACJI,gBAAgB;MAChBC;IACF,CAAC;EACH,CAAC;EAEDC,IAAI,GAAG;IACL,OAAO;MACLC,IAAI,EAAE;QACJlB,QAAQ,EAAE,EAAE;QACZmB,eAAe,EAAE,EAAE;QACnBC,eAAe,EAAE;MACnB,CAAC;MACDC,KAAK,EAAE;QACLF,eAAe,EAAE,CAAC9B,QAAQ,EAAEC,yBAAyB,CAAC,EAAE,CAAC,CAAC;QAC1DgC,WAAW,EAAE,CACXjC,QAAQ,EACRC,yBAAyB,CAAC,EAAE,CAAC,EAC7BC,eAAe,CAAC,IAAI,CAACyB,gBAAgB,EAAE,GAAG,CAAC,CAC5C;QACDI,eAAe,EAAE,CACf/B,QAAQ,EACRC,yBAAyB,CAAC,EAAE,CAAC,EAC5BiC,CAAC,IACC,CAAC,CAACA,KAAKA,MAAM,IAAI,CAACL,IAAI,CAACI,WAAW,IACnC,IAAI,CAACE,EAAE,CAAC,gCAAgC,CAAC;MAE/C;IACF,CAAC;EACH,CAAC;EAEDC,QAAQ,EAAE;IACRC,SAAS,GAAG;MACV,OAAOjC,MAAM,CAAC,yBAAyB,CAAC;IAC1C;EACF,CAAC;EAEDkC,OAAO,EAAE;IACPC,QAAQ,GAAG;MACT,IAAI,CAACC,KAAK,CAACC,SAAS,CAACC,GAAG,CAACC,MAAM,EAAE;IACnC;EACF;AACF,CAAC","names":["required","shouldNotExceedCharLength","promiseDebounce","OxdAlert","urlFor","APIService","usePasswordPolicy","PasswordStrengthIndicator","name","components","props","username","type","String","code","token","error","Object","default","invalidCode","Boolean","setup","http","window","appGlobal","baseUrl","passwordStrength","validatePassword","data","user","currentPassword","confirmPassword","rules","newPassword","v","$t","computed","submitUrl","methods","onSubmit","$refs","resetForm","$el","submit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAuthenticationPlugin\\pages\\ResetWeakPassword.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-forgot-password-container\">\n    <div class=\"orangehrm-forgot-password-wrapper\">\n      <div class=\"orangehrm-card-container\">\n        <oxd-form\n          ref=\"resetForm\"\n          method=\"post\"\n          :action=\"submitUrl\"\n          @submit-valid=\"onSubmit\"\n        >\n          <oxd-text tag=\"h6\">\n            {{ $t('auth.change_weak_password') }}\n          </oxd-text>\n          <oxd-divider />\n          <div class=\"orangehrm-login-error\">\n            <oxd-alert\n              :show=\"true\"\n              :message=\"\n                invalidCode\n                  ? $t('auth.invalid_password_reset_code')\n                  : error?.message || $t('auth.password_not_strong')\n              \"\n              type=\"error\"\n            ></oxd-alert>\n          </div>\n          <template v-if=\"!invalidCode\">\n            <input name=\"resetCode\" :value=\"code\" type=\"hidden\" />\n            <input name=\"_token\" :value=\"token\" type=\"hidden\" />\n            <oxd-form-row>\n              <oxd-input-field\n                :value=\"username\"\n                :label=\"$t('auth.username')\"\n                readonly\n                name=\"username\"\n                label-icon=\"person\"\n              />\n            </oxd-form-row>\n            <oxd-form-row>\n              <oxd-input-field\n                v-model=\"user.currentPassword\"\n                :rules=\"rules.currentPassword\"\n                :label=\"$t('pim.current_password')\"\n                type=\"password\"\n                label-icon=\"key\"\n                autocomplete=\"off\"\n                name=\"currentPassword\"\n              />\n            </oxd-form-row>\n            <oxd-form-row class=\"orangehrm-forgot-password-row\">\n              <password-strength-indicator\n                v-if=\"user.newPassword\"\n                :password-strength=\"passwordStrength\"\n              >\n              </password-strength-indicator>\n              <oxd-input-field\n                v-model=\"user.newPassword\"\n                :rules=\"rules.newPassword\"\n                :label=\"$t('auth.new_password')\"\n                :placeholder=\"$t('auth.password')\"\n                name=\"password\"\n                type=\"password\"\n                label-icon=\"key\"\n                autocomplete=\"off\"\n              />\n            </oxd-form-row>\n            <oxd-form-row>\n              <oxd-input-field\n                v-model=\"user.confirmPassword\"\n                :rules=\"rules.confirmPassword\"\n                :placeholder=\"$t('auth.password')\"\n                :label=\"$t('general.confirm_password')\"\n                type=\"password\"\n                label-icon=\"key\"\n                autocomplete=\"off\"\n                name=\"confirmPassword\"\n              />\n            </oxd-form-row>\n            <oxd-divider />\n            <div class=\"orangehrm-forgot-password-buttons\">\n              <oxd-button\n                :label=\"$t('general.save')\"\n                size=\"large\"\n                type=\"submit\"\n                display-type=\"secondary\"\n                class=\"orangehrm-forgot-password-button\"\n              />\n            </div>\n          </template>\n        </oxd-form>\n      </div>\n    </div>\n    <slot name=\"footer\"></slot>\n  </div>\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport {promiseDebounce, OxdAlert} from '@ohrm/oxd';\nimport {urlFor} from '@/core/util/helper/url';\nimport {APIService} from '@/core/util/services/api.service';\nimport usePasswordPolicy from '@/core/util/composable/usePasswordPolicy';\nimport PasswordStrengthIndicator from '@/core/components/labels/PasswordStrengthIndicator';\n\nexport default {\n  name: 'ResetWeakPassword',\n\n  components: {\n    'password-strength-indicator': PasswordStrengthIndicator,\n    'oxd-alert': OxdAlert,\n  },\n\n  props: {\n    username: {\n      type: String,\n      required: true,\n    },\n    code: {\n      type: String,\n      required: true,\n    },\n    token: {\n      type: String,\n      required: true,\n    },\n    error: {\n      type: Object,\n      default: () => null,\n    },\n    invalidCode: {\n      type: Boolean,\n      default: () => false,\n    },\n  },\n\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {passwordStrength, validatePassword} = usePasswordPolicy(http);\n\n    return {\n      http,\n      passwordStrength,\n      validatePassword,\n    };\n  },\n\n  data() {\n    return {\n      user: {\n        username: '',\n        currentPassword: '',\n        confirmPassword: '',\n      },\n      rules: {\n        currentPassword: [required, shouldNotExceedCharLength(64)],\n        newPassword: [\n          required,\n          shouldNotExceedCharLength(64),\n          promiseDebounce(this.validatePassword, 500),\n        ],\n        confirmPassword: [\n          required,\n          shouldNotExceedCharLength(64),\n          (v) =>\n            (!!v && v === this.user.newPassword) ||\n            this.$t('general.passwords_do_not_match'),\n        ],\n      },\n    };\n  },\n\n  computed: {\n    submitUrl() {\n      return urlFor('/auth/resetWeakPassword');\n    },\n  },\n\n  methods: {\n    onSubmit() {\n      this.$refs.resetForm.$el.submit();\n    },\n  },\n};\n</script>\n\n<style src=\"./reset-password.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}