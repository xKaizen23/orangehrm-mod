{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport { required, validEmailFormat, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput\n  },\n  props: {\n    pathToSendmail: {\n      type: String,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/email-configuration');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      passwordPlaceHolder: '',\n      defaultValues: {\n        smtpSecurityType: 'tls'\n      },\n      useTLSSecureConnection: true,\n      sendTestMailEditable: false,\n      isLoading: false,\n      emailConfiguration: {\n        mailType: '',\n        sentAs: '',\n        pathToSendmail: this.pathToSendmail,\n        smtpHost: '',\n        smtpPort: null,\n        smtpUsername: '',\n        smtpPassword: null,\n        smtpAuthType: '',\n        smtpSecurityType: '',\n        testEmailAddress: ''\n      },\n      initialEmailConfiguration: {\n        ...this.emailConfiguration,\n        useTLSSecureConnection: false\n      },\n      rules: {\n        mailType: [required, shouldNotExceedCharLength(50)],\n        sentAs: [required, shouldNotExceedCharLength(100), validEmailFormat],\n        smtpHost: [required, shouldNotExceedCharLength(100)],\n        smtpPort: [shouldNotExceedCharLength(10)],\n        smtpUsername: [required, shouldNotExceedCharLength(100)],\n        smtpPassword: [shouldNotExceedCharLength(100)],\n        smtpAuthType: [shouldNotExceedCharLength(50)],\n        smtpSecurityType: [shouldNotExceedCharLength(50)],\n        testEmailAddress: [required, shouldNotExceedCharLength(250), validEmailFormat]\n      }\n    };\n  },\n  created() {\n    this.isLoading = true;\n    this.http.request({\n      method: 'GET',\n      url: '/api/v2/admin/email-configuration'\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.emailConfiguration.mailType = data.mailType;\n      this.emailConfiguration.sentAs = data.sentAs;\n      this.emailConfiguration.smtpHost = data.smtpHost;\n      this.emailConfiguration.smtpPort = data.smtpPort;\n      this.emailConfiguration.smtpUsername = data.smtpUsername;\n      this.passwordPlaceHolder = data.smtpUsername ? '******' : '';\n      this.emailConfiguration.smtpAuthType = data.smtpAuthType ?? 'none';\n      this.emailConfiguration.testEmailAddress = data.testEmailAddress;\n      this.useTLSSecureConnection = data.smtpSecurityType === 'tls';\n      this.initialEmailConfiguration = {\n        ...this.emailConfiguration,\n        useTLSSecureConnection: this.useTLSSecureConnection\n      };\n      if (!data.smtpUsername) {\n        this.rules.smtpPassword.push(required);\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'PUT',\n        data: {\n          mailType: this.emailConfiguration.mailType,\n          sentAs: this.emailConfiguration.sentAs,\n          smtpHost: this.emailConfiguration.smtpHost,\n          smtpPort: parseInt(this.emailConfiguration.smtpPort),\n          smtpUsername: this.emailConfiguration.smtpAuthType === 'login' ? this.emailConfiguration.smtpUsername : '',\n          smtpPassword: this.emailConfiguration.smtpPassword === '' ? null : this.emailConfiguration.smtpPassword,\n          smtpAuthType: this.emailConfiguration.smtpAuthType,\n          smtpSecurityType: this.useTLSSecureConnection ? 'tls' : 'none',\n          testEmailAddress: this.emailConfiguration.testEmailAddress\n        }\n      }).then(response => {\n        const testEmailStatus = response.data.meta?.testEmailStatus;\n        if (testEmailStatus === 1 && this.sendTestMailEditable) {\n          this.$toast.success({\n            title: this.$t('general.success'),\n            message: this.$t('admin.test_email_sent')\n          });\n        } else if (testEmailStatus === 0 && this.sendTestMailEditable) {\n          this.$toast.warn({\n            title: this.$t('general.failed'),\n            message: this.$t('admin.test_email_not_sent')\n          });\n        }\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.isLoading = false;\n      });\n    },\n    onReset() {\n      this.emailConfiguration = {\n        ...this.initialEmailConfiguration\n      };\n      this.useTLSSecureConnection = this.initialEmailConfiguration.useTLSSecureConnection;\n    }\n  }\n};","map":{"version":3,"mappings":";AA0NA,SAAQA,UAAU,QAAO,sCAAsC;AAC/D,SACEC,QAAQ,EACRC,gBAAgB,EAChBC,yBAAyB,QACpB,kCAAkC;AACzC,SAAQC,cAAc,QAAO,WAAW;AAExC,eAAe;EACbC,UAAU,EAAE;IACV,kBAAkB,EAAED;EACtB,CAAC;EACDE,KAAK,EAAE;IACLC,cAAc,EAAE;MACdC,IAAI,EAAEC,MAAM;MACZR,QAAQ,EAAE;IACZ;EACF,CAAC;EACDS,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIX,UAAU,CACzBY,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,mCAAmC,CACpC;IACD,OAAO;MACLH;IACF,CAAC;EACH,CAAC;EAEDI,IAAI,GAAG;IACL,OAAO;MACLC,mBAAmB,EAAE,EAAE;MACvBC,aAAa,EAAE;QACbC,gBAAgB,EAAE;MACpB,CAAC;MACDC,sBAAsB,EAAE,IAAI;MAC5BC,oBAAoB,EAAE,KAAK;MAC3BC,SAAS,EAAE,KAAK;MAChBC,kBAAkB,EAAE;QAClBC,QAAQ,EAAE,EAAE;QACZC,MAAM,EAAE,EAAE;QACVjB,cAAc,EAAE,IAAI,CAACA,cAAc;QACnCkB,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,IAAI;QACdC,YAAY,EAAE,EAAE;QAChBC,YAAY,EAAE,IAAI;QAClBC,YAAY,EAAE,EAAE;QAChBX,gBAAgB,EAAE,EAAE;QACpBY,gBAAgB,EAAE;MACpB,CAAC;MACDC,yBAAyB,EAAE;QACzB,GAAG,IAAI,CAACT,kBAAkB;QAC1BH,sBAAsB,EAAE;MAC1B,CAAC;MACDa,KAAK,EAAE;QACLT,QAAQ,EAAE,CAACtB,QAAQ,EAAEE,yBAAyB,CAAC,EAAE,CAAC,CAAC;QACnDqB,MAAM,EAAE,CAACvB,QAAQ,EAAEE,yBAAyB,CAAC,GAAG,CAAC,EAAED,gBAAgB,CAAC;QACpEuB,QAAQ,EAAE,CAACxB,QAAQ,EAAEE,yBAAyB,CAAC,GAAG,CAAC,CAAC;QACpDuB,QAAQ,EAAE,CAACvB,yBAAyB,CAAC,EAAE,CAAC,CAAC;QACzCwB,YAAY,EAAE,CAAC1B,QAAQ,EAAEE,yBAAyB,CAAC,GAAG,CAAC,CAAC;QACxDyB,YAAY,EAAE,CAACzB,yBAAyB,CAAC,GAAG,CAAC,CAAC;QAC9C0B,YAAY,EAAE,CAAC1B,yBAAyB,CAAC,EAAE,CAAC,CAAC;QAC7Ce,gBAAgB,EAAE,CAACf,yBAAyB,CAAC,EAAE,CAAC,CAAC;QACjD2B,gBAAgB,EAAE,CAChB7B,QAAQ,EACRE,yBAAyB,CAAC,GAAG,CAAC,EAC9BD,gBAAgB;MAEpB;IACF,CAAC;EACH,CAAC;EACD+B,OAAO,GAAG;IACR,IAAI,CAACZ,SAAQ,GAAI,IAAI;IACrB,IAAI,CAACV,IAAG,CACLuB,OAAO,CAAC;MACPC,MAAM,EAAE,KAAK;MACbC,GAAG,EAAE;IACP,CAAC,EACAC,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAACvB;MAAI,IAAIuB,QAAQ,CAACvB,IAAI;MAC5B,IAAI,CAACO,kBAAkB,CAACC,QAAO,GAAIR,IAAI,CAACQ,QAAQ;MAChD,IAAI,CAACD,kBAAkB,CAACE,MAAK,GAAIT,IAAI,CAACS,MAAM;MAC5C,IAAI,CAACF,kBAAkB,CAACG,QAAO,GAAIV,IAAI,CAACU,QAAQ;MAChD,IAAI,CAACH,kBAAkB,CAACI,QAAO,GAAIX,IAAI,CAACW,QAAQ;MAChD,IAAI,CAACJ,kBAAkB,CAACK,YAAW,GAAIZ,IAAI,CAACY,YAAY;MACxD,IAAI,CAACX,mBAAkB,GAAID,IAAI,CAACY,YAAW,GAAI,QAAO,GAAI,EAAE;MAC5D,IAAI,CAACL,kBAAkB,CAACO,YAAW,GAAId,IAAI,CAACc,YAAW,IAAK,MAAM;MAClE,IAAI,CAACP,kBAAkB,CAACQ,gBAAe,GAAIf,IAAI,CAACe,gBAAgB;MAChE,IAAI,CAACX,sBAAqB,GAAIJ,IAAI,CAACG,gBAAe,KAAM,KAAK;MAC7D,IAAI,CAACa,yBAAwB,GAAI;QAC/B,GAAG,IAAI,CAACT,kBAAkB;QAC1BH,sBAAsB,EAAE,IAAI,CAACA;MAC/B,CAAC;MACD,IAAI,CAACJ,IAAI,CAACY,YAAY,EAAE;QACtB,IAAI,CAACK,KAAK,CAACJ,YAAY,CAACW,IAAI,CAACtC,QAAQ,CAAC;MACxC;IACF,CAAC,EACAuC,OAAO,CAAC,MAAM;MACb,IAAI,CAACnB,SAAQ,GAAI,KAAK;IACxB,CAAC,CAAC;EACN,CAAC;EAEDoB,OAAO,EAAE;IACPC,MAAM,GAAG;MACP,IAAI,CAACrB,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACV,IAAG,CACLuB,OAAO,CAAC;QACPC,MAAM,EAAE,KAAK;QACbpB,IAAI,EAAE;UACJQ,QAAQ,EAAE,IAAI,CAACD,kBAAkB,CAACC,QAAQ;UAC1CC,MAAM,EAAE,IAAI,CAACF,kBAAkB,CAACE,MAAM;UACtCC,QAAQ,EAAE,IAAI,CAACH,kBAAkB,CAACG,QAAQ;UAC1CC,QAAQ,EAAEiB,QAAQ,CAAC,IAAI,CAACrB,kBAAkB,CAACI,QAAQ,CAAC;UACpDC,YAAY,EACV,IAAI,CAACL,kBAAkB,CAACO,YAAW,KAAM,OAAM,GAC3C,IAAI,CAACP,kBAAkB,CAACK,YAAW,GACnC,EAAE;UACRC,YAAY,EACV,IAAI,CAACN,kBAAkB,CAACM,YAAW,KAAM,EAAC,GACtC,IAAG,GACH,IAAI,CAACN,kBAAkB,CAACM,YAAY;UAC1CC,YAAY,EAAE,IAAI,CAACP,kBAAkB,CAACO,YAAY;UAClDX,gBAAgB,EAAE,IAAI,CAACC,sBAAqB,GAAI,KAAI,GAAI,MAAM;UAC9DW,gBAAgB,EAAE,IAAI,CAACR,kBAAkB,CAACQ;QAC5C;MACF,CAAC,EACAO,IAAI,CAAEC,QAAQ,IAAK;QAClB,MAAMM,eAAc,GAAIN,QAAQ,CAACvB,IAAI,CAAC8B,IAAI,EAAED,eAAe;QAC3D,IAAIA,eAAc,KAAM,KAAK,IAAI,CAACxB,oBAAoB,EAAE;UACtD,IAAI,CAAC0B,MAAM,CAACC,OAAO,CAAC;YAClBC,KAAK,EAAE,IAAI,CAACC,EAAE,CAAC,iBAAiB,CAAC;YACjCC,OAAO,EAAE,IAAI,CAACD,EAAE,CAAC,uBAAuB;UAC1C,CAAC,CAAC;QACJ,OAAO,IAAIL,eAAc,KAAM,KAAK,IAAI,CAACxB,oBAAoB,EAAE;UAC7D,IAAI,CAAC0B,MAAM,CAACK,IAAI,CAAC;YACfH,KAAK,EAAE,IAAI,CAACC,EAAE,CAAC,gBAAgB,CAAC;YAChCC,OAAO,EAAE,IAAI,CAACD,EAAE,CAAC,2BAA2B;UAC9C,CAAC,CAAC;QACJ;QACA,OAAO,IAAI,CAACH,MAAM,CAACM,WAAW,EAAE;MAClC,CAAC,EACAf,IAAI,CAAC,MAAM;QACV,IAAI,CAAChB,SAAQ,GAAI,KAAK;MACxB,CAAC,CAAC;IACN,CAAC;IACDgC,OAAO,GAAG;MACR,IAAI,CAAC/B,kBAAiB,GAAI;QAAC,GAAG,IAAI,CAACS;MAAyB,CAAC;MAC7D,IAAI,CAACZ,sBAAqB,GACxB,IAAI,CAACY,yBAAyB,CAACZ,sBAAsB;IACzD;EACF;AACF,CAAC","names":["APIService","required","validEmailFormat","shouldNotExceedCharLength","OxdSwitchInput","components","props","pathToSendmail","type","String","setup","http","window","appGlobal","baseUrl","data","passwordPlaceHolder","defaultValues","smtpSecurityType","useTLSSecureConnection","sendTestMailEditable","isLoading","emailConfiguration","mailType","sentAs","smtpHost","smtpPort","smtpUsername","smtpPassword","smtpAuthType","testEmailAddress","initialEmailConfiguration","rules","created","request","method","url","then","response","push","finally","methods","onSave","parseInt","testEmailStatus","meta","$toast","success","title","$t","message","warn","saveSuccess","onReset"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\pages\\emailConfiguration\\ViewEmailConfiguration.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text class=\"orangehrm-main-title\">\n        {{ $t('admin.email_configuration') }}\n      </oxd-text>\n\n      <oxd-divider />\n\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"emailConfiguration.sentAs\"\n                :label=\"$t('admin.mail_sent_as')\"\n                :rules=\"rules.sentAs\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-group :label=\"$t('admin.sending_method')\">\n                <div class=\"send-method-div\">\n                  <oxd-input-field\n                    v-model=\"emailConfiguration.mailType\"\n                    type=\"radio\"\n                    :option-label=\"$t('admin.secure_smtp')\"\n                    value=\"smtps\"\n                  />\n                  <oxd-input-field\n                    v-model=\"emailConfiguration.mailType\"\n                    type=\"radio\"\n                    :option-label=\"$t('admin.smtp')\"\n                    value=\"smtp\"\n                  />\n                  <oxd-input-field\n                    v-model=\"emailConfiguration.mailType\"\n                    type=\"radio\"\n                    :option-label=\"$t('admin.sendmail')\"\n                    value=\"sendmail\"\n                  />\n                </div>\n              </oxd-input-group>\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <oxd-form-row v-if=\"emailConfiguration.mailType === 'sendmail'\">\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-group :label=\"$t('admin.path_to_sendmail')\">\n                <oxd-text tag=\"p\" class=\"sendmail-path-value\">\n                  {{ emailConfiguration.pathToSendmail }}\n                </oxd-text>\n              </oxd-input-group>\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <oxd-form-row v-if=\"emailConfiguration.mailType !== 'sendmail'\">\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"emailConfiguration.smtpHost\"\n                :label=\"$t('admin.smtp_host')\"\n                :rules=\"rules.smtpHost\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"emailConfiguration.smtpPort\"\n                :label=\"$t('admin.smtp_port')\"\n                :rules=\"rules.smtpPort\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <oxd-form-row v-if=\"emailConfiguration.mailType !== 'sendmail'\">\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-group\n                :label=\"$t('admin.use_smtp_authentication')\"\n                :classes=\"{wrapper: '--status-grouped-field'}\"\n              >\n                <oxd-input-field\n                  v-model=\"emailConfiguration.smtpAuthType\"\n                  type=\"radio\"\n                  :option-label=\"$t('general.yes')\"\n                  value=\"login\"\n                />\n                <oxd-input-field\n                  v-model=\"emailConfiguration.smtpAuthType\"\n                  type=\"radio\"\n                  :option-label=\"$t('general.no')\"\n                  value=\"none\"\n                />\n              </oxd-input-group>\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <oxd-form-row\n          v-if=\"\n            emailConfiguration.mailType !== 'sendmail' &&\n            emailConfiguration.smtpAuthType === 'login'\n          \"\n        >\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"emailConfiguration.smtpUsername\"\n                :label=\"$t('admin.smtp_user')\"\n                :rules=\"rules.smtpUsername\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"emailConfiguration.smtpPassword\"\n                :label=\"$t('admin.smtp_password')\"\n                :rules=\"rules.smtpPassword\"\n                type=\"password\"\n                :placeholder=\"passwordPlaceHolder\"\n                required\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <oxd-form-row\n          v-if=\"emailConfiguration.mailType !== 'sendmail'\"\n          class=\"orangehrm-input-field-bottom-space\"\n        >\n          <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item class=\"organization-name-container\">\n              <div class=\"orangehrm-optional-field-row\">\n                <oxd-text tag=\"p\" class=\"orangehrm-optional-field-label\">\n                  {{ $t('admin.tls') }}\n                </oxd-text>\n                <oxd-switch-input v-model=\"useTLSSecureConnection\" />\n              </div>\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <oxd-form-row v-if=\"emailConfiguration.mailType !== 'sendmail'\">\n          <oxd-grid :cols=\"1\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item class=\"organization-name-container\">\n              <oxd-text tag=\"p\" class=\"tls-hint\">\n                {{\n                  $t(\n                    'admin.optional_the_mail_server_requires_the_use_of_tls_security',\n                  )\n                }}\n              </oxd-text>\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-form-row>\n          <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item class=\"organization-name-container\">\n              <div class=\"orangehrm-optional-field-row\">\n                <oxd-text tag=\"p\" class=\"orangehrm-optional-field-label\">\n                  {{ $t('admin.send_test_email') }}\n                </oxd-text>\n                <oxd-switch-input v-model=\"sendTestMailEditable\" />\n              </div>\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <oxd-form-row v-if=\"sendTestMailEditable\">\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"emailConfiguration.testEmailAddress\"\n                :label=\"$t('admin.test_email_address')\"\n                :rules=\"rules.testEmailAddress\"\n                :disabled=\"!sendTestMailEditable\"\n                required\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-divider />\n\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            display-type=\"ghost\"\n            :label=\"$t('general.reset')\"\n            @click=\"onReset\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport {\n  required,\n  validEmailFormat,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport {OxdSwitchInput} from '@ohrm/oxd';\n\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput,\n  },\n  props: {\n    pathToSendmail: {\n      type: String,\n      required: true,\n    },\n  },\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/admin/email-configuration',\n    );\n    return {\n      http,\n    };\n  },\n\n  data() {\n    return {\n      passwordPlaceHolder: '',\n      defaultValues: {\n        smtpSecurityType: 'tls',\n      },\n      useTLSSecureConnection: true,\n      sendTestMailEditable: false,\n      isLoading: false,\n      emailConfiguration: {\n        mailType: '',\n        sentAs: '',\n        pathToSendmail: this.pathToSendmail,\n        smtpHost: '',\n        smtpPort: null,\n        smtpUsername: '',\n        smtpPassword: null,\n        smtpAuthType: '',\n        smtpSecurityType: '',\n        testEmailAddress: '',\n      },\n      initialEmailConfiguration: {\n        ...this.emailConfiguration,\n        useTLSSecureConnection: false,\n      },\n      rules: {\n        mailType: [required, shouldNotExceedCharLength(50)],\n        sentAs: [required, shouldNotExceedCharLength(100), validEmailFormat],\n        smtpHost: [required, shouldNotExceedCharLength(100)],\n        smtpPort: [shouldNotExceedCharLength(10)],\n        smtpUsername: [required, shouldNotExceedCharLength(100)],\n        smtpPassword: [shouldNotExceedCharLength(100)],\n        smtpAuthType: [shouldNotExceedCharLength(50)],\n        smtpSecurityType: [shouldNotExceedCharLength(50)],\n        testEmailAddress: [\n          required,\n          shouldNotExceedCharLength(250),\n          validEmailFormat,\n        ],\n      },\n    };\n  },\n  created() {\n    this.isLoading = true;\n    this.http\n      .request({\n        method: 'GET',\n        url: '/api/v2/admin/email-configuration',\n      })\n      .then((response) => {\n        const {data} = response.data;\n        this.emailConfiguration.mailType = data.mailType;\n        this.emailConfiguration.sentAs = data.sentAs;\n        this.emailConfiguration.smtpHost = data.smtpHost;\n        this.emailConfiguration.smtpPort = data.smtpPort;\n        this.emailConfiguration.smtpUsername = data.smtpUsername;\n        this.passwordPlaceHolder = data.smtpUsername ? '******' : '';\n        this.emailConfiguration.smtpAuthType = data.smtpAuthType ?? 'none';\n        this.emailConfiguration.testEmailAddress = data.testEmailAddress;\n        this.useTLSSecureConnection = data.smtpSecurityType === 'tls';\n        this.initialEmailConfiguration = {\n          ...this.emailConfiguration,\n          useTLSSecureConnection: this.useTLSSecureConnection,\n        };\n        if (!data.smtpUsername) {\n          this.rules.smtpPassword.push(required);\n        }\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .request({\n          method: 'PUT',\n          data: {\n            mailType: this.emailConfiguration.mailType,\n            sentAs: this.emailConfiguration.sentAs,\n            smtpHost: this.emailConfiguration.smtpHost,\n            smtpPort: parseInt(this.emailConfiguration.smtpPort),\n            smtpUsername:\n              this.emailConfiguration.smtpAuthType === 'login'\n                ? this.emailConfiguration.smtpUsername\n                : '',\n            smtpPassword:\n              this.emailConfiguration.smtpPassword === ''\n                ? null\n                : this.emailConfiguration.smtpPassword,\n            smtpAuthType: this.emailConfiguration.smtpAuthType,\n            smtpSecurityType: this.useTLSSecureConnection ? 'tls' : 'none',\n            testEmailAddress: this.emailConfiguration.testEmailAddress,\n          },\n        })\n        .then((response) => {\n          const testEmailStatus = response.data.meta?.testEmailStatus;\n          if (testEmailStatus === 1 && this.sendTestMailEditable) {\n            this.$toast.success({\n              title: this.$t('general.success'),\n              message: this.$t('admin.test_email_sent'),\n            });\n          } else if (testEmailStatus === 0 && this.sendTestMailEditable) {\n            this.$toast.warn({\n              title: this.$t('general.failed'),\n              message: this.$t('admin.test_email_not_sent'),\n            });\n          }\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          this.isLoading = false;\n        });\n    },\n    onReset() {\n      this.emailConfiguration = {...this.initialEmailConfiguration};\n      this.useTLSSecureConnection =\n        this.initialEmailConfiguration.useTLSSecureConnection;\n    },\n  },\n};\n</script>\n\n<style src=\"./email-configuration.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}