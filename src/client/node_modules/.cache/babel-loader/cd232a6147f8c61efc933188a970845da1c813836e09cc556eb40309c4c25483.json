{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { required, validSelection, validDateFormat, validTimeFormat, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport { navigate } from '@/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport CandidateActionLayout from '@/orangehrmRecruitmentPlugin/components/CandidateActionLayout.vue';\nimport InterviewerAutocomplete from '@/orangehrmRecruitmentPlugin/components/InterviewerAutocomplete.vue';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst interviewModel = {\n  interviewName: null,\n  interviewDate: null,\n  interviewTime: null,\n  note: null\n};\nexport default {\n  components: {\n    'candidate-action-layout': CandidateActionLayout,\n    'interviewer-autocomplete': InterviewerAutocomplete\n  },\n  props: {\n    candidateId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/recruitment/candidates/${props.candidateId}/shedule-interview`);\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      http,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      interview: {\n        ...interviewModel\n      },\n      interviewers: [null],\n      rules: {\n        interviewName: [required, shouldNotExceedCharLength(100)],\n        interviewDate: [required, validDateFormat(this.userDateFormat)],\n        interviewTime: [validTimeFormat],\n        interviewerName: [required, validSelection, value => {\n          return this.interviewers.filter(interviewer => interviewer && interviewer.id === value?.id).length < 2 ? true : this.$t('general.already_exists');\n        }],\n        note: [shouldNotExceedCharLength(2000)]\n      }\n    };\n  },\n  methods: {\n    onAddAnother() {\n      if (this.interviewers.length < 5) {\n        this.interviewers.push(null);\n      }\n    },\n    onRemoveInterviewer(index) {\n      this.interviewers.splice(index, 1);\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        ...this.interview,\n        interviewerEmpNumbers: this.interviewers.map(interviewer => interviewer?.id).filter(Number)\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        navigate('/recruitment/addCandidate/{id}', {\n          id: this.candidateId\n        });\n      });\n    },\n    onClickBack() {\n      navigate('/recruitment/addCandidate/{id}', {\n        id: this.candidateId\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["required","validSelection","validDateFormat","validTimeFormat","shouldNotExceedCharLength","navigate","APIService","CandidateActionLayout","InterviewerAutocomplete","useDateFormat","interviewModel","interviewName","interviewDate","interviewTime","note","components","props","candidateId","type","Number","setup","http","window","appGlobal","baseUrl","userDateFormat","data","isLoading","interview","interviewers","rules","interviewerName","value","filter","interviewer","id","length","$t","methods","onAddAnother","push","onRemoveInterviewer","index","splice","onSave","create","interviewerEmpNumbers","map","then","$toast","updateSuccess","onClickBack"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmRecruitmentPlugin\\pages\\InterviewScheduleAction.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <candidate-action-layout\n      v-model:loading=\"isLoading\"\n      :candidate-id=\"candidateId\"\n      :title=\"$t('recruitment.schedule_interview')\"\n      @submit-valid=\"onSave\"\n    >\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"interview.interviewName\"\n              :rules=\"rules.interviewName\"\n              :label=\"$t('recruitment.interview_title')\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item class=\"--offset-row-2\">\n            <interviewer-autocomplete\n              v-for=\"(interviewer, index) in interviewers\"\n              :key=\"index\"\n              v-model=\"interviewers[index]\"\n              :show-delete=\"index > 0\"\n              :rules=\"\n                rules.interviewerName.filter((_, i) => index === 0 || i > 0)\n              \"\n              include-employees=\"onlyCurrent\"\n              required\n              @remove=\"onRemoveInterviewer(index)\"\n            />\n            <oxd-button\n              v-if=\"interviewers.length < 5\"\n              icon-name=\"plus\"\n              display-type=\"text\"\n              class=\"orangehrm-input-field-bottom-space\"\n              :label=\"$t('general.add_another')\"\n              @click=\"onAddAnother\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item class=\"--offset-row-2\">\n            <date-input\n              v-model=\"interview.interviewDate\"\n              :rules=\"rules.interviewDate\"\n              :label=\"$t('general.date')\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item class=\"--offset-row-2\">\n            <time-input\n              v-model=\"interview.interviewTime\"\n              :rules=\"rules.interviewTime\"\n              :label=\"$t('general.time')\"\n            />\n          </oxd-grid-item>\n\n          <oxd-grid-item class=\"--offset-row-3 --span-column-2\">\n            <oxd-input-field\n              v-model=\"interview.note\"\n              :rules=\"rules.note\"\n              :label=\"$t('general.notes')\"\n              :placeholder=\"$t('general.type_here')\"\n              type=\"textarea\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-divider />\n      <required-text></required-text>\n      <oxd-form-actions>\n        <oxd-button\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onClickBack\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </candidate-action-layout>\n  </div>\n</template>\n\n<script>\nimport {\n  required,\n  validSelection,\n  validDateFormat,\n  validTimeFormat,\n  shouldNotExceedCharLength,\n} from '@/core/util/validation/rules';\nimport {navigate} from '@/core/util/helper/navigation';\nimport {APIService} from '@/core/util/services/api.service';\nimport CandidateActionLayout from '@/orangehrmRecruitmentPlugin/components/CandidateActionLayout.vue';\nimport InterviewerAutocomplete from '@/orangehrmRecruitmentPlugin/components/InterviewerAutocomplete.vue';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\n\nconst interviewModel = {\n  interviewName: null,\n  interviewDate: null,\n  interviewTime: null,\n  note: null,\n};\n\nexport default {\n  components: {\n    'candidate-action-layout': CandidateActionLayout,\n    'interviewer-autocomplete': InterviewerAutocomplete,\n  },\n  props: {\n    candidateId: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/recruitment/candidates/${props.candidateId}/shedule-interview`,\n    );\n    const {userDateFormat} = useDateFormat();\n\n    return {\n      http,\n      userDateFormat,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      interview: {...interviewModel},\n      interviewers: [null],\n      rules: {\n        interviewName: [required, shouldNotExceedCharLength(100)],\n        interviewDate: [required, validDateFormat(this.userDateFormat)],\n        interviewTime: [validTimeFormat],\n        interviewerName: [\n          required,\n          validSelection,\n          (value) => {\n            return this.interviewers.filter(\n              (interviewer) => interviewer && interviewer.id === value?.id,\n            ).length < 2\n              ? true\n              : this.$t('general.already_exists');\n          },\n        ],\n        note: [shouldNotExceedCharLength(2000)],\n      },\n    };\n  },\n  methods: {\n    onAddAnother() {\n      if (this.interviewers.length < 5) {\n        this.interviewers.push(null);\n      }\n    },\n    onRemoveInterviewer(index) {\n      this.interviewers.splice(index, 1);\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .create({\n          ...this.interview,\n          interviewerEmpNumbers: this.interviewers\n            .map((interviewer) => interviewer?.id)\n            .filter(Number),\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          navigate('/recruitment/addCandidate/{id}', {id: this.candidateId});\n        });\n    },\n    onClickBack() {\n      navigate('/recruitment/addCandidate/{id}', {id: this.candidateId});\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}