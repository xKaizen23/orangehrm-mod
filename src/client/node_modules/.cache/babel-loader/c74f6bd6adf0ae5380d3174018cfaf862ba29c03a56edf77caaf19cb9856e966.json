{"ast":null,"code":"import { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength, validFileTypes, maxFileSize } from '@ohrm/core/util/validation/rules';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nconst initialJobTitle = {\n  title: '',\n  description: '',\n  specification: null,\n  note: ''\n};\nexport default {\n  props: {\n    allowedFileTypes: {\n      type: Array,\n      required: true\n    },\n    maxFileSize: {\n      type: Number,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/job-titles');\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const jobTitleUniqueValidation = createUniqueValidator('JobTitle', 'jobTitleName', {\n      matchByField: 'isDeleted',\n      matchByValue: 'false'\n    });\n    return {\n      http,\n      jobTitleUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      jobTitle: {\n        ...initialJobTitle\n      },\n      rules: {\n        title: [required, this.jobTitleUniqueValidation, shouldNotExceedCharLength(100)],\n        description: [shouldNotExceedCharLength(400)],\n        specification: [validFileTypes(this.allowedFileTypes), maxFileSize(this.maxFileSize)],\n        note: [shouldNotExceedCharLength(400)]\n      }\n    };\n  },\n  computed: {\n    formattedFileSize() {\n      return Math.round(this.maxFileSize / (1024 * 1024) * 100) / 100;\n    }\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/viewJobTitleList');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        ...this.jobTitle\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAyFA,SAAQA,QAAQ,QAAO,mCAAmC;AAC1D,SAAQC,UAAU,QAAO,kCAAkC;AAC3D,SACEC,QAAQ,EACRC,yBAAyB,EACzBC,cAAc,EACdC,WAAW,QACN,kCAAkC;AACzC,OAAOC,mBAAkB,MAAO,4CAA4C;AAE5E,MAAMC,eAAc,GAAI;EACtBC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE,EAAE;EACfC,aAAa,EAAE,IAAI;EACnBC,IAAI,EAAE;AACR,CAAC;AAED,eAAe;EACbC,KAAK,EAAE;IACLC,gBAAgB,EAAE;MAChBC,IAAI,EAAEC,KAAK;MACXb,QAAQ,EAAE;IACZ,CAAC;IACDG,WAAW,EAAE;MACXS,IAAI,EAAEE,MAAM;MACZd,QAAQ,EAAE;IACZ;EACF,CAAC;EAEDe,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIjB,UAAU,CACzBkB,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,0BAA0B,CAC3B;IACD,MAAM;MAACC;IAAqB,IAAIhB,mBAAmB,CAACY,IAAI,CAAC;IACzD,MAAMK,wBAAuB,GAAID,qBAAqB,CACpD,UAAU,EACV,cAAc,EACd;MACEE,YAAY,EAAE,WAAW;MACzBC,YAAY,EAAE;IAChB,CAAC,CACF;IAED,OAAO;MACLP,IAAI;MACJK;IACF,CAAC;EACH,CAAC;EAEDG,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,QAAQ,EAAE;QAAC,GAAGrB;MAAe,CAAC;MAC9BsB,KAAK,EAAE;QACLrB,KAAK,EAAE,CACLN,QAAQ,EACR,IAAI,CAACqB,wBAAwB,EAC7BpB,yBAAyB,CAAC,GAAG,CAAC,CAC/B;QACDM,WAAW,EAAE,CAACN,yBAAyB,CAAC,GAAG,CAAC,CAAC;QAC7CO,aAAa,EAAE,CACbN,cAAc,CAAC,IAAI,CAACS,gBAAgB,CAAC,EACrCR,WAAW,CAAC,IAAI,CAACA,WAAW,CAAC,CAC9B;QACDM,IAAI,EAAE,CAACR,yBAAyB,CAAC,GAAG,CAAC;MACvC;IACF,CAAC;EACH,CAAC;EAED2B,QAAQ,EAAE;IACRC,iBAAiB,GAAG;MAClB,OAAOC,IAAI,CAACC,KAAK,CAAE,IAAI,CAAC5B,WAAU,IAAK,IAAG,GAAI,IAAI,CAAC,GAAI,GAAG,IAAI,GAAG;IACnE;EACF,CAAC;EAED6B,OAAO,EAAE;IACPC,QAAQ,GAAG;MACTnC,QAAQ,CAAC,yBAAyB,CAAC;IACrC,CAAC;IACDoC,MAAM,GAAG;MACP,IAAI,CAACT,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACT,IAAG,CACLmB,MAAM,CAAC;QACN,GAAG,IAAI,CAACT;MACV,CAAC,EACAU,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACC,MAAM,CAACC,WAAW,EAAE;MAClC,CAAC,EACAF,IAAI,CAAC,MAAM;QACV,IAAI,CAACH,QAAQ,EAAE;MACjB,CAAC,CAAC;IACN;EACF;AACF,CAAC","names":["navigate","APIService","required","shouldNotExceedCharLength","validFileTypes","maxFileSize","useServerValidation","initialJobTitle","title","description","specification","note","props","allowedFileTypes","type","Array","Number","setup","http","window","appGlobal","baseUrl","createUniqueValidator","jobTitleUniqueValidation","matchByField","matchByValue","data","isLoading","jobTitle","rules","computed","formattedFileSize","Math","round","methods","onCancel","onSave","create","then","$toast","saveSuccess"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\pages\\jobTitle\\SaveJobTitle.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('admin.add_job_title') }}\n      </oxd-text>\n\n      <oxd-divider />\n\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-input-field\n            v-model=\"jobTitle.title\"\n            :label=\"$t('general.job_title')\"\n            :rules=\"rules.title\"\n            required\n          />\n        </oxd-form-row>\n\n        <oxd-form-row>\n          <oxd-input-field\n            v-model=\"jobTitle.description\"\n            type=\"textarea\"\n            :label=\"$t('admin.job_description')\"\n            :placeholder=\"$t('general.type_description_here')\"\n            :rules=\"rules.description\"\n          />\n        </oxd-form-row>\n\n        <oxd-form-row>\n          <oxd-input-field\n            v-model=\"jobTitle.specification\"\n            type=\"file\"\n            :label=\"$t('general.job_specification')\"\n            :button-label=\"$t('general.browse')\"\n            :rules=\"rules.specification\"\n          />\n          <oxd-text class=\"orangehrm-input-hint\" tag=\"p\">\n            {{ $t('general.accepts_up_to_n_mb', {count: formattedFileSize}) }}\n          </oxd-text>\n        </oxd-form-row>\n\n        <oxd-form-row>\n          <oxd-input-field\n            v-model=\"jobTitle.note\"\n            type=\"textarea\"\n            :label=\"$t('general.note')\"\n            :placeholder=\"$t('general.add_note')\"\n            label-icon=\"pencil-square\"\n            :rules=\"rules.note\"\n          />\n        </oxd-form-row>\n\n        <oxd-divider />\n\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {APIService} from '@/core/util/services/api.service';\nimport {\n  required,\n  shouldNotExceedCharLength,\n  validFileTypes,\n  maxFileSize,\n} from '@ohrm/core/util/validation/rules';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\n\nconst initialJobTitle = {\n  title: '',\n  description: '',\n  specification: null,\n  note: '',\n};\n\nexport default {\n  props: {\n    allowedFileTypes: {\n      type: Array,\n      required: true,\n    },\n    maxFileSize: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/admin/job-titles',\n    );\n    const {createUniqueValidator} = useServerValidation(http);\n    const jobTitleUniqueValidation = createUniqueValidator(\n      'JobTitle',\n      'jobTitleName',\n      {\n        matchByField: 'isDeleted',\n        matchByValue: 'false',\n      },\n    );\n\n    return {\n      http,\n      jobTitleUniqueValidation,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      jobTitle: {...initialJobTitle},\n      rules: {\n        title: [\n          required,\n          this.jobTitleUniqueValidation,\n          shouldNotExceedCharLength(100),\n        ],\n        description: [shouldNotExceedCharLength(400)],\n        specification: [\n          validFileTypes(this.allowedFileTypes),\n          maxFileSize(this.maxFileSize),\n        ],\n        note: [shouldNotExceedCharLength(400)],\n      },\n    };\n  },\n\n  computed: {\n    formattedFileSize() {\n      return Math.round((this.maxFileSize / (1024 * 1024)) * 100) / 100;\n    },\n  },\n\n  methods: {\n    onCancel() {\n      navigate('/admin/viewJobTitleList');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .create({\n          ...this.jobTitle,\n        })\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}