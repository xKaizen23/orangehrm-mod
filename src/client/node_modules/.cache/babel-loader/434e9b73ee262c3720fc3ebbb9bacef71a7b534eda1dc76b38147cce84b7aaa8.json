{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport useForm from '@/core/util/composable/useForm';\nimport { APIService } from '@/core/util/services/api.service';\nimport PasswordInput from '@/core/components/inputs/PasswordInput';\nconst userModel = {\n  currentPassword: '',\n  password: '',\n  passwordConfirm: ''\n};\nexport default {\n  components: {\n    'password-input': PasswordInput\n  },\n  props: {\n    userName: {\n      type: String,\n      required: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/core/update-password');\n    const {\n      formRef,\n      reset\n    } = useForm();\n    return {\n      http,\n      formRef,\n      reset\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      user: {\n        ...userModel\n      },\n      rules: {\n        currentPassword: [required, shouldNotExceedCharLength(64)]\n      }\n    };\n  },\n  methods: {\n    onCancel() {\n      window.history.back();\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'PUT',\n        url: '/api/v2/pim/update-password',\n        data: {\n          newPassword: this.user.password,\n          currentPassword: this.user.currentPassword\n        },\n        validateStatus: status => {\n          return status >= 200 && status < 300 || status === 422;\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          this.reset();\n          return this.$toast.saveSuccess();\n        } else {\n          return this.$toast.error({\n            title: this.$t('general.error'),\n            message: this.$t('pim.current_password_is_incorrect')\n          });\n        }\n      }).finally(() => this.isLoading = false);\n    }\n  }\n};","map":{"version":3,"mappings":"AAwEA,SACEA,QAAQ,EACRC,yBAAyB,QACpB,kCAAkC;AACzC,OAAOC,OAAM,MAAO,gCAAgC;AACpD,SAAQC,UAAU,QAAO,kCAAkC;AAC3D,OAAOC,aAAY,MAAO,wCAAwC;AAElE,MAAMC,SAAQ,GAAI;EAChBC,eAAe,EAAE,EAAE;EACnBC,QAAQ,EAAE,EAAE;EACZC,eAAe,EAAE;AACnB,CAAC;AAED,eAAe;EACbC,UAAU,EAAE;IACV,gBAAgB,EAAEL;EACpB,CAAC;EACDM,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEC,MAAM;MACZb,QAAQ,EAAE;IACZ;EACF,CAAC;EACDc,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIZ,UAAU,CACzBa,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,8BAA8B,CAC/B;IACD,MAAM;MAACC,OAAO;MAAEC;IAAK,IAAIlB,OAAO,EAAE;IAClC,OAAO;MACLa,IAAI;MACJI,OAAO;MACPC;IACF,CAAC;EACH,CAAC;EAEDC,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,IAAI,EAAE;QAAC,GAAGlB;MAAS,CAAC;MACpBmB,KAAK,EAAE;QACLlB,eAAe,EAAE,CAACN,QAAQ,EAAEC,yBAAyB,CAAC,EAAE,CAAC;MAC3D;IACF,CAAC;EACH,CAAC;EAEDwB,OAAO,EAAE;IACPC,QAAQ,GAAG;MACTV,MAAM,CAACW,OAAO,CAACC,IAAI,EAAE;IACvB,CAAC;IACDC,MAAM,GAAG;MACP,IAAI,CAACP,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACP,IAAG,CACLe,OAAO,CAAC;QACPC,MAAM,EAAE,KAAK;QACbC,GAAG,EAAE,6BAA6B;QAClCX,IAAI,EAAE;UACJY,WAAW,EAAE,IAAI,CAACV,IAAI,CAAChB,QAAQ;UAC/BD,eAAe,EAAE,IAAI,CAACiB,IAAI,CAACjB;QAC7B,CAAC;QACD4B,cAAc,EAAGC,MAAM,IAAK;UAC1B,OAAQA,MAAK,IAAK,GAAE,IAAKA,MAAK,GAAI,GAAG,IAAKA,MAAK,KAAM,GAAG;QAC1D;MACF,CAAC,EACAC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAIA,QAAQ,CAACF,MAAK,KAAM,GAAG,EAAE;UAC3B,IAAI,CAACf,KAAK,EAAE;UACZ,OAAO,IAAI,CAACkB,MAAM,CAACC,WAAW,EAAE;QAClC,OAAO;UACL,OAAO,IAAI,CAACD,MAAM,CAACE,KAAK,CAAC;YACvBC,KAAK,EAAE,IAAI,CAACC,EAAE,CAAC,eAAe,CAAC;YAC/BC,OAAO,EAAE,IAAI,CAACD,EAAE,CAAC,mCAAmC;UACtD,CAAC,CAAC;QACJ;MACF,CAAC,EACAE,OAAO,CAAC,MAAO,IAAI,CAACtB,SAAQ,GAAI,KAAM,CAAC;IAC5C;EACF;AACF,CAAC","names":["required","shouldNotExceedCharLength","useForm","APIService","PasswordInput","userModel","currentPassword","password","passwordConfirm","components","props","userName","type","String","setup","http","window","appGlobal","baseUrl","formRef","reset","data","isLoading","user","rules","methods","onCancel","history","back","onSave","request","method","url","newPassword","validateStatus","status","then","response","$toast","saveSuccess","error","title","$t","message","finally"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\pages\\updatePassword\\UpdatePassword.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('pim.update_password') }}\n      </oxd-text>\n      <oxd-divider />\n\n      <oxd-form ref=\"formRef\" :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-group :label=\"$t('general.username')\">\n                <oxd-text class=\"orangehrm-user-name\" tag=\"p\">\n                  {{ userName }}\n                </oxd-text>\n              </oxd-input-group>\n            </oxd-grid-item>\n\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"user.currentPassword\"\n                type=\"password\"\n                :label=\"$t('pim.current_password')\"\n                :rules=\"rules.currentPassword\"\n                required\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <password-input\n          v-model:password=\"user.password\"\n          v-model:passwordConfirm=\"user.passwordConfirm\"\n        />\n\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            type=\"button\"\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport useForm from '@/core/util/composable/useForm';\nimport {APIService} from '@/core/util/services/api.service';\nimport PasswordInput from '@/core/components/inputs/PasswordInput';\n\nconst userModel = {\n  currentPassword: '',\n  password: '',\n  passwordConfirm: '',\n};\n\nexport default {\n  components: {\n    'password-input': PasswordInput,\n  },\n  props: {\n    userName: {\n      type: String,\n      required: true,\n    },\n  },\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/core/update-password',\n    );\n    const {formRef, reset} = useForm();\n    return {\n      http,\n      formRef,\n      reset,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      user: {...userModel},\n      rules: {\n        currentPassword: [required, shouldNotExceedCharLength(64)],\n      },\n    };\n  },\n\n  methods: {\n    onCancel() {\n      window.history.back();\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .request({\n          method: 'PUT',\n          url: '/api/v2/pim/update-password',\n          data: {\n            newPassword: this.user.password,\n            currentPassword: this.user.currentPassword,\n          },\n          validateStatus: (status) => {\n            return (status >= 200 && status < 300) || status === 422;\n          },\n        })\n        .then((response) => {\n          if (response.status === 200) {\n            this.reset();\n            return this.$toast.saveSuccess();\n          } else {\n            return this.$toast.error({\n              title: this.$t('general.error'),\n              message: this.$t('pim.current_password_is_incorrect'),\n            });\n          }\n        })\n        .finally(() => (this.isLoading = false));\n    },\n  },\n};\n</script>\n\n<style src=\"./update-password.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}