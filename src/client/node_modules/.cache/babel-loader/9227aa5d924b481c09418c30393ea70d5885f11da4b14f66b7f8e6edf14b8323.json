{"ast":null,"code":"import { renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-e48ae654\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"orangehrm-background-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"orangehrm-paper-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_text = _resolveComponent(\"oxd-text\");\n  const _component_oxd_pagination = _resolveComponent(\"oxd-pagination\");\n  const _component_oxd_report_table = _resolveComponent(\"oxd-report-table\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_renderSlot(_ctx.$slots, \"default\", {\n    generateReport: $setup.generateReport\n  }, undefined, true), $setup.headers.length !== 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_oxd_report_table, {\n    items: $setup.items,\n    headers: $setup.headers,\n    loading: $setup.isLoading,\n    \"column-count\": $setup.colCount,\n    \"can-focus\": $props.canFocus,\n    range: $props.range\n  }, {\n    pagination: _withCtx(() => [_createVNode(_component_oxd_text, {\n      class: \"oxd-text--count\",\n      tag: \"span\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('general.n_records_found', {\n        count: $setup.total\n      })), 1)]),\n      _: 1\n    }), $setup.showPaginator ? (_openBlock(), _createBlock(_component_oxd_pagination, {\n      key: 0,\n      current: $setup.currentPage,\n      \"onUpdate:current\": _cache[0] || (_cache[0] = $event => $setup.currentPage = $event),\n      length: $setup.pages\n    }, null, 8, [\"current\", \"length\"])) : _createCommentVNode(\"\", true)]),\n    footer: _withCtx(() => [_createVNode(_component_oxd_text, {\n      class: \"oxd-text--footer\",\n      tag: \"span\"\n    }, {\n      default: _withCtx(() => [_renderSlot(_ctx.$slots, \"footer\", {\n        data: $setup.response\n      }, undefined, true)]),\n      _: 3\n    })]),\n    _: 3\n  }, 8, [\"items\", \"headers\", \"loading\", \"column-count\", \"can-focus\", \"range\"])])) : _createCommentVNode(\"\", true)]);\n}","map":{"version":3,"mappings":";;;EAoBOA,KAAK,EAAC;AAAgC;;;EAERA,KAAK,EAAC;;;;;;uBAFzCC,oBA4BM,OA5BNC,UA4BM,GA3BJC,YAA+CC;IAAxCC,cAAe,EAAEC;EAAc,qBAC3BA,cAAO,CAACC,MAAM,wBAAzBN,oBAyBM,OAzBNO,UAyBM,GAxBJC,aAuBmBC;IAtBhBC,KAAK,EAAEL,YAAK;IACZM,OAAO,EAAEN,cAAO;IAChBO,OAAO,EAAEP,gBAAS;IAClB,cAAY,EAAEA,eAAQ;IACtB,WAAS,EAAEQ,eAAQ;IACnBC,KAAK,EAAED;;IAEGE,UAAU,WACnB,MAEW,CAFXP,aAEWQ;MAFDjB,KAAK,EAAC,iBAAiB;MAACkB,GAAG,EAAC;;wBACpC,MAAmD,mCAAhDd,OAAE;QAAAe,OAAoCb;MAAK;;QAGxCA,oBAAa,kBADrBc,aAIEC;;MAFQC,OAAO,EAAEhB,kBAAW;8DAAXA,kBAAW;MAC3BC,MAAM,EAAED;;IAGFiB,MAAM,WACf,MAEW,CAFXd,aAEWQ;MAFDjB,KAAK,EAAC,kBAAkB;MAACkB,GAAG,EAAC;;wBACrC,MAA4C,CAA5Cf,YAA4CC;QAAvBoB,IAAI,EAAElB;MAAQ","names":["class","_createElementBlock","_hoisted_1","_renderSlot","_ctx","generateReport","$setup","length","_hoisted_2","_createVNode","_component_oxd_report_table","items","headers","loading","$props","range","pagination","_component_oxd_text","tag","count","_createBlock","_component_oxd_pagination","current","footer","data"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\core\\components\\table\\ReportsTable.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <slot :generate-report=\"generateReport\"></slot>\n    <div v-if=\"headers.length !== 0\" class=\"orangehrm-paper-container\">\n      <oxd-report-table\n        :items=\"items\"\n        :headers=\"headers\"\n        :loading=\"isLoading\"\n        :column-count=\"colCount\"\n        :can-focus=\"canFocus\"\n        :range=\"range\"\n      >\n        <template #pagination>\n          <oxd-text class=\"oxd-text--count\" tag=\"span\">\n            {{ $t('general.n_records_found', {count: total}) }}\n          </oxd-text>\n          <oxd-pagination\n            v-if=\"showPaginator\"\n            v-model:current=\"currentPage\"\n            :length=\"pages\"\n          />\n        </template>\n        <template #footer>\n          <oxd-text class=\"oxd-text--footer\" tag=\"span\">\n            <slot name=\"footer\" :data=\"response\"></slot>\n          </oxd-text>\n        </template>\n      </oxd-report-table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {computed, onBeforeMount, ref, watch} from 'vue';\nimport {APIService} from '@/core/util/services/api.service';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport {CellAdapter, OxdMultilineCell, OxdReportTable} from '@ohrm/oxd';\n\nexport default {\n  name: 'ReportsTable',\n\n  components: {\n    'oxd-report-table': OxdReportTable,\n  },\n\n  props: {\n    name: {\n      type: String,\n      required: true,\n    },\n    module: {\n      type: String,\n      required: true,\n    },\n    prefetch: {\n      type: Boolean,\n      default: false,\n    },\n    filters: {\n      type: Object,\n      default: () => ({}),\n    },\n    columnCount: {\n      type: Number,\n      default: null,\n      required: false,\n    },\n    canFocus: {\n      type: Boolean,\n      default: false,\n      required: false,\n    },\n    range: {\n      type: Boolean,\n      default: false,\n      required: false,\n    },\n  },\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/${props.module}/reports/data`,\n    );\n\n    const headers = ref([]);\n    const colCount = ref(props.columnCount ? props.columnCount : 0);\n    const serializedFilters = computed(() => {\n      return {...props.filters, name: props.name, _dateFormattingEnabled: true};\n    });\n\n    const {\n      total,\n      pages,\n      response,\n      isLoading,\n      currentPage,\n      showPaginator,\n      execQuery: fetchTableData,\n    } = usePaginate(http, {\n      query: serializedFilters,\n      prefetch: false,\n    });\n\n    const items = computed(() => {\n      const _items = Array.isArray(response.value.data)\n        ? response.value.data\n        : [];\n      return _items.map((item) => {\n        let _rows = 0;\n        for (const key in item) {\n          const value = item[key];\n          if (Array.isArray(value) && value.length > _rows)\n            _rows = value.length;\n        }\n        return {...item, _rows};\n      });\n    });\n\n    const setupTableHeaders = (header) => {\n      delete header['size'];\n      const {type, ...rest} = header.cellProperties ?? {};\n      const cellProperties = function ({prop, model}) {\n        const url = model?._url ? model?._url[prop] : undefined;\n        return {\n          ...rest,\n          onClick: url ? () => navigate(url) : undefined,\n        };\n      };\n      return {\n        ...header,\n        cellProperties,\n        cellTemplate:\n          type === 'list' ? CellAdapter(OxdMultilineCell) : undefined,\n      };\n    };\n\n    const fetchTableHeaders = async () => {\n      isLoading.value = true;\n      http\n        .request({\n          method: 'GET',\n          url: `/api/v2/${props.module}/reports`,\n          params: {\n            name: serializedFilters.value.name,\n            reportId: serializedFilters.value?.reportId,\n          },\n        })\n        .then((response) => {\n          const {data, meta} = response.data;\n          headers.value = data.headers.map((header) => {\n            if (header?.children && Array.isArray(header.children)) {\n              header.children = header.children.map((child) =>\n                setupTableHeaders(child),\n              );\n              return header;\n            } else {\n              return setupTableHeaders(header);\n            }\n          });\n          if (meta.headers?.columnCount) {\n            colCount.value = meta.headers.columnCount;\n          }\n          isLoading.value = false;\n        });\n    };\n\n    const generateReport = async () => {\n      if (headers.value.length === 0) await fetchTableHeaders();\n      await fetchTableData();\n    };\n\n    watch(\n      () => props.name,\n      () => {\n        headers.value = [];\n      },\n    );\n\n    props.prefetch && onBeforeMount(() => generateReport());\n\n    return {\n      total,\n      pages,\n      items,\n      headers,\n      colCount,\n      response,\n      isLoading,\n      currentPage,\n      showPaginator,\n      generateReport,\n    };\n  },\n};\n</script>\n\n<style src=\"./reports-table.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}