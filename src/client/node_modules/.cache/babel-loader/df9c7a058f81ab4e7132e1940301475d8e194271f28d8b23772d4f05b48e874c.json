{"ast":null,"code":"import { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport { APIService } from '@/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { OxdSpinner } from '@ohrm/oxd';\nexport default {\n  name: 'LdapSyncConnection',\n  components: {\n    'oxd-loading-spinner': OxdSpinner\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/ldap/user-sync');\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    return {\n      http,\n      jsDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      lastSyncDate: null,\n      lastSyncTime: null,\n      lastSyncStatus: null\n    };\n  },\n  computed: {\n    lastSync() {\n      if (this.lastSyncStatus === 2) return null;\n      if (this.lastSyncDate && this.lastSyncTime) {\n        const parsedDateTime = parseDate(`${this.lastSyncDate} ${this.lastSyncTime} +00:00`, 'yyyy-MM-dd HH:mm xxx');\n        return this.$t(this.lastSyncStatus === 1 ? 'admin.last_synced_on_datetime' : 'admin.last_sync_failed_on_datetime', {\n          datetime: formatDate(parsedDateTime, `hh:mm a ${this.jsDateFormat}`)\n        });\n      } else {\n        return null;\n      }\n    }\n  },\n  beforeMount() {\n    this.getLastSyncStatus();\n  },\n  methods: {\n    getLastSyncStatus() {\n      this.isLoading = true;\n      this.http.getAll().then(response => {\n        const {\n          data\n        } = response.data;\n        this.lastSyncStatus = data.syncStatus;\n        this.lastSyncDate = data.syncFinishedAt?.date || data.syncStartedAt?.date;\n        this.lastSyncTime = data.syncFinishedAt?.time || data.syncStartedAt?.time;\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    onClickSync() {\n      this.isLoading = true;\n      this.http.create().then(response => {\n        const {\n          data\n        } = response.data;\n        this.lastSyncStatus = data.syncStatus;\n        this.lastSyncDate = data.syncFinishedAt?.date || data.syncStartedAt?.date;\n        this.lastSyncTime = data.syncFinishedAt?.time || data.syncStartedAt?.time;\n        this.$toast.success({\n          title: this.$t('general.success'),\n          message: this.$t('admin.synchronization_successful')\n        });\n      }).catch(() => {\n        this.getLastSyncStatus();\n        this.$toast.error({\n          title: this.$t('general.error'),\n          message: this.$t('admin.synchronization_failed')\n        });\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["formatDate","parseDate","APIService","useDateFormat","OxdSpinner","name","components","setup","http","window","appGlobal","baseUrl","jsDateFormat","data","isLoading","lastSyncDate","lastSyncTime","lastSyncStatus","computed","lastSync","parsedDateTime","$t","datetime","beforeMount","getLastSyncStatus","methods","getAll","then","response","syncStatus","syncFinishedAt","date","syncStartedAt","time","finally","onClickSync","create","$toast","success","title","message","catch","error"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\components\\LdapSyncConnection.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-paper-container\">\n    <div class=\"orangehrm-header-container\">\n      <div class=\"orangehrm-ldap-sync\">\n        <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n          {{ $t('admin.sync_connection') }}\n        </oxd-text>\n        <oxd-text\n          v-show=\"lastSync\"\n          type=\"card-body\"\n          class=\"orangehrm-ldap-sync-time\"\n        >\n          ({{ lastSync }})\n        </oxd-text>\n      </div>\n      <oxd-loading-spinner\n        v-if=\"isLoading\"\n        class=\"orangehrm-ldap-sync-loader\"\n      />\n      <oxd-button\n        v-else\n        display-type=\"secondary\"\n        class=\"orangehrm-ldap-sync-button\"\n        :label=\"$t('admin.sync_now')\"\n        @click=\"onClickSync\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport {formatDate, parseDate} from '@/core/util/helper/datefns';\nimport {APIService} from '@/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport {OxdSpinner} from '@ohrm/oxd';\n\nexport default {\n  name: 'LdapSyncConnection',\n  components: {\n    'oxd-loading-spinner': OxdSpinner,\n  },\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/admin/ldap/user-sync',\n    );\n    const {jsDateFormat} = useDateFormat();\n\n    return {\n      http,\n      jsDateFormat,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      lastSyncDate: null,\n      lastSyncTime: null,\n      lastSyncStatus: null,\n    };\n  },\n  computed: {\n    lastSync() {\n      if (this.lastSyncStatus === 2) return null;\n      if (this.lastSyncDate && this.lastSyncTime) {\n        const parsedDateTime = parseDate(\n          `${this.lastSyncDate} ${this.lastSyncTime} +00:00`,\n          'yyyy-MM-dd HH:mm xxx',\n        );\n        return this.$t(\n          this.lastSyncStatus === 1\n            ? 'admin.last_synced_on_datetime'\n            : 'admin.last_sync_failed_on_datetime',\n          {\n            datetime: formatDate(\n              parsedDateTime,\n              `hh:mm a ${this.jsDateFormat}`,\n            ),\n          },\n        );\n      } else {\n        return null;\n      }\n    },\n  },\n  beforeMount() {\n    this.getLastSyncStatus();\n  },\n  methods: {\n    getLastSyncStatus() {\n      this.isLoading = true;\n      this.http\n        .getAll()\n        .then((response) => {\n          const {data} = response.data;\n          this.lastSyncStatus = data.syncStatus;\n          this.lastSyncDate =\n            data.syncFinishedAt?.date || data.syncStartedAt?.date;\n          this.lastSyncTime =\n            data.syncFinishedAt?.time || data.syncStartedAt?.time;\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n    },\n    onClickSync() {\n      this.isLoading = true;\n      this.http\n        .create()\n        .then((response) => {\n          const {data} = response.data;\n          this.lastSyncStatus = data.syncStatus;\n          this.lastSyncDate =\n            data.syncFinishedAt?.date || data.syncStartedAt?.date;\n          this.lastSyncTime =\n            data.syncFinishedAt?.time || data.syncStartedAt?.time;\n          this.$toast.success({\n            title: this.$t('general.success'),\n            message: this.$t('admin.synchronization_successful'),\n          });\n        })\n        .catch(() => {\n          this.getLastSyncStatus();\n          this.$toast.error({\n            title: this.$t('general.error'),\n            message: this.$t('admin.synchronization_failed'),\n          });\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n    },\n  },\n};\n</script>\n\n<style src=\"./ldap-sync-connection.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}