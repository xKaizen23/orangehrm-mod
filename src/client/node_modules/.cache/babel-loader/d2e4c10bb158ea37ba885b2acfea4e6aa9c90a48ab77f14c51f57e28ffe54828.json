{"ast":null,"code":"import usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nexport default {\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog\n  },\n  props: {\n    customFieldLimit: {\n      type: Number,\n      required: true\n    },\n    screenList: {\n      type: Array,\n      required: true\n    },\n    fieldTypeList: {\n      type: Array,\n      required: true\n    },\n    unselectableIds: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/pim/custom-fields');\n    const dataNormalizer = data => {\n      return data.map(item => {\n        const selectable = props.unselectableIds.findIndex(id => id == item.id);\n        return {\n          id: item.id,\n          fieldName: item.fieldName,\n          screen: props.screenList.filter(screen => {\n            return item.screen === screen.id;\n          })[0].label,\n          fieldType: props.fieldTypeList.filter(fieldType => {\n            return item.fieldType === fieldType.id;\n          })[0].label,\n          extraData: item.extraData,\n          isSelectable: selectable === -1\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery\n    } = usePaginate(http, {\n      normalizer: dataNormalizer\n    });\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total: total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response\n    };\n  },\n  data() {\n    return {\n      screenWidth: screen.width,\n      headers: [{\n        name: 'fieldName',\n        slot: 'title',\n        title: this.$t('pim.custom_field_name'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'screen',\n        title: this.$t('pim.screen'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'fieldType',\n        title: this.$t('pim.field_type'),\n        style: {\n          flex: 2\n        }\n      }, {\n        name: 'actions',\n        title: this.$t('general.actions'),\n        slot: 'action',\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          delete: {\n            onClick: this.onClickDelete,\n            component: 'oxd-icon-button',\n            props: {\n              name: 'trash'\n            }\n          },\n          edit: {\n            onClick: this.onClickEdit,\n            props: {\n              name: 'pencil-fill'\n            }\n          }\n        }\n      }],\n      checkedItems: []\n    };\n  },\n  computed: {\n    isLoaded() {\n      return !this.isLoading;\n    },\n    remainingFields() {\n      return this.customFieldLimit - this.items?.data?.length;\n    }\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/pim/saveCustomFields');\n    },\n    onClickEdit(item) {\n      navigate('/pim/saveCustomFields/{id}', {\n        id: item.id\n      });\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map(index => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      const isSelectable = this.unselectableIds.findIndex(id => id == item.id);\n      if (isSelectable > -1) {\n        return this.$toast.error({\n          title: this.$t('general.error'),\n          message: this.$t('pim.custom_fields_in_use')\n        });\n      }\n      this.$refs.deleteDialog.showDialog().then(confirmation => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http.deleteAll({\n          ids: items\n        }).then(() => {\n          return this.$toast.deleteSuccess();\n        }).then(() => {\n          this.isLoading = false;\n          this.resetDataTable();\n        });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    }\n  }\n};","map":{"version":3,"mappings":"AA4EA,OAAOA,WAAU,MAAO,wCAAwC;AAChE,OAAOC,wBAAuB,MAAO,mDAAmD;AACxF,SAAQC,QAAQ,QAAO,mCAAmC;AAC1D,SAAQC,UAAU,QAAO,sCAAsC;AAE/D,eAAe;EACbC,UAAU,EAAE;IACV,qBAAqB,EAAEH;EACzB,CAAC;EACDI,KAAK,EAAE;IACLC,gBAAgB,EAAE;MAChBC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,UAAU,EAAE;MACVH,IAAI,EAAEI,KAAK;MACXF,QAAQ,EAAE;IACZ,CAAC;IACDG,aAAa,EAAE;MACbL,IAAI,EAAEI,KAAK;MACXF,QAAQ,EAAE;IACZ,CAAC;IACDI,eAAe,EAAE;MACfN,IAAI,EAAEI,KAAK;MACXG,OAAO,EAAE,MAAM;IACjB;EACF,CAAC;EAEDC,KAAK,CAACV,KAAK,EAAE;IACX,MAAMW,IAAG,GAAI,IAAIb,UAAU,CACzBc,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,2BAA2B,CAC5B;IACD,MAAMC,cAAa,GAAKC,IAAI,IAAK;MAC/B,OAAOA,IAAI,CAACC,GAAG,CAAEC,IAAI,IAAK;QACxB,MAAMC,UAAS,GAAInB,KAAK,CAACQ,eAAe,CAACY,SAAS,CAC/CC,EAAE,IAAKA,EAAC,IAAKH,IAAI,CAACG,EAAE,CACtB;QACD,OAAO;UACLA,EAAE,EAAEH,IAAI,CAACG,EAAE;UACXC,SAAS,EAAEJ,IAAI,CAACI,SAAS;UACzBC,MAAM,EAAEvB,KAAK,CAACK,UAAU,CAACmB,MAAM,CAAED,MAAM,IAAK;YAC1C,OAAOL,IAAI,CAACK,MAAK,KAAMA,MAAM,CAACF,EAAE;UAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACI,KAAK;UACXC,SAAS,EAAE1B,KAAK,CAACO,aAAa,CAACiB,MAAM,CAAEE,SAAS,IAAK;YACnD,OAAOR,IAAI,CAACQ,SAAQ,KAAMA,SAAS,CAACL,EAAE;UACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACI,KAAK;UACXE,SAAS,EAAET,IAAI,CAACS,SAAS;UACzBC,YAAY,EAAET,UAAS,KAAM,CAAC;QAChC,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;IACD,MAAM;MACJU,aAAa;MACbC,WAAW;MACXC,KAAK;MACLC,KAAK;MACLC,QAAQ;MACRC,QAAQ;MACRC,SAAS;MACTC;IACF,IAAIzC,WAAW,CAACgB,IAAI,EAAE;MAAC0B,UAAU,EAAEtB;IAAc,CAAC,CAAC;IAEnD,OAAO;MACLJ,IAAI;MACJkB,aAAa;MACbC,WAAW;MACXK,SAAS;MACTJ,KAAK,EAAEA,KAAK;MACZC,KAAK;MACLC,QAAQ;MACRG,SAAS;MACTE,KAAK,EAAEJ;IACT,CAAC;EACH,CAAC;EAEDlB,IAAI,GAAG;IACL,OAAO;MACLuB,WAAW,EAAEhB,MAAM,CAACiB,KAAK;MACzBC,OAAO,EAAE,CACP;QACEC,IAAI,EAAE,WAAW;QACjBC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,IAAI,CAACC,EAAE,CAAC,uBAAuB,CAAC;QACvCC,KAAK,EAAE;UAACC,IAAI,EAAE;QAAC;MACjB,CAAC,EACD;QAACL,IAAI,EAAE,QAAQ;QAAEE,KAAK,EAAE,IAAI,CAACC,EAAE,CAAC,YAAY,CAAC;QAAEC,KAAK,EAAE;UAACC,IAAI,EAAE;QAAC;MAAC,CAAC,EAChE;QAACL,IAAI,EAAE,WAAW;QAAEE,KAAK,EAAE,IAAI,CAACC,EAAE,CAAC,gBAAgB,CAAC;QAAEC,KAAK,EAAE;UAACC,IAAI,EAAE;QAAC;MAAC,CAAC,EACvE;QACEL,IAAI,EAAE,SAAS;QACfE,KAAK,EAAE,IAAI,CAACC,EAAE,CAAC,iBAAiB,CAAC;QACjCF,IAAI,EAAE,QAAQ;QACdG,KAAK,EAAE;UAACC,IAAI,EAAE;QAAC,CAAC;QAChBC,QAAQ,EAAE,wBAAwB;QAClCC,UAAU,EAAE;UACVC,MAAM,EAAE;YACNC,OAAO,EAAE,IAAI,CAACC,aAAa;YAC3BC,SAAS,EAAE,iBAAiB;YAC5BrD,KAAK,EAAE;cACL0C,IAAI,EAAE;YACR;UACF,CAAC;UACDY,IAAI,EAAE;YACJH,OAAO,EAAE,IAAI,CAACI,WAAW;YACzBvD,KAAK,EAAE;cACL0C,IAAI,EAAE;YACR;UACF;QACF;MACF,CAAC,CACF;MACDc,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EAEDC,QAAQ,EAAE;IACRC,QAAQ,GAAG;MACT,OAAO,CAAC,IAAI,CAACvB,SAAS;IACxB,CAAC;IACDwB,eAAe,GAAG;MAChB,OAAO,IAAI,CAAC1D,gBAAe,GAAI,IAAI,CAACqC,KAAK,EAAEtB,IAAI,EAAE4C,MAAM;IACzD;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,UAAU,GAAG;MACXjE,QAAQ,CAAC,uBAAuB,CAAC;IACnC,CAAC;IACD0D,WAAW,CAACrC,IAAI,EAAE;MAChBrB,QAAQ,CAAC,4BAA4B,EAAE;QAACwB,EAAE,EAAEH,IAAI,CAACG;MAAE,CAAC,CAAC;IACvD,CAAC;IACD0C,qBAAqB,GAAG;MACtB,MAAMC,GAAE,GAAI,IAAI,CAACR,YAAY,CAACvC,GAAG,CAAEgD,KAAK,IAAK;QAC3C,OAAO,IAAI,CAAC3B,KAAK,EAAEtB,IAAI,CAACiD,KAAK,CAAC,CAAC5C,EAAE;MACnC,CAAC,CAAC;MACF,IAAI,CAAC6C,KAAK,CAACC,YAAY,CAACC,UAAU,EAAE,CAACC,IAAI,CAAEC,YAAY,IAAK;QAC1D,IAAIA,YAAW,KAAM,IAAI,EAAE;UACzB,IAAI,CAACC,WAAW,CAACP,GAAG,CAAC;QACvB;MACF,CAAC,CAAC;IACJ,CAAC;IACDZ,aAAa,CAAClC,IAAI,EAAE;MAClB,MAAMU,YAAW,GAAI,IAAI,CAACpB,eAAe,CAACY,SAAS,CAChDC,EAAE,IAAKA,EAAC,IAAKH,IAAI,CAACG,EAAE,CACtB;MACD,IAAIO,YAAW,GAAI,CAAC,CAAC,EAAE;QACrB,OAAO,IAAI,CAAC4C,MAAM,CAACC,KAAK,CAAC;UACvB7B,KAAK,EAAE,IAAI,CAACC,EAAE,CAAC,eAAe,CAAC;UAC/B6B,OAAO,EAAE,IAAI,CAAC7B,EAAE,CAAC,0BAA0B;QAC7C,CAAC,CAAC;MACJ;MACA,IAAI,CAACqB,KAAK,CAACC,YAAY,CAACC,UAAU,EAAE,CAACC,IAAI,CAAEC,YAAY,IAAK;QAC1D,IAAIA,YAAW,KAAM,IAAI,EAAE;UACzB,IAAI,CAACC,WAAW,CAAC,CAACrD,IAAI,CAACG,EAAE,CAAC,CAAC;QAC7B;MACF,CAAC,CAAC;IACJ,CAAC;IACDkD,WAAW,CAACjC,KAAK,EAAE;MACjB,IAAIA,KAAI,YAAahC,KAAK,EAAE;QAC1B,IAAI,CAAC6B,SAAQ,GAAI,IAAI;QACrB,IAAI,CAACxB,IAAG,CACLgE,SAAS,CAAC;UACTX,GAAG,EAAE1B;QACP,CAAC,EACA+B,IAAI,CAAC,MAAM;UACV,OAAO,IAAI,CAACG,MAAM,CAACI,aAAa,EAAE;QACpC,CAAC,EACAP,IAAI,CAAC,MAAM;UACV,IAAI,CAAClC,SAAQ,GAAI,KAAK;UACtB,IAAI,CAAC0C,cAAc,EAAE;QACvB,CAAC,CAAC;MACN;IACF,CAAC;IACD,MAAMA,cAAc,GAAG;MACrB,IAAI,CAACrB,YAAW,GAAI,EAAE;MACtB,MAAM,IAAI,CAACpB,SAAS,EAAE;IACxB;EACF;AACF,CAAC","names":["usePaginate","DeleteConfirmationDialog","navigate","APIService","components","props","customFieldLimit","type","Number","required","screenList","Array","fieldTypeList","unselectableIds","default","setup","http","window","appGlobal","baseUrl","dataNormalizer","data","map","item","selectable","findIndex","id","fieldName","screen","filter","label","fieldType","extraData","isSelectable","showPaginator","currentPage","total","pages","pageSize","response","isLoading","execQuery","normalizer","items","screenWidth","width","headers","name","slot","title","$t","style","flex","cellType","cellConfig","delete","onClick","onClickDelete","component","edit","onClickEdit","checkedItems","computed","isLoaded","remainingFields","length","methods","onClickAdd","onClickDeleteSelected","ids","index","$refs","deleteDialog","showDialog","then","confirmation","deleteItems","$toast","error","message","deleteAll","deleteSuccess","resetDataTable"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\pages\\customField\\CustomField.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-paper-container\">\n      <div class=\"orangehrm-header-container\">\n        <div class=\"orangehrm-custom-field-title\">\n          <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n            {{ $t('pim.custom_fields') }}\n          </oxd-text>\n          <template v-if=\"!isLoading\">\n            <oxd-text v-if=\"remainingFields > 0\" class=\"--infotext\" tag=\"p\">\n              {{ $t('pim.remaining_no_of_custom_fields') }}\n              {{ remainingFields }}\n            </oxd-text>\n            <oxd-text v-else class=\"--infotext\" tag=\"p\">\n              {{ $t('pim.all_custom_fields_in_use') }}\n            </oxd-text>\n          </template>\n        </div>\n        <oxd-button\n          v-if=\"remainingFields > 0\"\n          :label=\"$t('general.add')\"\n          icon-name=\"plus\"\n          display-type=\"secondary\"\n          @click=\"onClickAdd\"\n        />\n      </div>\n      <table-header\n        :selected=\"checkedItems.length\"\n        :total=\"total\"\n        :loading=\"isLoading\"\n        @delete=\"onClickDeleteSelected\"\n      ></table-header>\n      <div class=\"orangehrm-container\">\n        <oxd-card-table\n          v-model:selected=\"checkedItems\"\n          :loading=\"isLoading\"\n          :headers=\"headers\"\n          :items=\"items?.data\"\n          :selectable=\"true\"\n          :clickable=\"false\"\n          row-decorator=\"oxd-table-decorator-card\"\n        />\n      </div>\n      <div class=\"orangehrm-bottom-container\">\n        <oxd-pagination\n          v-if=\"showPaginator\"\n          v-model:current=\"currentPage\"\n          :length=\"pages\"\n        />\n      </div>\n    </div>\n\n    <delete-confirmation ref=\"deleteDialog\"></delete-confirmation>\n  </div>\n</template>\n\n<script>\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport DeleteConfirmationDialog from '@ohrm/components/dialogs/DeleteConfirmationDialog';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {APIService} from '@ohrm/core/util/services/api.service';\n\nexport default {\n  components: {\n    'delete-confirmation': DeleteConfirmationDialog,\n  },\n  props: {\n    customFieldLimit: {\n      type: Number,\n      required: true,\n    },\n    screenList: {\n      type: Array,\n      required: true,\n    },\n    fieldTypeList: {\n      type: Array,\n      required: true,\n    },\n    unselectableIds: {\n      type: Array,\n      default: () => [],\n    },\n  },\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/pim/custom-fields',\n    );\n    const dataNormalizer = (data) => {\n      return data.map((item) => {\n        const selectable = props.unselectableIds.findIndex(\n          (id) => id == item.id,\n        );\n        return {\n          id: item.id,\n          fieldName: item.fieldName,\n          screen: props.screenList.filter((screen) => {\n            return item.screen === screen.id;\n          })[0].label,\n          fieldType: props.fieldTypeList.filter((fieldType) => {\n            return item.fieldType === fieldType.id;\n          })[0].label,\n          extraData: item.extraData,\n          isSelectable: selectable === -1,\n        };\n      });\n    };\n    const {\n      showPaginator,\n      currentPage,\n      total,\n      pages,\n      pageSize,\n      response,\n      isLoading,\n      execQuery,\n    } = usePaginate(http, {normalizer: dataNormalizer});\n\n    return {\n      http,\n      showPaginator,\n      currentPage,\n      isLoading,\n      total: total,\n      pages,\n      pageSize,\n      execQuery,\n      items: response,\n    };\n  },\n\n  data() {\n    return {\n      screenWidth: screen.width,\n      headers: [\n        {\n          name: 'fieldName',\n          slot: 'title',\n          title: this.$t('pim.custom_field_name'),\n          style: {flex: 2},\n        },\n        {name: 'screen', title: this.$t('pim.screen'), style: {flex: 2}},\n        {name: 'fieldType', title: this.$t('pim.field_type'), style: {flex: 2}},\n        {\n          name: 'actions',\n          title: this.$t('general.actions'),\n          slot: 'action',\n          style: {flex: 1},\n          cellType: 'oxd-table-cell-actions',\n          cellConfig: {\n            delete: {\n              onClick: this.onClickDelete,\n              component: 'oxd-icon-button',\n              props: {\n                name: 'trash',\n              },\n            },\n            edit: {\n              onClick: this.onClickEdit,\n              props: {\n                name: 'pencil-fill',\n              },\n            },\n          },\n        },\n      ],\n      checkedItems: [],\n    };\n  },\n\n  computed: {\n    isLoaded() {\n      return !this.isLoading;\n    },\n    remainingFields() {\n      return this.customFieldLimit - this.items?.data?.length;\n    },\n  },\n  methods: {\n    onClickAdd() {\n      navigate('/pim/saveCustomFields');\n    },\n    onClickEdit(item) {\n      navigate('/pim/saveCustomFields/{id}', {id: item.id});\n    },\n    onClickDeleteSelected() {\n      const ids = this.checkedItems.map((index) => {\n        return this.items?.data[index].id;\n      });\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteItems(ids);\n        }\n      });\n    },\n    onClickDelete(item) {\n      const isSelectable = this.unselectableIds.findIndex(\n        (id) => id == item.id,\n      );\n      if (isSelectable > -1) {\n        return this.$toast.error({\n          title: this.$t('general.error'),\n          message: this.$t('pim.custom_fields_in_use'),\n        });\n      }\n      this.$refs.deleteDialog.showDialog().then((confirmation) => {\n        if (confirmation === 'ok') {\n          this.deleteItems([item.id]);\n        }\n      });\n    },\n    deleteItems(items) {\n      if (items instanceof Array) {\n        this.isLoading = true;\n        this.http\n          .deleteAll({\n            ids: items,\n          })\n          .then(() => {\n            return this.$toast.deleteSuccess();\n          })\n          .then(() => {\n            this.isLoading = false;\n            this.resetDataTable();\n          });\n      }\n    },\n    async resetDataTable() {\n      this.checkedItems = [];\n      await this.execQuery();\n    },\n  },\n};\n</script>\n\n<style src=\"./customField.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}