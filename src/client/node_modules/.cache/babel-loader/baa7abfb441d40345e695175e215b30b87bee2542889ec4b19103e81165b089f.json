{"ast":null,"code":"import { computed } from 'vue';\nimport { navigate } from '@/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport { formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\nconst defaultSortOrder = {\n  'performanceTracker.trackerName': 'DEFAULT',\n  'performanceTracker.addedDate': 'DEFAULT',\n  'performanceTracker.modifiedDate': 'DESC'\n};\nexport default {\n  setup() {\n    const {\n      sortDefinition,\n      sortField,\n      sortOrder,\n      onSort\n    } = useSort({\n      sortDefinition: defaultSortOrder\n    });\n    const serializedFilter = computed(() => {\n      return {\n        sortField: sortField.value,\n        sortOrder: sortOrder.value\n      };\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/performance/trackers');\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const trackerNormalizer = data => {\n      return data.map(item => {\n        return {\n          id: item.id,\n          tracker: item.trackerName,\n          addedDate: formatDate(parseDate(item.addedDate), jsDateFormat, {\n            locale\n          }),\n          modifiedDate: formatDate(parseDate(item.modifiedDate), jsDateFormat, {\n            locale\n          })\n        };\n      });\n    };\n    const {\n      currentPage,\n      total,\n      showPaginator,\n      pages,\n      pageSize,\n      response,\n      execQuery,\n      isLoading\n    } = usePaginate(http, {\n      query: serializedFilter,\n      normalizer: trackerNormalizer\n    });\n    onSort(execQuery);\n    return {\n      http,\n      total,\n      isLoading,\n      items: response,\n      execQuery,\n      sortDefinition,\n      showPaginator,\n      pages,\n      pageSize,\n      currentPage\n    };\n  },\n  data() {\n    return {\n      headers: [{\n        name: 'tracker',\n        slot: 'title',\n        title: this.$t('performance.tracker'),\n        sortField: 'performanceTracker.trackerName',\n        style: {\n          flex: '30%'\n        }\n      }, {\n        name: 'addedDate',\n        title: this.$t('performance.added_date'),\n        sortField: 'performanceTracker.addedDate',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'modifiedDate',\n        title: this.$t('performance.modified_date'),\n        sortField: 'performanceTracker.modifiedDate',\n        style: {\n          flex: 1\n        }\n      }, {\n        name: 'action',\n        slot: 'action',\n        title: this.$t('general.actions'),\n        style: {\n          flex: 1\n        },\n        cellType: 'oxd-table-cell-actions',\n        cellConfig: {\n          view: {\n            onClick: this.onClickView,\n            component: 'oxd-button',\n            props: {\n              name: 'view',\n              label: this.$t('general.view'),\n              displayType: 'text'\n            }\n          }\n        }\n      }]\n    };\n  },\n  methods: {\n    onClickView(item) {\n      navigate('/performance/addPerformanceTrackerLog/trackId/{id}?mode=my', {\n        id: item.id\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["computed","navigate","APIService","usePaginate","useSort","formatDate","parseDate","useDateFormat","useLocale","defaultSortOrder","setup","sortDefinition","sortField","sortOrder","onSort","serializedFilter","value","http","window","appGlobal","baseUrl","jsDateFormat","locale","trackerNormalizer","data","map","item","id","tracker","trackerName","addedDate","modifiedDate","currentPage","total","showPaginator","pages","pageSize","response","execQuery","isLoading","query","normalizer","items","headers","name","slot","title","$t","style","flex","cellType","cellConfig","view","onClick","onClickView","component","props","label","displayType","methods"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPerformancePlugin\\pages\\MyTracker.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-paper-container\">\n      <div class=\"orangehrm-header-container\">\n        <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n          {{ $t('performance.my_performance_trackers') }}\n        </oxd-text>\n      </div>\n      <table-header :selected=\"0\" :total=\"total\" :loading=\"isLoading\">\n      </table-header>\n      <div class=\"orangehrm-container\">\n        <oxd-card-table\n          v-model:order=\"sortDefinition\"\n          :headers=\"headers\"\n          :items=\"items?.data\"\n          :loading=\"isLoading\"\n          row-decorator=\"oxd-table-decorator-card\"\n        />\n      </div>\n      <div class=\"orangehrm-bottom-container\">\n        <oxd-pagination\n          v-if=\"showPaginator\"\n          v-model:current=\"currentPage\"\n          :length=\"pages\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport {computed} from 'vue';\nimport {navigate} from '@/core/util/helper/navigation';\nimport {APIService} from '@/core/util/services/api.service';\nimport usePaginate from '@ohrm/core/util/composable/usePaginate';\nimport useSort from '@ohrm/core/util/composable/useSort';\nimport {formatDate, parseDate} from '@ohrm/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\n\nconst defaultSortOrder = {\n  'performanceTracker.trackerName': 'DEFAULT',\n  'performanceTracker.addedDate': 'DEFAULT',\n  'performanceTracker.modifiedDate': 'DESC',\n};\n\nexport default {\n  setup() {\n    const {sortDefinition, sortField, sortOrder, onSort} = useSort({\n      sortDefinition: defaultSortOrder,\n    });\n\n    const serializedFilter = computed(() => {\n      return {\n        sortField: sortField.value,\n        sortOrder: sortOrder.value,\n      };\n    });\n\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/performance/trackers',\n    );\n    const {jsDateFormat} = useDateFormat();\n    const {locale} = useLocale();\n\n    const trackerNormalizer = (data) => {\n      return data.map((item) => {\n        return {\n          id: item.id,\n          tracker: item.trackerName,\n          addedDate: formatDate(parseDate(item.addedDate), jsDateFormat, {\n            locale,\n          }),\n          modifiedDate: formatDate(parseDate(item.modifiedDate), jsDateFormat, {\n            locale,\n          }),\n        };\n      });\n    };\n\n    const {\n      currentPage,\n      total,\n      showPaginator,\n      pages,\n      pageSize,\n      response,\n      execQuery,\n      isLoading,\n    } = usePaginate(http, {\n      query: serializedFilter,\n      normalizer: trackerNormalizer,\n    });\n\n    onSort(execQuery);\n\n    return {\n      http,\n      total,\n      isLoading,\n      items: response,\n      execQuery,\n      sortDefinition,\n      showPaginator,\n      pages,\n      pageSize,\n      currentPage,\n    };\n  },\n\n  data() {\n    return {\n      headers: [\n        {\n          name: 'tracker',\n          slot: 'title',\n          title: this.$t('performance.tracker'),\n          sortField: 'performanceTracker.trackerName',\n          style: {flex: '30%'},\n        },\n        {\n          name: 'addedDate',\n          title: this.$t('performance.added_date'),\n          sortField: 'performanceTracker.addedDate',\n          style: {flex: 1},\n        },\n        {\n          name: 'modifiedDate',\n          title: this.$t('performance.modified_date'),\n          sortField: 'performanceTracker.modifiedDate',\n          style: {flex: 1},\n        },\n        {\n          name: 'action',\n          slot: 'action',\n          title: this.$t('general.actions'),\n          style: {flex: 1},\n          cellType: 'oxd-table-cell-actions',\n          cellConfig: {\n            view: {\n              onClick: this.onClickView,\n              component: 'oxd-button',\n              props: {\n                name: 'view',\n                label: this.$t('general.view'),\n                displayType: 'text',\n              },\n            },\n          },\n        },\n      ],\n    };\n  },\n\n  methods: {\n    onClickView(item) {\n      navigate('/performance/addPerformanceTrackerLog/trackId/{id}?mode=my', {\n        id: item.id,\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}