{"ast":null,"code":"import { required, validDateFormat, endDateShouldBeAfterStartDate, digitsOnlyWithDecimalPoint, maxCurrency } from '@ohrm/core/util/validation/rules';\nimport { yearRange } from '@ohrm/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst membershipModel = {\n  membershipId: [],\n  subscriptionFee: '',\n  subscriptionPaidBy: null,\n  currencyTypeId: [],\n  subscriptionCommenceDate: '',\n  subscriptionRenewalDate: ''\n};\nexport default {\n  name: 'SaveMembership',\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    currencies: {\n      type: Array,\n      default: () => []\n    },\n    paidBy: {\n      type: Array,\n      default: () => []\n    },\n    memberships: {\n      type: Array,\n      default: () => []\n    }\n  },\n  emits: ['close'],\n  setup() {\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      membership: {\n        ...membershipModel\n      },\n      yearArray: [...yearRange()],\n      rules: {\n        membership: [required],\n        subscriptionCommenceDate: [validDateFormat(this.userDateFormat)],\n        subscriptionRenewalDate: [validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.membership.subscriptionCommenceDate, this.$t('pim.renewal_date_should_be_after_the_commencing_date'))],\n        subscriptionFee: [digitsOnlyWithDecimalPoint, maxCurrency(1000000000)]\n      }\n    };\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        subscriptionFee: this.membership.subscriptionFee,\n        subscriptionCommenceDate: this.membership.subscriptionCommenceDate,\n        subscriptionRenewalDate: this.membership.subscriptionRenewalDate,\n        membershipId: this.membership.membership.id,\n        subscriptionPaidBy: this.membership.subscriptionPaidBy?.id,\n        currencyTypeId: this.membership.currencyType?.id\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.membership = {\n          ...membershipModel\n        };\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"AA+FA,SACEA,QAAQ,EACRC,eAAe,EACfC,6BAA6B,EAC7BC,0BAA0B,EAC1BC,WAAW,QACN,kCAAkC;AACzC,SAAQC,SAAS,QAAO,mCAAmC;AAC3D,OAAOC,aAAY,MAAO,sCAAsC;AAEhE,MAAMC,eAAc,GAAI;EACtBC,YAAY,EAAE,EAAE;EAChBC,eAAe,EAAE,EAAE;EACnBC,kBAAkB,EAAE,IAAI;EACxBC,cAAc,EAAE,EAAE;EAClBC,wBAAwB,EAAE,EAAE;EAC5BC,uBAAuB,EAAE;AAC3B,CAAC;AAED,eAAe;EACbC,IAAI,EAAE,gBAAgB;EAEtBC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MAAM;MACZlB,QAAQ,EAAE;IACZ,CAAC;IACDmB,UAAU,EAAE;MACVF,IAAI,EAAEG,KAAK;MACXC,OAAO,EAAE,MAAM;IACjB,CAAC;IACDC,MAAM,EAAE;MACNL,IAAI,EAAEG,KAAK;MACXC,OAAO,EAAE,MAAM;IACjB,CAAC;IACDE,WAAW,EAAE;MACXN,IAAI,EAAEG,KAAK;MACXC,OAAO,EAAE,MAAM;IACjB;EACF,CAAC;EAEDG,KAAK,EAAE,CAAC,OAAO,CAAC;EAEhBC,KAAK,GAAG;IACN,MAAM;MAACC;IAAc,IAAIpB,aAAa,EAAE;IAExC,OAAO;MACLoB;IACF,CAAC;EACH,CAAC;EAEDC,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,UAAU,EAAE;QAAC,GAAGtB;MAAe,CAAC;MAChCuB,SAAS,EAAE,CAAC,GAAGzB,SAAS,EAAE,CAAC;MAC3B0B,KAAK,EAAE;QACLF,UAAU,EAAE,CAAC7B,QAAQ,CAAC;QACtBY,wBAAwB,EAAE,CAACX,eAAe,CAAC,IAAI,CAACyB,cAAc,CAAC,CAAC;QAChEb,uBAAuB,EAAE,CACvBZ,eAAe,CAAC,IAAI,CAACyB,cAAc,CAAC,EACpCxB,6BAA6B,CAC3B,MAAM,IAAI,CAAC2B,UAAU,CAACjB,wBAAwB,EAC9C,IAAI,CAACoB,EAAE,CAAC,sDAAsD,CAAC,CAChE,CACF;QACDvB,eAAe,EAAE,CAACN,0BAA0B,EAAEC,WAAW,CAAC,UAAU,CAAC;MACvE;IACF,CAAC;EACH,CAAC;EAED6B,OAAO,EAAE;IACPC,MAAM,GAAG;MACP,IAAI,CAACN,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACZ,IAAG,CACLmB,MAAM,CAAC;QACN1B,eAAe,EAAE,IAAI,CAACoB,UAAU,CAACpB,eAAe;QAChDG,wBAAwB,EAAE,IAAI,CAACiB,UAAU,CAACjB,wBAAwB;QAClEC,uBAAuB,EAAE,IAAI,CAACgB,UAAU,CAAChB,uBAAuB;QAChEL,YAAY,EAAE,IAAI,CAACqB,UAAU,CAACA,UAAU,CAACO,EAAE;QAC3C1B,kBAAkB,EAAE,IAAI,CAACmB,UAAU,CAACnB,kBAAkB,EAAE0B,EAAE;QAC1DzB,cAAc,EAAE,IAAI,CAACkB,UAAU,CAACQ,YAAY,EAAED;MAChD,CAAC,EACAE,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACC,MAAM,CAACC,WAAW,EAAE;MAClC,CAAC,EACAF,IAAI,CAAC,MAAM;QACV,IAAI,CAACT,UAAS,GAAI;UAAC,GAAGtB;QAAe,CAAC;QACtC,IAAI,CAACkC,QAAQ,EAAE;MACjB,CAAC,CAAC;IACN,CAAC;IACDA,QAAQ,GAAG;MACT,IAAI,CAACC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;IAC3B;EACF;AACF,CAAC","names":["required","validDateFormat","endDateShouldBeAfterStartDate","digitsOnlyWithDecimalPoint","maxCurrency","yearRange","useDateFormat","membershipModel","membershipId","subscriptionFee","subscriptionPaidBy","currencyTypeId","subscriptionCommenceDate","subscriptionRenewalDate","name","props","http","type","Object","currencies","Array","default","paidBy","memberships","emits","setup","userDateFormat","data","isLoading","membership","yearArray","rules","$t","methods","onSave","create","id","currencyType","then","$toast","saveSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\SaveMembership.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-horizontal-padding orangehrm-vertical-padding\">\n    <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n      {{ $t('general.add_membership') }}\n    </oxd-text>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"membership.membership\"\n              type=\"select\"\n              :label=\"$t('pim.membership')\"\n              :options=\"memberships\"\n              :rules=\"rules.membership\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"membership.subscriptionPaidBy\"\n              type=\"select\"\n              :label=\"$t('pim.subscription_paid_by')\"\n              :options=\"paidBy\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"membership.subscriptionFee\"\n              :label=\"$t('pim.subscription_amount')\"\n              :rules=\"rules.subscriptionFee\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"membership.currencyType\"\n              type=\"select\"\n              :label=\"$t('general.currency')\"\n              :options=\"currencies\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <date-input\n              v-model=\"membership.subscriptionCommenceDate\"\n              :label=\"$t('pim.subscription_commence_date')\"\n              :rules=\"rules.subscriptionCommenceDate\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <date-input\n              v-model=\"membership.subscriptionRenewalDate\"\n              :label=\"$t('pim.subscription_renewal_date')\"\n              :years=\"yearArray\"\n              :rules=\"rules.subscriptionRenewalDate\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </div>\n  <oxd-divider />\n</template>\n\n<script>\nimport {\n  required,\n  validDateFormat,\n  endDateShouldBeAfterStartDate,\n  digitsOnlyWithDecimalPoint,\n  maxCurrency,\n} from '@ohrm/core/util/validation/rules';\nimport {yearRange} from '@ohrm/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\n\nconst membershipModel = {\n  membershipId: [],\n  subscriptionFee: '',\n  subscriptionPaidBy: null,\n  currencyTypeId: [],\n  subscriptionCommenceDate: '',\n  subscriptionRenewalDate: '',\n};\n\nexport default {\n  name: 'SaveMembership',\n\n  props: {\n    http: {\n      type: Object,\n      required: true,\n    },\n    currencies: {\n      type: Array,\n      default: () => [],\n    },\n    paidBy: {\n      type: Array,\n      default: () => [],\n    },\n    memberships: {\n      type: Array,\n      default: () => [],\n    },\n  },\n\n  emits: ['close'],\n\n  setup() {\n    const {userDateFormat} = useDateFormat();\n\n    return {\n      userDateFormat,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      membership: {...membershipModel},\n      yearArray: [...yearRange()],\n      rules: {\n        membership: [required],\n        subscriptionCommenceDate: [validDateFormat(this.userDateFormat)],\n        subscriptionRenewalDate: [\n          validDateFormat(this.userDateFormat),\n          endDateShouldBeAfterStartDate(\n            () => this.membership.subscriptionCommenceDate,\n            this.$t('pim.renewal_date_should_be_after_the_commencing_date'),\n          ),\n        ],\n        subscriptionFee: [digitsOnlyWithDecimalPoint, maxCurrency(1000000000)],\n      },\n    };\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .create({\n          subscriptionFee: this.membership.subscriptionFee,\n          subscriptionCommenceDate: this.membership.subscriptionCommenceDate,\n          subscriptionRenewalDate: this.membership.subscriptionRenewalDate,\n          membershipId: this.membership.membership.id,\n          subscriptionPaidBy: this.membership.subscriptionPaidBy?.id,\n          currencyTypeId: this.membership.currencyType?.id,\n        })\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          this.membership = {...membershipModel};\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}