{"ast":null,"code":"import { required, validDateFormat, shouldNotExceedCharLength, endDateShouldBeAfterStartDate } from '@/core/util/validation/rules';\nimport { yearRange } from '@ohrm/core/util/helper/year-range';\nimport { diffInDays } from '@ohrm/core/util/helper/datefns';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport LeaveDurationInput from '@/orangehrmLeavePlugin/components/LeaveDurationInput';\nimport LeaveBalance from '@/orangehrmLeavePlugin/components/LeaveBalance';\nimport LeaveConflict from '@/orangehrmLeavePlugin/components/LeaveConflict';\nimport useLeaveValidators from '@/orangehrmLeavePlugin/util/composable/useLeaveValidators';\nimport useForm from '@ohrm/core/util/composable/useForm';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst leaveModel = {\n  type: null,\n  fromDate: null,\n  toDate: null,\n  comment: '',\n  partialOptions: null,\n  duration: {\n    type: null,\n    fromTime: null,\n    toTime: null\n  },\n  endDuration: {\n    type: null,\n    fromTime: null,\n    toTime: null\n  }\n};\nexport default {\n  name: 'LeaveApply',\n  components: {\n    'leave-duration-input': LeaveDurationInput,\n    'leave-balance': LeaveBalance,\n    'leave-conflict': LeaveConflict\n  },\n  props: {\n    workShift: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/leave/leave-requests');\n    const {\n      serializeBody,\n      validateOverlapLeaves\n    } = useLeaveValidators(http);\n    const {\n      formRef,\n      reset\n    } = useForm();\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      http,\n      reset,\n      formRef,\n      serializeBody,\n      userDateFormat,\n      validateOverlapLeaves\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      leave: {\n        ...leaveModel\n      },\n      rules: {\n        type: [required],\n        fromDate: [required, validDateFormat(this.userDateFormat)],\n        toDate: [required, validDateFormat(this.userDateFormat), endDateShouldBeAfterStartDate(() => this.leave.fromDate, this.$t('general.to_date_should_be_after_from_date'), {\n          allowSameDate: true\n        })],\n        comment: [shouldNotExceedCharLength(250)]\n      },\n      partialOptions: [{\n        id: 1,\n        label: this.$t('leave.all_days'),\n        key: 'all'\n      }, {\n        id: 2,\n        label: this.$t('leave.start_day_only'),\n        key: 'start'\n      }, {\n        id: 3,\n        label: this.$t('leave.end_day_only'),\n        key: 'end'\n      }, {\n        id: 4,\n        label: this.$t('leave.start_and_end_day'),\n        key: 'start_end'\n      }],\n      showLeaveConflict: false,\n      isWorkShiftExceeded: false,\n      leaveConflictData: null,\n      yearsArray: [...yearRange()],\n      leaveTypes: []\n    };\n  },\n  computed: {\n    appliedLeaveDuration() {\n      return diffInDays(this.leave.fromDate, this.leave.toDate);\n    },\n    showDuration() {\n      const id = this.leave.partialOptions?.id;\n      return id && id === 1;\n    },\n    showStartDay() {\n      const id = this.leave.partialOptions?.id;\n      return id && (id === 2 || id === 4);\n    },\n    showEndDay() {\n      const id = this.leave.partialOptions?.id;\n      return id && (id === 3 || id === 4);\n    }\n  },\n  watch: {\n    appliedLeaveDuration: function (duration) {\n      if (duration === 1) {\n        this.leave.duration.type = {\n          id: 1,\n          label: 'Full Day',\n          key: 'full_day'\n        };\n      } else {\n        this.leave.duration.type = null;\n      }\n    },\n    'leave.fromDate': function (fromDate) {\n      if (!fromDate || this.leave.toDate) return;\n      this.leave.toDate = fromDate;\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.request({\n      method: 'GET',\n      url: '/api/v2/leave/leave-types/eligible'\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.leaveTypes = data.map(item => {\n        return {\n          id: item.id,\n          label: item.name\n        };\n      });\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.showLeaveConflict = false;\n      this.leaveConflictData = null;\n      this.validateOverlapLeaves(this.leave).then(({\n        isConflict,\n        isOverWorkshift,\n        data\n      }) => {\n        if (isConflict) {\n          this.leaveConflictData = data;\n          this.showLeaveConflict = true;\n          this.isWorkShiftExceeded = isOverWorkshift;\n          return Promise.reject();\n        }\n        return this.http.create(this.serializeBody(this.leave));\n      }).then(() => {\n        this.$toast.saveSuccess();\n        this.reset();\n      }).catch(() => {\n        this.showLeaveConflict && this.$toast.warn({\n          title: this.$t('general.warning'),\n          message: this.$t('leave.failed_to_submit')\n        });\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["required","validDateFormat","shouldNotExceedCharLength","endDateShouldBeAfterStartDate","yearRange","diffInDays","APIService","LeaveDurationInput","LeaveBalance","LeaveConflict","useLeaveValidators","useForm","useDateFormat","leaveModel","type","fromDate","toDate","comment","partialOptions","duration","fromTime","toTime","endDuration","name","components","props","workShift","Object","default","setup","http","window","appGlobal","baseUrl","serializeBody","validateOverlapLeaves","formRef","reset","userDateFormat","data","isLoading","leave","rules","$t","allowSameDate","id","label","key","showLeaveConflict","isWorkShiftExceeded","leaveConflictData","yearsArray","leaveTypes","computed","appliedLeaveDuration","showDuration","showStartDay","showEndDay","watch","beforeMount","request","method","url","then","response","map","item","finally","methods","onSave","isConflict","isOverWorkshift","Promise","reject","create","$toast","saveSuccess","catch","warn","title","message"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmLeavePlugin\\pages\\LeaveApply.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <leave-conflict\n      v-if=\"showLeaveConflict\"\n      :workshift-exceeded=\"isWorkShiftExceeded\"\n      :data=\"leaveConflictData\"\n    ></leave-conflict>\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('leave.apply_leave') }}\n      </oxd-text>\n\n      <oxd-divider />\n\n      <oxd-text v-if=\"!isLoading && leaveTypes.length === 0\" type=\"subtitle-2\">\n        {{ $t('leave.no_leave_types_with_leave_balance') }}\n      </oxd-text>\n\n      <oxd-form\n        v-else\n        ref=\"formRef\"\n        :loading=\"isLoading\"\n        @submit-valid=\"onSave\"\n      >\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"leave.type\"\n                type=\"select\"\n                :rules=\"rules.type\"\n                :options=\"leaveTypes\"\n                :label=\"$t('leave.leave_type')\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <leave-balance :leave-data=\"leave\"></leave-balance>\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-form-row>\n          <oxd-grid :cols=\"4\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <date-input\n                v-model=\"leave.fromDate\"\n                :label=\"$t('general.from_date')\"\n                :rules=\"rules.fromDate\"\n                :years=\"yearsArray\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <date-input\n                v-model=\"leave.toDate\"\n                :label=\"$t('general.to_date')\"\n                :rules=\"rules.toDate\"\n                :years=\"yearsArray\"\n                required\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <!-- Single Day|Duration -->\n        <oxd-form-row v-if=\"appliedLeaveDuration == 1\">\n          <oxd-grid :cols=\"4\" class=\"orangehrm-full-width-grid\">\n            <leave-duration-input\n              v-model:duration=\"leave.duration.type\"\n              v-model:fromTime=\"leave.duration.fromTime\"\n              v-model:toTime=\"leave.duration.toTime\"\n              :label=\"$t('general.duration')\"\n              :work-shift=\"workShift\"\n            ></leave-duration-input>\n          </oxd-grid>\n        </oxd-form-row>\n        <!-- Single Day|Duration -->\n\n        <!-- Partial Day|Duration -->\n        <oxd-form-row v-if=\"appliedLeaveDuration > 1\">\n          <oxd-grid :cols=\"4\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"leave.partialOptions\"\n                type=\"select\"\n                :label=\"$t('leave.partial_days')\"\n                :options=\"partialOptions\"\n              />\n            </oxd-grid-item>\n            <leave-duration-input\n              v-if=\"showDuration\"\n              v-model:duration=\"leave.duration.type\"\n              v-model:fromTime=\"leave.duration.fromTime\"\n              v-model:toTime=\"leave.duration.toTime\"\n              :partial=\"true\"\n              :label=\"$t('general.duration')\"\n              :work-shift=\"workShift\"\n            ></leave-duration-input>\n            <leave-duration-input\n              v-if=\"showStartDay\"\n              v-model:duration=\"leave.duration.type\"\n              v-model:fromTime=\"leave.duration.fromTime\"\n              v-model:toTime=\"leave.duration.toTime\"\n              :partial=\"true\"\n              :label=\"$t('leave.start_day')\"\n              :work-shift=\"workShift\"\n            ></leave-duration-input>\n            <leave-duration-input\n              v-if=\"showEndDay\"\n              v-model:duration=\"leave.endDuration.type\"\n              v-model:fromTime=\"leave.endDuration.fromTime\"\n              v-model:toTime=\"leave.endDuration.toTime\"\n              :partial=\"true\"\n              :label=\"$t('leave.end_day')\"\n              :work-shift=\"workShift\"\n            ></leave-duration-input>\n          </oxd-grid>\n        </oxd-form-row>\n        <!-- Partial Day|Duration -->\n\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"leave.comment\"\n                type=\"textarea\"\n                :label=\"$t('general.comments')\"\n                :rules=\"rules.comment\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-divider />\n\n        <oxd-form-actions>\n          <required-text />\n          <submit-button :label=\"$t('general.apply')\" />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  required,\n  validDateFormat,\n  shouldNotExceedCharLength,\n  endDateShouldBeAfterStartDate,\n} from '@/core/util/validation/rules';\nimport {yearRange} from '@ohrm/core/util/helper/year-range';\nimport {diffInDays} from '@ohrm/core/util/helper/datefns';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport LeaveDurationInput from '@/orangehrmLeavePlugin/components/LeaveDurationInput';\nimport LeaveBalance from '@/orangehrmLeavePlugin/components/LeaveBalance';\nimport LeaveConflict from '@/orangehrmLeavePlugin/components/LeaveConflict';\nimport useLeaveValidators from '@/orangehrmLeavePlugin/util/composable/useLeaveValidators';\nimport useForm from '@ohrm/core/util/composable/useForm';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\n\nconst leaveModel = {\n  type: null,\n  fromDate: null,\n  toDate: null,\n  comment: '',\n  partialOptions: null,\n  duration: {\n    type: null,\n    fromTime: null,\n    toTime: null,\n  },\n  endDuration: {\n    type: null,\n    fromTime: null,\n    toTime: null,\n  },\n};\n\nexport default {\n  name: 'LeaveApply',\n\n  components: {\n    'leave-duration-input': LeaveDurationInput,\n    'leave-balance': LeaveBalance,\n    'leave-conflict': LeaveConflict,\n  },\n\n  props: {\n    workShift: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/leave/leave-requests',\n    );\n    const {serializeBody, validateOverlapLeaves} = useLeaveValidators(http);\n    const {formRef, reset} = useForm();\n    const {userDateFormat} = useDateFormat();\n\n    return {\n      http,\n      reset,\n      formRef,\n      serializeBody,\n      userDateFormat,\n      validateOverlapLeaves,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      leave: {...leaveModel},\n      rules: {\n        type: [required],\n        fromDate: [required, validDateFormat(this.userDateFormat)],\n        toDate: [\n          required,\n          validDateFormat(this.userDateFormat),\n          endDateShouldBeAfterStartDate(\n            () => this.leave.fromDate,\n            this.$t('general.to_date_should_be_after_from_date'),\n            {allowSameDate: true},\n          ),\n        ],\n        comment: [shouldNotExceedCharLength(250)],\n      },\n      partialOptions: [\n        {id: 1, label: this.$t('leave.all_days'), key: 'all'},\n        {id: 2, label: this.$t('leave.start_day_only'), key: 'start'},\n        {id: 3, label: this.$t('leave.end_day_only'), key: 'end'},\n        {id: 4, label: this.$t('leave.start_and_end_day'), key: 'start_end'},\n      ],\n      showLeaveConflict: false,\n      isWorkShiftExceeded: false,\n      leaveConflictData: null,\n      yearsArray: [...yearRange()],\n      leaveTypes: [],\n    };\n  },\n\n  computed: {\n    appliedLeaveDuration() {\n      return diffInDays(this.leave.fromDate, this.leave.toDate);\n    },\n    showDuration() {\n      const id = this.leave.partialOptions?.id;\n      return id && id === 1;\n    },\n    showStartDay() {\n      const id = this.leave.partialOptions?.id;\n      return id && (id === 2 || id === 4);\n    },\n    showEndDay() {\n      const id = this.leave.partialOptions?.id;\n      return id && (id === 3 || id === 4);\n    },\n  },\n\n  watch: {\n    appliedLeaveDuration: function (duration) {\n      if (duration === 1) {\n        this.leave.duration.type = {id: 1, label: 'Full Day', key: 'full_day'};\n      } else {\n        this.leave.duration.type = null;\n      }\n    },\n    'leave.fromDate': function (fromDate) {\n      if (!fromDate || this.leave.toDate) return;\n      this.leave.toDate = fromDate;\n    },\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .request({\n        method: 'GET',\n        url: '/api/v2/leave/leave-types/eligible',\n      })\n      .then((response) => {\n        const {data} = response.data;\n        this.leaveTypes = data.map((item) => {\n          return {\n            id: item.id,\n            label: item.name,\n          };\n        });\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.showLeaveConflict = false;\n      this.leaveConflictData = null;\n\n      this.validateOverlapLeaves(this.leave)\n        .then(({isConflict, isOverWorkshift, data}) => {\n          if (isConflict) {\n            this.leaveConflictData = data;\n            this.showLeaveConflict = true;\n            this.isWorkShiftExceeded = isOverWorkshift;\n            return Promise.reject();\n          }\n          return this.http.create(this.serializeBody(this.leave));\n        })\n        .then(() => {\n          this.$toast.saveSuccess();\n          this.reset();\n        })\n        .catch(() => {\n          this.showLeaveConflict &&\n            this.$toast.warn({\n              title: this.$t('general.warning'),\n              message: this.$t('leave.failed_to_submit'),\n            });\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}