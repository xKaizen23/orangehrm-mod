{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { OxdSwitchInput } from '@ohrm/oxd';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nconst initialClaimEvent = {\n  name: '',\n  description: '',\n  status: true\n};\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/claim/events');\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const claimEventNameUniqueValidation = createUniqueValidator('ClaimEvent', 'name', {\n      matchByField: 'isDeleted',\n      matchByValue: 'false'\n    });\n    return {\n      http,\n      claimEventNameUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      claimEvent: {\n        ...initialClaimEvent\n      },\n      rules: {\n        name: [required, this.claimEventNameUniqueValidation, shouldNotExceedCharLength(100)],\n        description: [shouldNotExceedCharLength(1000)]\n      }\n    };\n  },\n  methods: {\n    onCancel() {\n      navigate('/claim/viewEvents');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        ...this.claimEvent,\n        name: this.claimEvent.name.trim()\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAyEA,SACEA,QAAQ,EACRC,yBAAyB,QACpB,kCAAkC;AACzC,SAAQC,cAAc,QAAO,WAAW;AACxC,SAAQC,QAAQ,QAAO,mCAAmC;AAC1D,SAAQC,UAAU,QAAO,kCAAkC;AAC3D,OAAOC,mBAAkB,MAAO,4CAA4C;AAE5E,MAAMC,iBAAgB,GAAI;EACxBC,IAAI,EAAE,EAAE;EACRC,WAAW,EAAE,EAAE;EACfC,MAAM,EAAE;AACV,CAAC;AAED,eAAe;EACbC,UAAU,EAAE;IACV,kBAAkB,EAAER;EACtB,CAAC;EACDS,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIR,UAAU,CACzBS,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,sBAAsB,CACvB;IACD,MAAM;MAACC;IAAqB,IAAIX,mBAAmB,CAACO,IAAI,CAAC;IACzD,MAAMK,8BAA6B,GAAID,qBAAqB,CAC1D,YAAY,EACZ,MAAM,EACN;MACEE,YAAY,EAAE,WAAW;MACzBC,YAAY,EAAE;IAChB,CAAC,CACF;IACD,OAAO;MACLP,IAAI;MACJK;IACF,CAAC;EACH,CAAC;EAEDG,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,UAAU,EAAE;QAAC,GAAGhB;MAAiB,CAAC;MAClCiB,KAAK,EAAE;QACLhB,IAAI,EAAE,CACJP,QAAQ,EACR,IAAI,CAACiB,8BAA8B,EACnChB,yBAAyB,CAAC,GAAG,CAAC,CAC/B;QACDO,WAAW,EAAE,CAACP,yBAAyB,CAAC,IAAI,CAAC;MAC/C;IACF,CAAC;EACH,CAAC;EAEDuB,OAAO,EAAE;IACPC,QAAQ,GAAG;MACTtB,QAAQ,CAAC,mBAAmB,CAAC;IAC/B,CAAC;IACDuB,MAAM,GAAG;MACP,IAAI,CAACL,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACT,IAAG,CACLe,MAAM,CAAC;QACN,GAAG,IAAI,CAACL,UAAU;QAClBf,IAAI,EAAE,IAAI,CAACe,UAAU,CAACf,IAAI,CAACqB,IAAI;MACjC,CAAC,EACAC,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACC,MAAM,CAACC,WAAW,EAAE;MAClC,CAAC,EACAF,IAAI,CAAC,MAAM;QACV,IAAI,CAACJ,QAAQ,EAAE;MACjB,CAAC,CAAC;IACN;EACF;AACF,CAAC","names":["required","shouldNotExceedCharLength","OxdSwitchInput","navigate","APIService","useServerValidation","initialClaimEvent","name","description","status","components","setup","http","window","appGlobal","baseUrl","createUniqueValidator","claimEventNameUniqueValidation","matchByField","matchByValue","data","isLoading","claimEvent","rules","methods","onCancel","onSave","create","trim","then","$toast","saveSuccess"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmClaimPlugin\\pages\\SaveClaimEvent.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('claim.add_event') }}\n      </oxd-text>\n\n      <oxd-divider />\n\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"claimEvent.name\"\n              :label=\"$t('claim.event_name')\"\n              :rules=\"rules.name\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item class=\"--offset-row-2\">\n            <oxd-input-field\n              v-model=\"claimEvent.description\"\n              type=\"textarea\"\n              :label=\"$t('general.description')\"\n              :rules=\"rules.description\"\n            />\n          </oxd-grid-item>\n\n          <oxd-grid-item class=\"--offset-row-3\">\n            <div class=\"orangehrm-sm-field\">\n              <oxd-text tag=\"p\" class=\"orangehrm-sm-field-label\">\n                {{ $t('general.active') }}\n              </oxd-text>\n              <oxd-switch-input v-model=\"claimEvent.status\" />\n            </div>\n          </oxd-grid-item>\n        </oxd-grid>\n        <oxd-divider />\n\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport {OxdSwitchInput} from '@ohrm/oxd';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {APIService} from '@/core/util/services/api.service';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\n\nconst initialClaimEvent = {\n  name: '',\n  description: '',\n  status: true,\n};\n\nexport default {\n  components: {\n    'oxd-switch-input': OxdSwitchInput,\n  },\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/claim/events',\n    );\n    const {createUniqueValidator} = useServerValidation(http);\n    const claimEventNameUniqueValidation = createUniqueValidator(\n      'ClaimEvent',\n      'name',\n      {\n        matchByField: 'isDeleted',\n        matchByValue: 'false',\n      },\n    );\n    return {\n      http,\n      claimEventNameUniqueValidation,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      claimEvent: {...initialClaimEvent},\n      rules: {\n        name: [\n          required,\n          this.claimEventNameUniqueValidation,\n          shouldNotExceedCharLength(100),\n        ],\n        description: [shouldNotExceedCharLength(1000)],\n      },\n    };\n  },\n\n  methods: {\n    onCancel() {\n      navigate('/claim/viewEvents');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .create({\n          ...this.claimEvent,\n          name: this.claimEvent.name.trim(),\n        })\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n  },\n};\n</script>\n\n<style src=\"./save-claim-event.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}