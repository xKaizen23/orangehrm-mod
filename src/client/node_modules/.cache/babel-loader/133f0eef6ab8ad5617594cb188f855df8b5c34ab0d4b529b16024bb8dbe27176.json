{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { required, validEmailFormat, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport { OxdDialog } from '@ohrm/oxd';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nconst subscriberModel = {\n  name: '',\n  email: ''\n};\nexport default {\n  name: 'EditSubscriber',\n  components: {\n    'oxd-dialog': OxdDialog\n  },\n  props: {\n    data: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/admin/email-subscriptions/${props.data.subscriptionId}/subscribers`);\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const subscriberUniqueValidation = createUniqueValidator('EmailSubscriber', 'email', {\n      entityId: props.data.id,\n      matchByField: 'emailNotification',\n      matchByValue: props.data.subscriptionId\n    });\n    return {\n      http,\n      subscriberUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      subscriber: {\n        ...subscriberModel\n      },\n      rules: {\n        name: [required, shouldNotExceedCharLength(100)],\n        email: [required, validEmailFormat, this.subscriberUniqueValidation, shouldNotExceedCharLength(100)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.data.id).then(response => {\n      const {\n        data\n      } = response.data;\n      this.subscriber.name = data.name;\n      this.subscriber.email = data.email;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.data.id, {\n        ...this.subscriber\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.subscriber = {\n        ...subscriberModel\n      };\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"AA2DA,SAAQA,UAAU,QAAO,kCAAkC;AAC3D,SACEC,QAAQ,EACRC,gBAAgB,EAChBC,yBAAyB,QACpB,kCAAkC;AACzC,SAAQC,SAAS,QAAO,WAAW;AACnC,OAAOC,mBAAkB,MAAO,4CAA4C;AAE5E,MAAMC,eAAc,GAAI;EACtBC,IAAI,EAAE,EAAE;EACRC,KAAK,EAAE;AACT,CAAC;AAED,eAAe;EACbD,IAAI,EAAE,gBAAgB;EACtBE,UAAU,EAAE;IACV,YAAY,EAAEL;EAChB,CAAC;EACDM,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE,OAAO,CAAC,CAAC;IACpB;EACF,CAAC;EACDC,KAAK,EAAE,CAAC,OAAO,CAAC;EAChBC,KAAK,CAACN,KAAK,EAAE;IACX,MAAMO,IAAG,GAAI,IAAIjB,UAAU,CACzBkB,MAAM,CAACC,SAAS,CAACC,OAAO,EACvB,qCAAoCV,KAAK,CAACC,IAAI,CAACU,cAAe,cAAa,CAC7E;IACD,MAAM;MAACC;IAAqB,IAAIjB,mBAAmB,CAACY,IAAI,CAAC;IACzD,MAAMM,0BAAyB,GAAID,qBAAqB,CACtD,iBAAiB,EACjB,OAAO,EACP;MACEE,QAAQ,EAAEd,KAAK,CAACC,IAAI,CAACc,EAAE;MACvBC,YAAY,EAAE,mBAAmB;MACjCC,YAAY,EAAEjB,KAAK,CAACC,IAAI,CAACU;IAC3B,CAAC,CACF;IAED,OAAO;MACLJ,IAAI;MACJM;IACF,CAAC;EACH,CAAC;EACDZ,IAAI,GAAG;IACL,OAAO;MACLiB,SAAS,EAAE,KAAK;MAChBC,UAAU,EAAE;QAAC,GAAGvB;MAAe,CAAC;MAChCwB,KAAK,EAAE;QACLvB,IAAI,EAAE,CAACN,QAAQ,EAAEE,yBAAyB,CAAC,GAAG,CAAC,CAAC;QAChDK,KAAK,EAAE,CACLP,QAAQ,EACRC,gBAAgB,EAChB,IAAI,CAACqB,0BAA0B,EAC/BpB,yBAAyB,CAAC,GAAG,CAAC;MAElC;IACF,CAAC;EACH,CAAC;EACD4B,WAAW,GAAG;IACZ,IAAI,CAACH,SAAQ,GAAI,IAAI;IACrB,IAAI,CAACX,IAAG,CACLe,GAAG,CAAC,IAAI,CAACrB,IAAI,CAACc,EAAE,EAChBQ,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAACvB;MAAI,IAAIuB,QAAQ,CAACvB,IAAI;MAC5B,IAAI,CAACkB,UAAU,CAACtB,IAAG,GAAII,IAAI,CAACJ,IAAI;MAChC,IAAI,CAACsB,UAAU,CAACrB,KAAI,GAAIG,IAAI,CAACH,KAAK;IACpC,CAAC,EACA2B,OAAO,CAAC,MAAM;MACb,IAAI,CAACP,SAAQ,GAAI,KAAK;IACxB,CAAC,CAAC;EACN,CAAC;EACDQ,OAAO,EAAE;IACPC,MAAM,GAAG;MACP,IAAI,CAACT,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACX,IAAG,CACLqB,MAAM,CAAC,IAAI,CAAC3B,IAAI,CAACc,EAAE,EAAE;QACpB,GAAG,IAAI,CAACI;MACV,CAAC,EACAI,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACM,MAAM,CAACC,aAAa,EAAE;MACpC,CAAC,EACAP,IAAI,CAAC,MAAM;QACV,IAAI,CAACQ,QAAQ,EAAE;MACjB,CAAC,CAAC;IACN,CAAC;IACDA,QAAQ,GAAG;MACT,IAAI,CAACZ,UAAS,GAAI;QAAC,GAAGvB;MAAe,CAAC;MACtC,IAAI,CAACoC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;IAC3B;EACF;AACF,CAAC","names":["APIService","required","validEmailFormat","shouldNotExceedCharLength","OxdDialog","useServerValidation","subscriberModel","name","email","components","props","data","type","Object","default","emits","setup","http","window","appGlobal","baseUrl","subscriptionId","createUniqueValidator","subscriberUniqueValidation","entityId","id","matchByField","matchByValue","isLoading","subscriber","rules","beforeMount","get","then","response","finally","methods","onSave","update","$toast","updateSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\pages\\emailSubscription\\EditSubscriber.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-dialog class=\"orangehrm-dialog-modal\" @update:show=\"onCancel\">\n    <div class=\"orangehrm-modal-header\">\n      <oxd-text type=\"card-title\">{{ $t('admin.edit_subscriber') }}</oxd-text>\n    </div>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-input-field\n          v-model=\"subscriber.name\"\n          :label=\"$t('general.name')\"\n          :rules=\"rules.name\"\n          required\n        />\n      </oxd-form-row>\n      <oxd-form-row>\n        <oxd-input-field\n          v-model=\"subscriber.email\"\n          :label=\"$t('general.email')\"\n          :rules=\"rules.email\"\n          required\n        />\n      </oxd-form-row>\n      <oxd-divider />\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </oxd-dialog>\n</template>\n\n<script>\nimport {APIService} from '@/core/util/services/api.service';\nimport {\n  required,\n  validEmailFormat,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport {OxdDialog} from '@ohrm/oxd';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\n\nconst subscriberModel = {\n  name: '',\n  email: '',\n};\n\nexport default {\n  name: 'EditSubscriber',\n  components: {\n    'oxd-dialog': OxdDialog,\n  },\n  props: {\n    data: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  emits: ['close'],\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/admin/email-subscriptions/${props.data.subscriptionId}/subscribers`,\n    );\n    const {createUniqueValidator} = useServerValidation(http);\n    const subscriberUniqueValidation = createUniqueValidator(\n      'EmailSubscriber',\n      'email',\n      {\n        entityId: props.data.id,\n        matchByField: 'emailNotification',\n        matchByValue: props.data.subscriptionId,\n      },\n    );\n\n    return {\n      http,\n      subscriberUniqueValidation,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      subscriber: {...subscriberModel},\n      rules: {\n        name: [required, shouldNotExceedCharLength(100)],\n        email: [\n          required,\n          validEmailFormat,\n          this.subscriberUniqueValidation,\n          shouldNotExceedCharLength(100),\n        ],\n      },\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.data.id)\n      .then((response) => {\n        const {data} = response.data;\n        this.subscriber.name = data.name;\n        this.subscriber.email = data.email;\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.data.id, {\n          ...this.subscriber,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.subscriber = {...subscriberModel};\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.level-label {\n  font-size: 0.75rem;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}