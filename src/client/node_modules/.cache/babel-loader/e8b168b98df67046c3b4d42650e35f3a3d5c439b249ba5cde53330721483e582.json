{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-1bc0be4f\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_buzz_post_input = _resolveComponent(\"oxd-buzz-post-input\");\n  const _component_video_frame = _resolveComponent(\"video-frame\");\n  const _component_photo_frame = _resolveComponent(\"photo-frame\");\n  const _component_oxd_text = _resolveComponent(\"oxd-text\");\n  const _component_photo_input = _resolveComponent(\"photo-input\");\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  const _component_post_modal = _resolveComponent(\"post-modal\");\n  return _openBlock(), _createBlock(_component_post_modal, {\n    loading: _ctx.isLoading,\n    title: _ctx.$t('buzz.edit_post'),\n    \"action-label\": _ctx.$t('buzz.post'),\n    onSubmit: $setup.onSubmit,\n    onClose: _cache[3] || (_cache[3] = $event => _ctx.$emit('close', false))\n  }, {\n    header: _withCtx(() => [_createVNode(_component_oxd_buzz_post_input, {\n      modelValue: _ctx.post.text,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.post.text = $event),\n      rules: $setup.rules.text\n    }, null, 8, [\"modelValue\", \"rules\"])]),\n    default: _withCtx(() => [$props.data.originalPost ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [$props.data.type === 'video' ? (_openBlock(), _createBlock(_component_video_frame, {\n      key: 0,\n      \"video-src\": $props.data.video.link\n    }, null, 8, [\"video-src\"])) : _createCommentVNode(\"\", true), $props.data.type === 'photo' ? (_openBlock(), _createBlock(_component_photo_frame, {\n      key: 1,\n      media: $props.data.photoIds\n    }, null, 8, [\"media\"])) : _createCommentVNode(\"\", true), $props.data.type === 'video' || $props.data.type === 'photo' ? (_openBlock(), _createElementBlock(\"br\", _hoisted_1)) : _createCommentVNode(\"\", true), _createVNode(_component_oxd_text, {\n      tag: \"p\",\n      class: \"orangehrm-buzz-share-employee\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($setup.originalPost.employee), 1)]),\n      _: 1\n    }), _createVNode(_component_oxd_text, {\n      tag: \"p\",\n      class: \"orangehrm-buzz-share-date\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($setup.originalPost.dateTime), 1)]),\n      _: 1\n    }), $setup.originalPost.text ? (_openBlock(), _createBlock(_component_oxd_text, {\n      key: 3,\n      tag: \"p\",\n      class: \"orangehrm-buzz-share-text\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($setup.originalPost.text), 1)]),\n      _: 1\n    })) : _createCommentVNode(\"\", true)], 64)) : (_openBlock(), _createElementBlock(_Fragment, {\n      key: 1\n    }, [_ctx.post.type === 'text' || _ctx.post.type === 'photo' ? (_openBlock(), _createBlock(_component_photo_input, {\n      key: 0,\n      modelValue: _ctx.post.photos,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.post.photos = $event)\n    }, null, 8, [\"modelValue\"])) : _createCommentVNode(\"\", true), _ctx.post.type === 'video' ? (_openBlock(), _createBlock(_component_oxd_input_field, {\n      key: 1,\n      modelValue: _ctx.post.video,\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.post.video = $event),\n      type: \"textarea\",\n      rules: $setup.rules.url,\n      label: _ctx.$t('buzz.video_url')\n    }, null, 8, [\"modelValue\", \"rules\", \"label\"])) : _createCommentVNode(\"\", true), _ctx.embedURL ? (_openBlock(), _createBlock(_component_video_frame, {\n      key: 2,\n      \"video-src\": _ctx.embedURL\n    }, null, 8, [\"video-src\"])) : _createCommentVNode(\"\", true)], 64))]),\n    _: 1\n  }, 8, [\"loading\", \"title\", \"action-label\", \"onSubmit\"]);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;uBAoBEA,aAgDaC;IA/CVC,OAAO,EAAEC,cAAS;IAClBC,KAAK,EAAED,OAAE;IACT,cAAY,EAAEA,OAAE;IAChBE,QAAM,EAAEC,eAAQ;IAChBC,OAAK,sCAAEJ,UAAK;;IAEFK,MAAM,WACf,MACsB,CADtBC,aACsBC;kBADQP,SAAI,CAACQ,IAAI;iEAATR,SAAI,CAACQ,IAAI;MAAGC,KAAK,EAAEN,YAAK,CAACK;;sBAIzD,MAoBW,CApBKE,WAAI,CAACC,YAAY,kBAAjCC,oBAoBWC;MAAAC;IAAA,IAnBUJ,WAAI,CAACK,IAAI,8BAA5BlB,aACcmB;;MAD6B,WAAS,EAAEN,WAAI,CAACO,KAAK,CAACC;iEAE9CR,WAAI,CAACK,IAAI,8BAA5BlB,aACcsB;;MAD6BC,KAAK,EAAEV,WAAI,CAACW;6DAE7CX,WAAI,CAACK,IAAI,gBAAgBL,WAAI,CAACK,IAAI,8BAA5CH,oBAA4D,oDAE5DN,aAEWgB;MAFDC,GAAG,EAAC,GAAG;MAACC,KAAK,EAAC;;wBACtB,MAA2B,mCAAxBrB,mBAAY,CAACsB,QAAQ;;QAE1BnB,aAEWgB;MAFDC,GAAG,EAAC,GAAG;MAACC,KAAK,EAAC;;wBACtB,MAA2B,mCAAxBrB,mBAAY,CAACuB,QAAQ;;QAGlBvB,mBAAY,CAACK,IAAI,kBADzBX,aAMWyB;;MAJTC,GAAG,EAAC,GAAG;MACPC,KAAK,EAAC;;wBAEN,MAAuB,mCAApBrB,mBAAY,CAACK,IAAI;;gEAIxBI,oBAaWC;MAAAC;IAAA,IAXDd,SAAI,CAACe,IAAI,eAAef,SAAI,CAACe,IAAI,8BADzClB,aAGE8B;;kBADS3B,SAAI,CAAC4B,MAAM;iEAAX5B,SAAI,CAAC4B,MAAM;kEAGd5B,SAAI,CAACe,IAAI,8BADjBlB,aAMEgC;;kBAJS7B,SAAI,CAACiB,KAAK;iEAAVjB,SAAI,CAACiB,KAAK;MACnBF,IAAI,EAAC,UAAU;MACdN,KAAK,EAAEN,YAAK,CAAC2B,GAAG;MAChBC,KAAK,EAAE/B,OAAE;oFAEOA,aAAQ,kBAA3BH,aAAkEmB;;MAApC,WAAS,EAAEhB","names":["_createBlock","_component_post_modal","loading","_ctx","title","onSubmit","$setup","onClose","header","_createVNode","_component_oxd_buzz_post_input","text","rules","$props","originalPost","_createElementBlock","_Fragment","key","type","_component_video_frame","video","link","_component_photo_frame","media","photoIds","_component_oxd_text","tag","class","employee","dateTime","_component_photo_input","photos","_component_oxd_input_field","url","label"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmBuzzPlugin\\components\\EditPostModal.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <post-modal\n    :loading=\"isLoading\"\n    :title=\"$t('buzz.edit_post')\"\n    :action-label=\"$t('buzz.post')\"\n    @submit=\"onSubmit\"\n    @close=\"$emit('close', false)\"\n  >\n    <template #header>\n      <oxd-buzz-post-input v-model=\"post.text\" :rules=\"rules.text\">\n      </oxd-buzz-post-input>\n    </template>\n\n    <template v-if=\"data.originalPost\">\n      <video-frame v-if=\"data.type === 'video'\" :video-src=\"data.video.link\">\n      </video-frame>\n      <photo-frame v-if=\"data.type === 'photo'\" :media=\"data.photoIds\">\n      </photo-frame>\n      <br v-if=\"data.type === 'video' || data.type === 'photo'\" />\n\n      <oxd-text tag=\"p\" class=\"orangehrm-buzz-share-employee\">\n        {{ originalPost.employee }}\n      </oxd-text>\n      <oxd-text tag=\"p\" class=\"orangehrm-buzz-share-date\">\n        {{ originalPost.dateTime }}\n      </oxd-text>\n      <oxd-text\n        v-if=\"originalPost.text\"\n        tag=\"p\"\n        class=\"orangehrm-buzz-share-text\"\n      >\n        {{ originalPost.text }}\n      </oxd-text>\n    </template>\n\n    <template v-else>\n      <photo-input\n        v-if=\"post.type === 'text' || post.type === 'photo'\"\n        v-model=\"post.photos\"\n      />\n      <oxd-input-field\n        v-if=\"post.type === 'video'\"\n        v-model=\"post.video\"\n        type=\"textarea\"\n        :rules=\"rules.url\"\n        :label=\"$t('buzz.video_url')\"\n      />\n      <video-frame v-if=\"embedURL\" :video-src=\"embedURL\"> </video-frame>\n    </template>\n  </post-modal>\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@/core/util/validation/rules';\nimport {computed, reactive, toRefs} from 'vue';\nimport usei18n from '@/core/util/composable/usei18n';\nimport useToast from '@/core/util/composable/useToast';\nimport useLocale from '@/core/util/composable/useLocale';\nimport {APIService} from '@/core/util/services/api.service';\nimport {formatDate, parseDate} from '@/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport PostModal from '@/orangehrmBuzzPlugin/components/PostModal';\nimport PhotoFrame from '@/orangehrmBuzzPlugin/components/PhotoFrame';\nimport VideoFrame from '@/orangehrmBuzzPlugin/components/VideoFrame';\nimport PhotoInput from '@/orangehrmBuzzPlugin/components/PhotoInput';\nimport useBuzzAPIs from '@/orangehrmBuzzPlugin/util/composable/useBuzzAPIs';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport {OxdBuzzPostInput, promiseDebounce} from '@ohrm/oxd';\n\nexport default {\n  name: 'EditPostModal',\n\n  components: {\n    'post-modal': PostModal,\n    'photo-frame': PhotoFrame,\n    'photo-input': PhotoInput,\n    'video-frame': VideoFrame,\n    'oxd-buzz-post-input': OxdBuzzPostInput,\n  },\n\n  props: {\n    data: {\n      type: Object,\n      required: true,\n    },\n  },\n\n  emits: ['close'],\n\n  setup(props, context) {\n    const {$t} = usei18n();\n    const {locale} = useLocale();\n    const {jsDateFormat, jsTimeFormat} = useDateFormat();\n    const {$tEmpName} = useEmployeeNameTranslate();\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {updateSuccess} = useToast();\n    const {updatePost, updateSharedPost} = useBuzzAPIs(http);\n\n    const state = reactive({\n      post: {\n        text: props.data.text,\n        type: props.data.type,\n        photos: props.data.photoIds || [],\n        video: props.data.video?.link || null,\n      },\n      isLoading: false,\n      embedURL: props.data.video?.link || null,\n    });\n\n    const onSubmit = () => {\n      let type = 'text';\n      state.isLoading = true;\n\n      if (state.post.photos.length > 0) {\n        type = 'photo';\n      }\n      if (state.post.video) {\n        type = 'video';\n      }\n\n      new Promise((resolve) => {\n        if (props.data.originalPost) {\n          resolve(updateSharedPost(props.data.id, state.post.text));\n        } else {\n          resolve(\n            updatePost(props.data.post.id, {\n              type: type,\n              text: state.post.text,\n              link: state.post.video,\n              photos: state.post.photos.filter((id) => typeof id === 'object'),\n              deletedPhotos: (props.data.photoIds || []).filter((id) => {\n                return (\n                  state.post.photos.findIndex((photo) => photo === id) === -1\n                );\n              }),\n            }),\n          );\n        }\n      }).then((response) => {\n        updateSuccess();\n        context.emit('close', response.data);\n      });\n    };\n\n    const rules = {\n      url: [\n        required,\n        promiseDebounce(async (value) => {\n          if (!value) return true;\n          state.embedURL = null;\n          const response = await http.request({\n            method: 'GET',\n            url: '/api/v2/buzz/validation/links',\n            params: {\n              url: value,\n            },\n          });\n          const {data} = response.data;\n          if (data?.valid === true) {\n            state.embedURL = data.embeddedURL;\n            return true;\n          } else {\n            return $t('general.invalid_video_url_message');\n          }\n        }, 500),\n      ],\n      text: [\n        shouldNotExceedCharLength(65530),\n        (value) => {\n          if (props.data.type === 'video' || state.post.photos.length > 0) {\n            return true;\n          }\n          return required(value);\n        },\n      ],\n    };\n\n    const originalPost = computed(() => {\n      const originalText = props.data.originalPost?.text;\n      const originalEmployee = props.data.originalPost?.employee;\n      const {createdDate, createdTime} = props.data.originalPost;\n      const utcDate = parseDate(\n        `${createdDate} ${createdTime} +00:00`,\n        'yyyy-MM-dd HH:mm xxx',\n      );\n\n      return {\n        text: originalText,\n        employee: $tEmpName(originalEmployee, {\n          includeMiddle: true,\n          excludePastEmpTag: false,\n        }),\n        dateTime: formatDate(utcDate, `${jsDateFormat} ${jsTimeFormat}`, {\n          locale,\n        }),\n      };\n    });\n\n    return {\n      rules,\n      onSubmit,\n      originalPost,\n      ...toRefs(state),\n    };\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.orangehrm-buzz-share {\n  &-employee {\n    font-size: 0.9rem;\n  }\n  &-date {\n    font-size: 0.6rem;\n    color: $oxd-interface-gray-color;\n  }\n  &-text {\n    font-weight: 300;\n    margin-top: 0.5rem;\n    @include truncate(6, 1.5, #fff);\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}