{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx, createBlock as _createBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-21e5ef86\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"orangehrm-buzz-stats-dialog-header\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_profile_image = _resolveComponent(\"profile-image\");\n  const _component_oxd_text = _resolveComponent(\"oxd-text\");\n  const _component_oxd_loading_spinner = _resolveComponent(\"oxd-loading-spinner\");\n  const _component_oxd_sheet = _resolveComponent(\"oxd-sheet\");\n  const _component_oxd_icon = _resolveComponent(\"oxd-icon\");\n  const _component_oxd_divider = _resolveComponent(\"oxd-divider\");\n  const _component_oxd_dialog = _resolveComponent(\"oxd-dialog\");\n  return !$props.mobile ? (_openBlock(), _createBlock(_component_oxd_sheet, {\n    key: 0,\n    gutters: false,\n    type: \"white\",\n    class: \"orangehrm-buzz-stats-modal\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.users, user => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: user,\n        class: \"orangehrm-buzz-stats-modal-employee\"\n      }, [_createVNode(_component_profile_image, {\n        employee: user.employee\n      }, null, 8, [\"employee\"]), _createVNode(_component_oxd_text, {\n        tag: \"p\",\n        class: \"orangehrm-buzz-stats-modal-employee-name\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(user.fullName), 1)]),\n        _: 2\n      }, 1024)]);\n    }), 128)), _ctx.isLoading ? (_openBlock(), _createBlock(_component_oxd_loading_spinner, {\n      key: 0,\n      class: \"orangehrm-buzz-loader\"\n    })) : _createCommentVNode(\"\", true)]),\n    _: 1\n  })) : (_openBlock(), _createBlock(_component_oxd_dialog, {\n    key: 1,\n    class: \"orangehrm-buzz-stats-dialog\",\n    \"onUpdate:show\": $setup.onClose\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_oxd_icon, {\n      class: _normalizeClass({\n        'orangehrm-buzz-stats-dialog-icon': true,\n        '--likes': $props.type === 'likes'\n      }),\n      name: $props.icon,\n      \"with-container\": true\n    }, null, 8, [\"class\", \"name\"]), $props.type === 'shares' ? (_openBlock(), _createBlock(_component_oxd_text, {\n      key: 0\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('buzz.n_share', {\n        shareCount: _ctx.total\n      })), 1)]),\n      _: 1\n    })) : _createCommentVNode(\"\", true), $props.type === 'likes' ? (_openBlock(), _createBlock(_component_oxd_text, {\n      key: 1\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('buzz.n_like', {\n        likesCount: _ctx.total\n      })), 1)]),\n      _: 1\n    })) : _createCommentVNode(\"\", true)]), _createVNode(_component_oxd_divider), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.users, user => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: user,\n        class: \"orangehrm-buzz-stats-dialog-employee\"\n      }, [_createVNode(_component_profile_image, {\n        employee: user.employee\n      }, null, 8, [\"employee\"]), _createVNode(_component_oxd_text, {\n        tag: \"p\",\n        class: \"orangehrm-buzz-stats-dialog-employee-name\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(user.fullName), 1)]),\n        _: 2\n      }, 1024)]);\n    }), 128)), _ctx.isLoading ? (_openBlock(), _createBlock(_component_oxd_loading_spinner, {\n      key: 0,\n      class: \"orangehrm-buzz-loader\"\n    })) : _createCommentVNode(\"\", true)]),\n    _: 1\n  }, 8, [\"onUpdate:show\"]));\n}","map":{"version":3,"mappings":";;;EAuCSA,KAAK,EAAC;AAAoC;;;;;;;;;UAlBxCC,aAAM,kBADfC,aAiBYC;;IAfTC,OAAO,EAAE,KAAK;IACfC,IAAI,EAAC,OAAO;IACZL,KAAK,EAAC;;sBAGJ,MAAqB,oBADvBM,oBASMC,6BARWC,UAAK,EAAbC,IAAI;2BADbH,oBASM;QAPHI,GAAG,EAAED,IAAI;QACVT,KAAK,EAAC;UAENW,aAAyDC;QAAzCC,QAAQ,EAAEJ,IAAI,CAACI;iCAC/BF,aAEWG;QAFDC,GAAG,EAAC,GAAG;QAACf,KAAK,EAAC;;0BACtB,MAAmB,mCAAhBS,IAAI,CAACO,QAAQ;;;eAGOR,cAAS,kBAApCN,aAAsEe;;MAAhCjB,KAAK,EAAC;;;uBAE9CE,aA6BagB;;IA7BMlB,KAAK,EAAC,6BAA6B;IAAE,eAAW,EAAEmB;;sBACnE,MAeM,CAfNC,oBAeM,OAfNC,UAeM,GAdJV,aAOEW;MANCtB,KAAK;;mBAA6EC,WAAI;;MAItFsB,IAAI,EAAEtB,WAAI;MACV,gBAAc,EAAE;oCAEHA,WAAI,+BAApBC,aAEWY;MAAAJ;IAAA;wBADT,MAA6C,mCAA1CF,OAAE;QAAAgB,YAA8BhB;MAAK;;yCAE1BP,WAAI,8BAApBC,aAEWY;MAAAJ;IAAA;wBADT,MAA4C,mCAAzCF,OAAE;QAAAiB,YAA6BjB;MAAK;;2CAG3CG,aAAee,4CACfpB,oBASMC,6BARWC,UAAK,EAAbC,IAAI;2BADbH,oBASM;QAPHI,GAAG,EAAED,IAAI;QACVT,KAAK,EAAC;UAENW,aAAyDC;QAAzCC,QAAQ,EAAEJ,IAAI,CAACI;iCAC/BF,aAEWG;QAFDC,GAAG,EAAC,GAAG;QAACf,KAAK,EAAC;;0BACtB,MAAmB,mCAAhBS,IAAI,CAACO,QAAQ;;;eAGOR,cAAS,kBAApCN,aAAsEe;;MAAhCjB,KAAK,EAAC","names":["class","$props","_createBlock","_component_oxd_sheet","gutters","type","_createElementBlock","_Fragment","_ctx","user","key","_createVNode","_component_profile_image","employee","_component_oxd_text","tag","fullName","_component_oxd_loading_spinner","_component_oxd_dialog","$setup","_createElementVNode","_hoisted_1","_component_oxd_icon","name","shareCount","likesCount","_component_oxd_divider"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmBuzzPlugin\\components\\PostStatsModal.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-sheet\n    v-if=\"!mobile\"\n    :gutters=\"false\"\n    type=\"white\"\n    class=\"orangehrm-buzz-stats-modal\"\n  >\n    <div\n      v-for=\"user in users\"\n      :key=\"user\"\n      class=\"orangehrm-buzz-stats-modal-employee\"\n    >\n      <profile-image :employee=\"user.employee\"></profile-image>\n      <oxd-text tag=\"p\" class=\"orangehrm-buzz-stats-modal-employee-name\">\n        {{ user.fullName }}\n      </oxd-text>\n    </div>\n    <oxd-loading-spinner v-if=\"isLoading\" class=\"orangehrm-buzz-loader\" />\n  </oxd-sheet>\n  <oxd-dialog v-else class=\"orangehrm-buzz-stats-dialog\" @update:show=\"onClose\">\n    <div class=\"orangehrm-buzz-stats-dialog-header\">\n      <oxd-icon\n        :class=\"{\n          'orangehrm-buzz-stats-dialog-icon': true,\n          '--likes': type === 'likes',\n        }\"\n        :name=\"icon\"\n        :with-container=\"true\"\n      />\n      <oxd-text v-if=\"type === 'shares'\">\n        {{ $t('buzz.n_share', {shareCount: total}) }}\n      </oxd-text>\n      <oxd-text v-if=\"type === 'likes'\">\n        {{ $t('buzz.n_like', {likesCount: total}) }}\n      </oxd-text>\n    </div>\n    <oxd-divider />\n    <div\n      v-for=\"user in users\"\n      :key=\"user\"\n      class=\"orangehrm-buzz-stats-dialog-employee\"\n    >\n      <profile-image :employee=\"user.employee\"></profile-image>\n      <oxd-text tag=\"p\" class=\"orangehrm-buzz-stats-dialog-employee-name\">\n        {{ user.fullName }}\n      </oxd-text>\n    </div>\n    <oxd-loading-spinner v-if=\"isLoading\" class=\"orangehrm-buzz-loader\" />\n  </oxd-dialog>\n</template>\n\n<script>\nimport {onBeforeMount, reactive, toRefs} from 'vue';\nimport {APIService} from '@/core/util/services/api.service';\nimport ProfileImage from '@/orangehrmBuzzPlugin/components/ProfileImage';\nimport useInfiniteScroll from '@/core/util/composable/useInfiniteScroll';\nimport useEmployeeNameTranslate from '@/core/util/composable/useEmployeeNameTranslate';\nimport {OxdDialog, OxdIcon, OxdSheet, OxdSpinner} from '@ohrm/oxd';\n\nexport default {\n  name: 'PostStatsModal',\n\n  components: {\n    'oxd-icon': OxdIcon,\n    'oxd-sheet': OxdSheet,\n    'oxd-dialog': OxdDialog,\n    'profile-image': ProfileImage,\n    'oxd-loading-spinner': OxdSpinner,\n  },\n\n  props: {\n    postId: {\n      type: Number,\n      required: true,\n    },\n    type: {\n      type: String,\n      required: true,\n    },\n    icon: {\n      type: String,\n      required: true,\n    },\n    mobile: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  emits: ['close'],\n\n  setup(props, context) {\n    let apiPath;\n    const EMPLOYEE_LIMIT = 10;\n    const {$tEmpName} = useEmployeeNameTranslate();\n\n    switch (props.type) {\n      case 'likes':\n        apiPath = `/api/v2/buzz/shares/${props.postId}/likes`;\n        break;\n\n      case 'shares':\n        apiPath = `/api/v2/buzz/posts/${props.postId}/shares`;\n        break;\n\n      default:\n        break;\n    }\n\n    const http = new APIService(window.appGlobal.baseUrl, apiPath);\n\n    const state = reactive({\n      total: 0,\n      offset: 0,\n      users: [],\n      isLoading: false,\n    });\n\n    const fetchData = () => {\n      state.isLoading = true;\n      http\n        .getAll({\n          limit: EMPLOYEE_LIMIT,\n          offset: state.offset,\n        })\n        .then((response) => {\n          const {data, meta} = response.data;\n          state.total = meta?.total || 0;\n          if (Array.isArray(data)) {\n            const _data = data.map((user) => {\n              const {employee} = user;\n              return {\n                employee,\n                fullName: $tEmpName(employee, {\n                  includeMiddle: false,\n                  excludePastEmpTag: false,\n                }),\n              };\n            });\n            state.users = [...state.users, ..._data];\n          }\n        })\n        .finally(() => (state.isLoading = false));\n    };\n\n    useInfiniteScroll(() => {\n      if (state.users.length >= state.total) return;\n      state.offset += EMPLOYEE_LIMIT;\n      fetchData();\n    });\n\n    onBeforeMount(() => fetchData());\n\n    const onClose = () => {\n      context.emit('close');\n    };\n\n    return {\n      onClose,\n      fetchData,\n      ...toRefs(state),\n    };\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped src=\"./post-stats-modal.scss\"></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}