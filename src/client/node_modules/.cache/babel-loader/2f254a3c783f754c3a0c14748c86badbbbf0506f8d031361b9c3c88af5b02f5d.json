{"ast":null,"code":"import { ref } from 'vue';\nimport { required, max, digitsOnly } from '@ohrm/core/util/validation/rules';\nimport usei18n from '@/core/util/composable/usei18n';\nexport default {\n  name: 'ReportCriterionRange',\n  inheritAttrs: false,\n  props: {\n    operator: {\n      type: Object,\n      required: false,\n      default: () => null\n    },\n    valueX: {\n      type: String,\n      required: false,\n      default: null\n    },\n    valueY: {\n      type: String,\n      required: false,\n      default: null\n    }\n  },\n  emits: ['update:valueX', 'update:valueY', 'update:operator'],\n  setup(props) {\n    const {\n      $t\n    } = usei18n();\n    const operators = ref([{\n      id: 'lt',\n      label: $t('general.less_than')\n    }, {\n      id: 'gt',\n      label: $t('general.greater_than')\n    }, {\n      id: 'between',\n      label: $t('general.range')\n    }]);\n    const rules = {\n      operator: [required],\n      valueXOnly: [required, digitsOnly, max(100)],\n      valueX: [required, digitsOnly, max(100), v => {\n        if (!parseInt(props.valueY)) return true;\n        return parseInt(v) < parseInt(props.valueY) || $t('general.should_be_less_than_upper_bound');\n      }],\n      valueY: [required, digitsOnly, max(100), v => {\n        if (!parseInt(props.valueX)) return true;\n        return parseInt(v) > parseInt(props.valueX) || $t('general.should_be_greater_than_lower_bound');\n      }]\n    };\n    return {\n      rules,\n      operators\n    };\n  }\n};","map":{"version":3,"mappings":"AAuDA,SAAQA,GAAG,QAAO,KAAK;AACvB,SAAQC,QAAQ,EAAEC,GAAG,EAAEC,UAAU,QAAO,kCAAkC;AAC1E,OAAOC,OAAM,MAAO,gCAAgC;AAEpD,eAAe;EACbC,IAAI,EAAE,sBAAsB;EAC5BC,YAAY,EAAE,KAAK;EACnBC,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEC,MAAM;MACZT,QAAQ,EAAE,KAAK;MACfU,OAAO,EAAE,MAAM;IACjB,CAAC;IACDC,MAAM,EAAE;MACNH,IAAI,EAAEI,MAAM;MACZZ,QAAQ,EAAE,KAAK;MACfU,OAAO,EAAE;IACX,CAAC;IACDG,MAAM,EAAE;MACNL,IAAI,EAAEI,MAAM;MACZZ,QAAQ,EAAE,KAAK;MACfU,OAAO,EAAE;IACX;EACF,CAAC;EACDI,KAAK,EAAE,CAAC,eAAe,EAAE,eAAe,EAAE,iBAAiB,CAAC;EAC5DC,KAAK,CAACT,KAAK,EAAE;IACX,MAAM;MAACU;IAAE,IAAIb,OAAO,EAAE;IACtB,MAAMc,SAAQ,GAAIlB,GAAG,CAAC,CACpB;MAACmB,EAAE,EAAE,IAAI;MAAEC,KAAK,EAAEH,EAAE,CAAC,mBAAmB;IAAC,CAAC,EAC1C;MAACE,EAAE,EAAE,IAAI;MAAEC,KAAK,EAAEH,EAAE,CAAC,sBAAsB;IAAC,CAAC,EAC7C;MAACE,EAAE,EAAE,SAAS;MAAEC,KAAK,EAAEH,EAAE,CAAC,eAAe;IAAC,CAAC,CAC5C,CAAC;IAEF,MAAMI,KAAI,GAAI;MACZb,QAAQ,EAAE,CAACP,QAAQ,CAAC;MACpBqB,UAAU,EAAE,CAACrB,QAAQ,EAAEE,UAAU,EAAED,GAAG,CAAC,GAAG,CAAC,CAAC;MAC5CU,MAAM,EAAE,CACNX,QAAQ,EACRE,UAAU,EACVD,GAAG,CAAC,GAAG,CAAC,EACPqB,CAAC,IAAK;QACL,IAAI,CAACC,QAAQ,CAACjB,KAAK,CAACO,MAAM,CAAC,EAAE,OAAO,IAAI;QACxC,OACEU,QAAQ,CAACD,CAAC,IAAIC,QAAQ,CAACjB,KAAK,CAACO,MAAM,KACnCG,EAAE,CAAC,yCAAyC;MAEhD,CAAC,CACF;MACDH,MAAM,EAAE,CACNb,QAAQ,EACRE,UAAU,EACVD,GAAG,CAAC,GAAG,CAAC,EACPqB,CAAC,IAAK;QACL,IAAI,CAACC,QAAQ,CAACjB,KAAK,CAACK,MAAM,CAAC,EAAE,OAAO,IAAI;QACxC,OACEY,QAAQ,CAACD,CAAC,IAAIC,QAAQ,CAACjB,KAAK,CAACK,MAAM,KACnCK,EAAE,CAAC,4CAA4C;MAEnD,CAAC;IAEL,CAAC;IAED,OAAO;MACLI,KAAK;MACLH;IACF,CAAC;EACH;AACF,CAAC","names":["ref","required","max","digitsOnly","usei18n","name","inheritAttrs","props","operator","type","Object","default","valueX","String","valueY","emits","setup","$t","operators","id","label","rules","valueXOnly","v","parseInt"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\ReportCriterionRange.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-grid-item>\n    <oxd-input-field\n      type=\"select\"\n      :rules=\"rules.operator\"\n      :options=\"operators\"\n      :model-value=\"operator\"\n      @update:model-value=\"$emit('update:operator', $event)\"\n    />\n  </oxd-grid-item>\n  <oxd-grid-item\n    v-if=\"operator && operator.id === 'between'\"\n    class=\"orangehrm-report-range\"\n  >\n    <oxd-input-field\n      :rules=\"rules.valueX\"\n      :model-value=\"valueX\"\n      @update:model-value=\"$emit('update:valueX', $event)\"\n    />\n    <oxd-text class=\"orangehrm-report-range-text\" tag=\"p\">to</oxd-text>\n    <oxd-input-field\n      :rules=\"rules.valueY\"\n      :model-value=\"valueY\"\n      @update:model-value=\"$emit('update:valueY', $event)\"\n    />\n  </oxd-grid-item>\n  <oxd-grid-item v-else-if=\"operator\">\n    <oxd-input-field\n      :rules=\"rules.valueXOnly\"\n      :model-value=\"valueX\"\n      @update:model-value=\"$emit('update:valueX', $event)\"\n    />\n  </oxd-grid-item>\n</template>\n\n<script>\nimport {ref} from 'vue';\nimport {required, max, digitsOnly} from '@ohrm/core/util/validation/rules';\nimport usei18n from '@/core/util/composable/usei18n';\n\nexport default {\n  name: 'ReportCriterionRange',\n  inheritAttrs: false,\n  props: {\n    operator: {\n      type: Object,\n      required: false,\n      default: () => null,\n    },\n    valueX: {\n      type: String,\n      required: false,\n      default: null,\n    },\n    valueY: {\n      type: String,\n      required: false,\n      default: null,\n    },\n  },\n  emits: ['update:valueX', 'update:valueY', 'update:operator'],\n  setup(props) {\n    const {$t} = usei18n();\n    const operators = ref([\n      {id: 'lt', label: $t('general.less_than')},\n      {id: 'gt', label: $t('general.greater_than')},\n      {id: 'between', label: $t('general.range')},\n    ]);\n\n    const rules = {\n      operator: [required],\n      valueXOnly: [required, digitsOnly, max(100)],\n      valueX: [\n        required,\n        digitsOnly,\n        max(100),\n        (v) => {\n          if (!parseInt(props.valueY)) return true;\n          return (\n            parseInt(v) < parseInt(props.valueY) ||\n            $t('general.should_be_less_than_upper_bound')\n          );\n        },\n      ],\n      valueY: [\n        required,\n        digitsOnly,\n        max(100),\n        (v) => {\n          if (!parseInt(props.valueX)) return true;\n          return (\n            parseInt(v) > parseInt(props.valueX) ||\n            $t('general.should_be_greater_than_lower_bound')\n          );\n        },\n      ],\n    };\n\n    return {\n      rules,\n      operators,\n    };\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.orangehrm-report {\n  &-range {\n    display: flex;\n    justify-content: center;\n    align-items: baseline;\n  }\n  &-range-text {\n    margin: 0 1rem;\n    font-size: $oxd-input-control-font-size;\n  }\n}\n::v-deep(.oxd-input-group__label-wrapper) {\n  display: none;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}