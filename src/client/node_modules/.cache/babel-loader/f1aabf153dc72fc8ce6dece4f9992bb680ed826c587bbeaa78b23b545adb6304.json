{"ast":null,"code":"import { resolveComponent as _resolveComponent, mergeProps as _mergeProps, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  const _component_oxd_grid_item = _resolveComponent(\"oxd-grid-item\");\n  return _openBlock(), _createBlock(_component_oxd_grid_item, null, {\n    default: _withCtx(() => [_createVNode(_component_oxd_input_field, _mergeProps(_ctx.$attrs, {\n      type: \"select\",\n      rules: $setup.rules,\n      options: $setup.opts,\n      \"model-value\": $props.valueX,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.$emit('update:valueX', $event))\n    }), null, 16, [\"rules\", \"options\", \"model-value\"])]),\n    _: 1\n  });\n}","map":{"version":3,"mappings":";;;;uBAoBEA,aASgBC;sBARd,MAOE,CAPFC,aAOEC,4BAPFC,YACUC,IAMR,OANc;MACdC,IAAI,EAAC,QAAQ;MACZC,KAAK,EAAEC,YAAK;MACZC,OAAO,EAAED,WAAI;MACb,aAAW,EAAEE,aAAM;MACnB,qBAAkB,sCAAEL,UAAK,kBAAkBM,MAAM","names":["_createBlock","_component_oxd_grid_item","_createVNode","_component_oxd_input_field","_mergeProps","_ctx","type","rules","$setup","options","$props","$event"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\ReportCriterionSelect.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-grid-item>\n    <oxd-input-field\n      v-bind=\"$attrs\"\n      type=\"select\"\n      :rules=\"rules\"\n      :options=\"opts\"\n      :model-value=\"valueX\"\n      @update:model-value=\"$emit('update:valueX', $event)\"\n    />\n  </oxd-grid-item>\n</template>\n\n<script>\nimport {ref, onBeforeMount} from 'vue';\nimport {required} from '@ohrm/core/util/validation/rules';\nimport {APIService} from '@ohrm/core/util/services/api.service';\n\nexport default {\n  name: 'ReportCriterionSelect',\n  inheritAttrs: false,\n  props: {\n    api: {\n      type: String,\n      required: false,\n      default: null,\n    },\n    options: {\n      type: Array,\n      default: () => [],\n    },\n    valueX: {\n      type: Object,\n      required: false,\n      default: () => null,\n    },\n  },\n  emits: ['update:valueX', 'update:operator'],\n  setup(props, context) {\n    const opts = ref(props.options);\n    const rules = [required];\n\n    if (props.api) {\n      const http = new APIService(window.appGlobal.baseUrl, props.api);\n      onBeforeMount(() => {\n        http\n          .getAll({\n            ...(props.api !== '/api/v2/admin/subunits' && {limit: 0}),\n          })\n          .then(({data}) => {\n            opts.value = data.data.map((item) => {\n              return {\n                id: item.id,\n                label: item.name ? item.name : item.title,\n                _indent: item.level ? item.level + 1 : 1,\n              };\n            });\n          });\n      });\n    }\n\n    if (\n      props.api === '/api/v2/admin/locations' ||\n      props.api === '/api/v2/admin/subunits'\n    ) {\n      context.emit('update:operator', {id: 'in', label: 'Equal'});\n    } else {\n      context.emit('update:operator', {id: 'eq', label: 'Equal'});\n    }\n\n    return {\n      opts,\n      rules,\n    };\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n::v-deep(.oxd-input-group__label-wrapper) {\n  display: none;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}