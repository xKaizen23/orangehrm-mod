{"ast":null,"code":"import { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nconst languageModel = {\n  languageId: null,\n  fluencyId: null,\n  competencyId: null,\n  comment: ''\n};\nexport default {\n  name: 'SaveLanguage',\n  props: {\n    http: {\n      type: Object,\n      required: true\n    },\n    fluencies: {\n      type: Array,\n      required: true\n    },\n    competencies: {\n      type: Array,\n      required: true\n    },\n    api: {\n      type: String,\n      required: true\n    }\n  },\n  emits: ['close'],\n  data() {\n    return {\n      isLoading: false,\n      language: {\n        ...languageModel\n      },\n      languages: [],\n      rules: {\n        languageId: [required],\n        fluencyId: [required],\n        competencyId: [required],\n        comment: [shouldNotExceedCharLength(100)]\n      }\n    };\n  },\n  computed: {\n    allowedLanguages() {\n      return this.languages;\n    },\n    allowedFluencies() {\n      const languageIndex = this.languages.findIndex(item => item.id === this.language.languageId?.id);\n      if (languageIndex > -1) {\n        const selectedLanguage = this.languages[languageIndex];\n        return this.fluencies.filter(item => {\n          return selectedLanguage.allowedFluencyIds.includes(item.id);\n        });\n      }\n      return [];\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.request({\n      method: 'GET',\n      url: this.api,\n      params: {\n        limit: 0\n      }\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      if (Array.isArray(data)) {\n        this.languages = data.map(item => {\n          return {\n            id: item.id,\n            label: item.name,\n            allowedFluencyIds: item.allowedFluencyIds ? item.allowedFluencyIds : []\n          };\n        });\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        languageId: this.language.languageId?.id,\n        fluencyId: this.language.fluencyId?.id,\n        competencyId: this.language.competencyId?.id,\n        comment: this.language.comment\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["required","shouldNotExceedCharLength","languageModel","languageId","fluencyId","competencyId","comment","name","props","http","type","Object","fluencies","Array","competencies","api","String","emits","data","isLoading","language","languages","rules","computed","allowedLanguages","allowedFluencies","languageIndex","findIndex","item","id","selectedLanguage","filter","allowedFluencyIds","includes","beforeMount","request","method","url","params","limit","then","response","isArray","map","label","finally","methods","onSave","create","$toast","saveSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\SaveLanguage.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-horizontal-padding orangehrm-top-padding\">\n    <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">{{\n      $t('general.add_language')\n    }}</oxd-text>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              :key=\"allowedLanguages\"\n              v-model=\"language.languageId\"\n              type=\"select\"\n              :label=\"$t('general.language')\"\n              :options=\"allowedLanguages\"\n              :rules=\"rules.languageId\"\n              :clear=\"false\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              :key=\"allowedFluencies\"\n              v-model=\"language.fluencyId\"\n              type=\"select\"\n              :label=\"$t('pim.fluency')\"\n              :options=\"allowedFluencies\"\n              :rules=\"rules.fluencyId\"\n              :clear=\"false\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"language.competencyId\"\n              type=\"select\"\n              :label=\"$t('pim.competency')\"\n              :options=\"competencies\"\n              :rules=\"rules.competencyId\"\n              :clear=\"false\"\n              required\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item class=\"--span-column-2\">\n            <oxd-input-field\n              v-model=\"language.comment\"\n              type=\"textarea\"\n              :label=\"$t('general.comments')\"\n              :rules=\"rules.comment\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n    <oxd-divider />\n  </div>\n</template>\n\n<script>\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\n\nconst languageModel = {\n  languageId: null,\n  fluencyId: null,\n  competencyId: null,\n  comment: '',\n};\n\nexport default {\n  name: 'SaveLanguage',\n\n  props: {\n    http: {\n      type: Object,\n      required: true,\n    },\n    fluencies: {\n      type: Array,\n      required: true,\n    },\n    competencies: {\n      type: Array,\n      required: true,\n    },\n    api: {\n      type: String,\n      required: true,\n    },\n  },\n\n  emits: ['close'],\n\n  data() {\n    return {\n      isLoading: false,\n      language: {...languageModel},\n      languages: [],\n      rules: {\n        languageId: [required],\n        fluencyId: [required],\n        competencyId: [required],\n        comment: [shouldNotExceedCharLength(100)],\n      },\n    };\n  },\n\n  computed: {\n    allowedLanguages() {\n      return this.languages;\n    },\n    allowedFluencies() {\n      const languageIndex = this.languages.findIndex(\n        (item) => item.id === this.language.languageId?.id,\n      );\n      if (languageIndex > -1) {\n        const selectedLanguage = this.languages[languageIndex];\n        return this.fluencies.filter((item) => {\n          return selectedLanguage.allowedFluencyIds.includes(item.id);\n        });\n      }\n      return [];\n    },\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .request({\n        method: 'GET',\n        url: this.api,\n        params: {limit: 0},\n      })\n      .then((response) => {\n        const {data} = response.data;\n        if (Array.isArray(data)) {\n          this.languages = data.map((item) => {\n            return {\n              id: item.id,\n              label: item.name,\n              allowedFluencyIds: item.allowedFluencyIds\n                ? item.allowedFluencyIds\n                : [],\n            };\n          });\n        }\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .create({\n          languageId: this.language.languageId?.id,\n          fluencyId: this.language.fluencyId?.id,\n          competencyId: this.language.competencyId?.id,\n          comment: this.language.comment,\n        })\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}