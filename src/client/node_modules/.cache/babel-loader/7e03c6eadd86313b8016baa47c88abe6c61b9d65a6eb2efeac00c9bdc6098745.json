{"ast":null,"code":"import { onBeforeMount, reactive, toRefs } from 'vue';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport { startOfYear, endOfYear, formatDate, parseDate } from '@ohrm/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\nexport default {\n  name: 'DateInput',\n  setup() {\n    const state = reactive({\n      attributes: [],\n      events: []\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {\n      jsDateFormat,\n      userDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    const responseValidator = status => {\n      return status >= 200 && status < 300 || status === 403;\n    };\n    const fetchWorkWeek = async () => {\n      http.request({\n        method: 'GET',\n        url: '/api/v2/leave/workweek',\n        params: {\n          model: 'indexed'\n        },\n        validateStatus: responseValidator\n      }).then(({\n        data\n      }) => {\n        if (data?.data) {\n          state.attributes = Object.keys(data.data).map(i => {\n            return {\n              index: parseInt(i),\n              class: data.data[i] === 8 ? '--non-working-day' : data.data[i] === 4 ? '--working-day-half' : ''\n            };\n          });\n        }\n      });\n    };\n    const fetchEvents = async (fromDate, toDate) => {\n      http.request({\n        method: 'GET',\n        url: '/api/v2/leave/holidays',\n        params: {\n          fromDate,\n          toDate\n        },\n        validateStatus: responseValidator\n      }).then(({\n        data\n      }) => {\n        if (Array.isArray(data?.data)) {\n          state.events = data.data.map(event => {\n            return {\n              date: parseDate(event.date, 'yyyy-MM-dd'),\n              type: event.name,\n              class: event.length === 0 ? '--holiday-full' : '--holiday-half'\n            };\n          });\n        }\n      });\n    };\n    const onSelectYear = async ({\n      year\n    }) => {\n      const now = new Date().setFullYear(year);\n      const fromDate = formatDate(startOfYear(now), 'yyyy-MM-dd');\n      const endDate = formatDate(endOfYear(now), 'yyyy-MM-dd');\n      fetchEvents(fromDate, endDate);\n    };\n    onBeforeMount(async () => {\n      await fetchWorkWeek();\n      await onSelectYear({\n        year: new Date().getFullYear()\n      });\n    });\n    return {\n      jsDateFormat,\n      userDateFormat,\n      ...toRefs(state),\n      onSelectYear,\n      locale\n    };\n  }\n};","map":{"version":3,"mappings":"AAgCA,SAAQA,aAAa,EAAEC,QAAQ,EAAEC,MAAM,QAAO,KAAK;AACnD,SAAQC,UAAU,QAAO,sCAAsC;AAC/D,SACEC,WAAW,EACXC,SAAS,EACTC,UAAU,EACVC,SAAS,QACJ,gCAAgC;AACvC,OAAOC,aAAY,MAAO,sCAAsC;AAChE,OAAOC,SAAQ,MAAO,kCAAkC;AAExD,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAK,GAAG;IACN,MAAMC,KAAI,GAAIX,QAAQ,CAAC;MACrBY,UAAU,EAAE,EAAE;MACdC,MAAM,EAAE;IACV,CAAC,CAAC;IACF,MAAMC,IAAG,GAAI,IAAIZ,UAAU,CAACa,MAAM,CAACC,SAAS,CAACC,OAAO,EAAE,EAAE,CAAC;IACzD,MAAM;MAACC,YAAY;MAAEC;IAAc,IAAIZ,aAAa,EAAE;IACtD,MAAM;MAACa;IAAM,IAAIZ,SAAS,EAAE;IAE5B,MAAMa,iBAAgB,GAAKC,MAAM,IAAK;MACpC,OAAQA,MAAK,IAAK,GAAE,IAAKA,MAAK,GAAI,GAAG,IAAKA,MAAK,KAAM,GAAG;IAC1D,CAAC;IAED,MAAMC,aAAY,GAAI,YAAY;MAChCT,IAAG,CACAU,OAAO,CAAC;QACPC,MAAM,EAAE,KAAK;QACbC,GAAG,EAAE,wBAAwB;QAC7BC,MAAM,EAAE;UACNC,KAAK,EAAE;QACT,CAAC;QACDC,cAAc,EAAER;MAClB,CAAC,EACAS,IAAI,CAAC,CAAC;QAACC;MAAI,CAAC,KAAK;QAChB,IAAIA,IAAI,EAAEA,IAAI,EAAE;UACdpB,KAAK,CAACC,UAAS,GAAIoB,MAAM,CAACC,IAAI,CAACF,IAAI,CAACA,IAAI,CAAC,CAACG,GAAG,CAAEC,CAAC,IAAK;YACnD,OAAO;cACLC,KAAK,EAAEC,QAAQ,CAACF,CAAC,CAAC;cAClBG,KAAK,EACHP,IAAI,CAACA,IAAI,CAACI,CAAC,MAAM,IACb,mBAAkB,GAClBJ,IAAI,CAACA,IAAI,CAACI,CAAC,MAAM,IACjB,oBAAmB,GACnB;YACR,CAAC;UACH,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACN,CAAC;IAED,MAAMI,WAAU,GAAI,OAAOC,QAAQ,EAAEC,MAAM,KAAK;MAC9C3B,IAAG,CACAU,OAAO,CAAC;QACPC,MAAM,EAAE,KAAK;QACbC,GAAG,EAAE,wBAAwB;QAC7BC,MAAM,EAAE;UACNa,QAAQ;UACRC;QACF,CAAC;QACDZ,cAAc,EAAER;MAClB,CAAC,EACAS,IAAI,CAAC,CAAC;QAACC;MAAI,CAAC,KAAK;QAChB,IAAIW,KAAK,CAACC,OAAO,CAACZ,IAAI,EAAEA,IAAI,CAAC,EAAE;UAC7BpB,KAAK,CAACE,MAAK,GAAIkB,IAAI,CAACA,IAAI,CAACG,GAAG,CAAEU,KAAK,IAAK;YACtC,OAAO;cACLC,IAAI,EAAEvC,SAAS,CAACsC,KAAK,CAACC,IAAI,EAAE,YAAY,CAAC;cACzCC,IAAI,EAAEF,KAAK,CAACnC,IAAI;cAChB6B,KAAK,EAAEM,KAAK,CAACG,MAAK,KAAM,IAAI,gBAAe,GAAI;YACjD,CAAC;UACH,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACN,CAAC;IAED,MAAMC,YAAW,GAAI,OAAO;MAACC;IAAI,CAAC,KAAK;MACrC,MAAMC,GAAE,GAAI,IAAIC,IAAI,EAAE,CAACC,WAAW,CAACH,IAAI,CAAC;MACxC,MAAMT,QAAO,GAAInC,UAAU,CAACF,WAAW,CAAC+C,GAAG,CAAC,EAAE,YAAY,CAAC;MAC3D,MAAMG,OAAM,GAAIhD,UAAU,CAACD,SAAS,CAAC8C,GAAG,CAAC,EAAE,YAAY,CAAC;MACxDX,WAAW,CAACC,QAAQ,EAAEa,OAAO,CAAC;IAChC,CAAC;IAEDtD,aAAa,CAAC,YAAY;MACxB,MAAMwB,aAAa,EAAE;MACrB,MAAMyB,YAAY,CAAC;QAACC,IAAI,EAAE,IAAIE,IAAI,EAAE,CAACG,WAAW;MAAE,CAAC,CAAC;IACtD,CAAC,CAAC;IAEF,OAAO;MACLpC,YAAY;MACZC,cAAc;MACd,GAAGlB,MAAM,CAACU,KAAK,CAAC;MAChBqC,YAAY;MACZ5B;IACF,CAAC;EACH;AACF,CAAC","names":["onBeforeMount","reactive","toRefs","APIService","startOfYear","endOfYear","formatDate","parseDate","useDateFormat","useLocale","name","setup","state","attributes","events","http","window","appGlobal","baseUrl","jsDateFormat","userDateFormat","locale","responseValidator","status","fetchWorkWeek","request","method","url","params","model","validateStatus","then","data","Object","keys","map","i","index","parseInt","class","fetchEvents","fromDate","toDate","Array","isArray","event","date","type","length","onSelectYear","year","now","Date","setFullYear","endDate","getFullYear"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\core\\components\\inputs\\DateInput.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-input-field\n    type=\"date\"\n    :placeholder=\"userDateFormat\"\n    :day-attributes=\"attributes\"\n    :events=\"events\"\n    :display-format=\"jsDateFormat\"\n    :locale=\"locale\"\n    @select-year=\"onSelectYear\"\n  />\n</template>\n\n<script>\nimport {onBeforeMount, reactive, toRefs} from 'vue';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport {\n  startOfYear,\n  endOfYear,\n  formatDate,\n  parseDate,\n} from '@ohrm/core/util/helper/datefns';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport useLocale from '@/core/util/composable/useLocale';\n\nexport default {\n  name: 'DateInput',\n  setup() {\n    const state = reactive({\n      attributes: [],\n      events: [],\n    });\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    const {jsDateFormat, userDateFormat} = useDateFormat();\n    const {locale} = useLocale();\n\n    const responseValidator = (status) => {\n      return (status >= 200 && status < 300) || status === 403;\n    };\n\n    const fetchWorkWeek = async () => {\n      http\n        .request({\n          method: 'GET',\n          url: '/api/v2/leave/workweek',\n          params: {\n            model: 'indexed',\n          },\n          validateStatus: responseValidator,\n        })\n        .then(({data}) => {\n          if (data?.data) {\n            state.attributes = Object.keys(data.data).map((i) => {\n              return {\n                index: parseInt(i),\n                class:\n                  data.data[i] === 8\n                    ? '--non-working-day'\n                    : data.data[i] === 4\n                    ? '--working-day-half'\n                    : '',\n              };\n            });\n          }\n        });\n    };\n\n    const fetchEvents = async (fromDate, toDate) => {\n      http\n        .request({\n          method: 'GET',\n          url: '/api/v2/leave/holidays',\n          params: {\n            fromDate,\n            toDate,\n          },\n          validateStatus: responseValidator,\n        })\n        .then(({data}) => {\n          if (Array.isArray(data?.data)) {\n            state.events = data.data.map((event) => {\n              return {\n                date: parseDate(event.date, 'yyyy-MM-dd'),\n                type: event.name,\n                class: event.length === 0 ? '--holiday-full' : '--holiday-half',\n              };\n            });\n          }\n        });\n    };\n\n    const onSelectYear = async ({year}) => {\n      const now = new Date().setFullYear(year);\n      const fromDate = formatDate(startOfYear(now), 'yyyy-MM-dd');\n      const endDate = formatDate(endOfYear(now), 'yyyy-MM-dd');\n      fetchEvents(fromDate, endDate);\n    };\n\n    onBeforeMount(async () => {\n      await fetchWorkWeek();\n      await onSelectYear({year: new Date().getFullYear()});\n    });\n\n    return {\n      jsDateFormat,\n      userDateFormat,\n      ...toRefs(state),\n      onSelectYear,\n      locale,\n    };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}