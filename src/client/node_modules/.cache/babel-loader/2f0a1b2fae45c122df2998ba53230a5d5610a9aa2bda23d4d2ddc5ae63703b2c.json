{"ast":null,"code":"import useLocale from '@/core/util/composable/useLocale';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport { promiseDebounce } from '@ohrm/oxd';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { formatDate, parseDate } from '@/core/util/helper/datefns';\nimport { required, max, validSelection } from '@/core/util/validation/rules';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport LeaveTypeDropdown from '@/orangehrmLeavePlugin/components/LeaveTypeDropdown';\nconst leaveEntitlementModel = {\n  employee: null,\n  leaveType: null,\n  leavePeriod: null,\n  entitlement: ''\n};\nexport default {\n  components: {\n    'leave-type-dropdown': LeaveTypeDropdown,\n    'employee-autocomplete': EmployeeAutocomplete\n  },\n  props: {\n    entitlementId: {\n      type: String,\n      required: true\n    },\n    employee: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/leave/leave-entitlements');\n    http.setIgnorePath('/api/v2/leave/leave-entitlements/[0-9]+/validation/entitlements');\n    const {\n      jsDateFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    return {\n      http,\n      jsDateFormat,\n      locale\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      leaveEntitlement: {\n        ...leaveEntitlementModel\n      },\n      rules: {\n        employee: [required, validSelection],\n        leaveType: [required],\n        leavePeriod: [required],\n        entitlement: [required, v => {\n          return /^\\d+(\\.\\d{1,2})?$/.test(v) || this.$t('leave.should_be_a_number_with_2_decimal_places');\n        }, max(10000), promiseDebounce(this.validateEntitlement, 500)]\n      },\n      leavePeriods: []\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.request({\n      method: 'GET',\n      url: '/api/v2/leave/leave-periods'\n    }).then(({\n      data\n    }) => {\n      this.leavePeriods = data.data.map(item => {\n        const startDate = formatDate(parseDate(item.startDate), this.jsDateFormat, {\n          locale: this.locale\n        });\n        const endDate = formatDate(parseDate(item.endDate), this.jsDateFormat, {\n          locale: this.locale\n        });\n        return {\n          id: `${item.startDate}_${item.endDate}`,\n          label: `${startDate} - ${endDate}`,\n          startDate: item.startDate,\n          endDate: item.endDate\n        };\n      });\n      return this.http.get(this.entitlementId);\n    }).then(response => {\n      const {\n        data\n      } = response.data;\n      this.leaveEntitlement.employee = {\n        id: data.employee.empNumber,\n        label: `${data.employee.firstName} ${data.employee.lastName}`,\n        isPastEmployee: data.employee.terminationId\n      };\n      this.leaveEntitlement.leaveType = {\n        id: data.leaveType.id,\n        label: data.leaveType.name\n      };\n      this.leaveEntitlement.leavePeriod = this.leavePeriods.find(item => {\n        return item.id === `${data.fromDate}_${data.toDate}`;\n      });\n      this.leaveEntitlement.entitlement = data.entitlement;\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/leave/viewLeaveEntitlements', undefined, {\n        empNumber: this.leaveEntitlement.employee?.id,\n        leaveTypeId: this.leaveEntitlement.leaveType?.id,\n        startDate: this.leaveEntitlement.leavePeriod?.startDate,\n        endDate: this.leaveEntitlement.leavePeriod?.endDate\n      });\n    },\n    onSave() {\n      this.isLoading = true;\n      const payload = {\n        fromDate: this.leaveEntitlement.leavePeriod?.startDate,\n        toDate: this.leaveEntitlement.leavePeriod?.endDate,\n        entitlement: this.leaveEntitlement.entitlement\n      };\n      this.http.update(this.entitlementId, payload).then(() => {\n        this.$toast.updateSuccess();\n        this.onCancel();\n      });\n    },\n    validateEntitlement(value) {\n      const entitlement = parseFloat(value);\n      return new Promise(resolve => {\n        if (!isNaN(entitlement)) {\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/leave/leave-entitlements/${this.entitlementId}/validation/entitlements`,\n            params: {\n              entitlement\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            return data.valid === true ? resolve(true) : resolve(this.$t('leave.used_amount_exceeds_the_current_amount'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["useLocale","navigate","promiseDebounce","APIService","useDateFormat","formatDate","parseDate","required","max","validSelection","EmployeeAutocomplete","LeaveTypeDropdown","leaveEntitlementModel","employee","leaveType","leavePeriod","entitlement","components","props","entitlementId","type","String","Object","default","setup","http","window","appGlobal","baseUrl","setIgnorePath","jsDateFormat","locale","data","isLoading","leaveEntitlement","rules","v","test","$t","validateEntitlement","leavePeriods","beforeMount","request","method","url","then","map","item","startDate","endDate","id","label","get","response","empNumber","firstName","lastName","isPastEmployee","terminationId","name","find","fromDate","toDate","finally","methods","onCancel","undefined","leaveTypeId","onSave","payload","update","$toast","updateSuccess","value","parseFloat","Promise","resolve","isNaN","params","valid"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmLeavePlugin\\pages\\entitlements\\EditEntitlement.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text class=\"orangehrm-main-title\">\n        {{ $t('leave.edit_leave_entitlement') }}\n      </oxd-text>\n\n      <oxd-divider />\n\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <employee-autocomplete\n                v-model=\"leaveEntitlement.employee\"\n                disabled\n                required\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-form-row>\n          <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <leave-type-dropdown\n                v-model=\"leaveEntitlement.leaveType\"\n                :eligible-only=\"false\"\n                required\n                disabled\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"leaveEntitlement.leavePeriod\"\n                type=\"select\"\n                :label=\"$t('leave.leave_period')\"\n                :options=\"leavePeriods\"\n                :rules=\"rules.leavePeriod\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"leaveEntitlement.entitlement\"\n                :rules=\"rules.entitlement\"\n                :label=\"$t('leave.entitlement')\"\n                required\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-divider />\n\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport useLocale from '@/core/util/composable/useLocale';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {promiseDebounce} from '@ohrm/oxd';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport {formatDate, parseDate} from '@/core/util/helper/datefns';\nimport {required, max, validSelection} from '@/core/util/validation/rules';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport LeaveTypeDropdown from '@/orangehrmLeavePlugin/components/LeaveTypeDropdown';\n\nconst leaveEntitlementModel = {\n  employee: null,\n  leaveType: null,\n  leavePeriod: null,\n  entitlement: '',\n};\n\nexport default {\n  components: {\n    'leave-type-dropdown': LeaveTypeDropdown,\n    'employee-autocomplete': EmployeeAutocomplete,\n  },\n\n  props: {\n    entitlementId: {\n      type: String,\n      required: true,\n    },\n    employee: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/leave/leave-entitlements',\n    );\n    http.setIgnorePath(\n      '/api/v2/leave/leave-entitlements/[0-9]+/validation/entitlements',\n    );\n    const {jsDateFormat} = useDateFormat();\n    const {locale} = useLocale();\n    return {\n      http,\n      jsDateFormat,\n      locale,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      leaveEntitlement: {...leaveEntitlementModel},\n      rules: {\n        employee: [required, validSelection],\n        leaveType: [required],\n        leavePeriod: [required],\n        entitlement: [\n          required,\n          (v) => {\n            return (\n              /^\\d+(\\.\\d{1,2})?$/.test(v) ||\n              this.$t('leave.should_be_a_number_with_2_decimal_places')\n            );\n          },\n          max(10000),\n          promiseDebounce(this.validateEntitlement, 500),\n        ],\n      },\n      leavePeriods: [],\n    };\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .request({method: 'GET', url: '/api/v2/leave/leave-periods'})\n      .then(({data}) => {\n        this.leavePeriods = data.data.map((item) => {\n          const startDate = formatDate(\n            parseDate(item.startDate),\n            this.jsDateFormat,\n            {locale: this.locale},\n          );\n          const endDate = formatDate(\n            parseDate(item.endDate),\n            this.jsDateFormat,\n            {locale: this.locale},\n          );\n          return {\n            id: `${item.startDate}_${item.endDate}`,\n            label: `${startDate} - ${endDate}`,\n            startDate: item.startDate,\n            endDate: item.endDate,\n          };\n        });\n        return this.http.get(this.entitlementId);\n      })\n      .then((response) => {\n        const {data} = response.data;\n        this.leaveEntitlement.employee = {\n          id: data.employee.empNumber,\n          label: `${data.employee.firstName} ${data.employee.lastName}`,\n          isPastEmployee: data.employee.terminationId,\n        };\n        this.leaveEntitlement.leaveType = {\n          id: data.leaveType.id,\n          label: data.leaveType.name,\n        };\n        this.leaveEntitlement.leavePeriod = this.leavePeriods.find((item) => {\n          return item.id === `${data.fromDate}_${data.toDate}`;\n        });\n        this.leaveEntitlement.entitlement = data.entitlement;\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onCancel() {\n      navigate('/leave/viewLeaveEntitlements', undefined, {\n        empNumber: this.leaveEntitlement.employee?.id,\n        leaveTypeId: this.leaveEntitlement.leaveType?.id,\n        startDate: this.leaveEntitlement.leavePeriod?.startDate,\n        endDate: this.leaveEntitlement.leavePeriod?.endDate,\n      });\n    },\n    onSave() {\n      this.isLoading = true;\n\n      const payload = {\n        fromDate: this.leaveEntitlement.leavePeriod?.startDate,\n        toDate: this.leaveEntitlement.leavePeriod?.endDate,\n        entitlement: this.leaveEntitlement.entitlement,\n      };\n\n      this.http.update(this.entitlementId, payload).then(() => {\n        this.$toast.updateSuccess();\n        this.onCancel();\n      });\n    },\n\n    validateEntitlement(value) {\n      const entitlement = parseFloat(value);\n      return new Promise((resolve) => {\n        if (!isNaN(entitlement)) {\n          this.http\n            .request({\n              method: 'GET',\n              url: `/api/v2/leave/leave-entitlements/${this.entitlementId}/validation/entitlements`,\n              params: {\n                entitlement,\n              },\n            })\n            .then((response) => {\n              const {data} = response.data;\n              return data.valid === true\n                ? resolve(true)\n                : resolve(\n                    this.$t('leave.used_amount_exceeds_the_current_amount'),\n                  );\n            });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}