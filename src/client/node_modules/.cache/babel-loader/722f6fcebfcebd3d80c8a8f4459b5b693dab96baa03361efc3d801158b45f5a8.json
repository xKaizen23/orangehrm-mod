{"ast":null,"code":"import { APIService } from '@ohrm/core/util/services/api.service';\nexport default {\n  name: 'ProjectAutocomplete',\n  props: {\n    onlyAllowed: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    excludeProjectIds: {\n      type: Array,\n      required: false,\n      default: () => []\n    },\n    excludeCustomerName: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/time/projects');\n    return {\n      http\n    };\n  },\n  methods: {\n    async loadProjects(serachParam) {\n      return new Promise(resolve => {\n        if (serachParam.trim()) {\n          const params = {\n            name: this.excludeCustomerName ? serachParam.trim() : undefined,\n            onlyAllowed: this.onlyAllowed,\n            model: 'detailed',\n            excludeProjectIds: this.excludeProjectIds.length > 0 ? this.excludeProjectIds : undefined,\n            customerOrProjectName: !this.excludeCustomerName ? serachParam.trim() : undefined\n          };\n          this.http.getAll(params).then(({\n            data\n          }) => {\n            resolve(data.data.map(project => {\n              return {\n                id: project.id,\n                label: this.excludeCustomerName ? project.name : `${project.customer?.name} - ${project.name}`,\n                _customer: project.customer\n              };\n            }));\n          });\n        } else {\n          resolve([]);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAiCA,SAAQA,UAAU,QAAO,sCAAsC;AAC/D,eAAe;EACbC,IAAI,EAAE,qBAAqB;EAC3BC,KAAK,EAAE;IACLC,WAAW,EAAE;MACXC,IAAI,EAAEC,OAAO;MACbC,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAE;IACX,CAAC;IACDC,iBAAiB,EAAE;MACjBJ,IAAI,EAAEK,KAAK;MACXH,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAE,MAAM;IACjB,CAAC;IACDG,mBAAmB,EAAE;MACnBN,IAAI,EAAEC,OAAO;MACbE,OAAO,EAAE;IACX;EACF,CAAC;EACDI,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIZ,UAAU,CACzBa,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,uBAAuB,CACxB;IACD,OAAO;MACLH;IACF,CAAC;EACH,CAAC;EACDI,OAAO,EAAE;IACP,MAAMC,YAAY,CAACC,WAAW,EAAE;MAC9B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;QAC9B,IAAIF,WAAW,CAACG,IAAI,EAAE,EAAE;UACtB,MAAMC,MAAK,GAAI;YACbrB,IAAI,EAAE,IAAI,CAACS,mBAAkB,GAAIQ,WAAW,CAACG,IAAI,EAAC,GAAIE,SAAS;YAC/DpB,WAAW,EAAE,IAAI,CAACA,WAAW;YAC7BqB,KAAK,EAAE,UAAU;YACjBhB,iBAAiB,EACf,IAAI,CAACA,iBAAiB,CAACiB,MAAK,GAAI,IAC5B,IAAI,CAACjB,iBAAgB,GACrBe,SAAS;YACfG,qBAAqB,EAAE,CAAC,IAAI,CAAChB,mBAAkB,GAC3CQ,WAAW,CAACG,IAAI,EAAC,GACjBE;UACN,CAAC;UACD,IAAI,CAACX,IAAI,CAACe,MAAM,CAACL,MAAM,CAAC,CAACM,IAAI,CAAC,CAAC;YAACC;UAAI,CAAC,KAAK;YACxCT,OAAO,CACLS,IAAI,CAACA,IAAI,CAACC,GAAG,CAAEC,OAAO,IAAK;cACzB,OAAO;gBACLC,EAAE,EAAED,OAAO,CAACC,EAAE;gBACdC,KAAK,EAAE,IAAI,CAACvB,mBAAkB,GAC1BqB,OAAO,CAAC9B,IAAG,GACV,GAAE8B,OAAO,CAACG,QAAQ,EAAEjC,IAAI,MAAM8B,OAAO,CAAC9B,IAAK,EAAC;gBACjDkC,SAAS,EAAEJ,OAAO,CAACG;cACrB,CAAC;YACH,CAAC,CAAC,CACH;UACH,CAAC,CAAC;QACJ,OAAO;UACLd,OAAO,CAAC,EAAE,CAAC;QACb;MACF,CAAC,CAAC;IACJ;EACF;AACF,CAAC","names":["APIService","name","props","onlyAllowed","type","Boolean","required","default","excludeProjectIds","Array","excludeCustomerName","setup","http","window","appGlobal","baseUrl","methods","loadProjects","serachParam","Promise","resolve","trim","params","undefined","model","length","customerOrProjectName","getAll","then","data","map","project","id","label","customer","_customer"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmTimePlugin\\components\\ProjectAutocomplete.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-input-field\n    type=\"autocomplete\"\n    :clear=\"false\"\n    :label=\"$t('time.project')\"\n    :create-options=\"loadProjects\"\n  >\n    <template #option=\"{data}\">\n      <span> {{ data.label }} </span>\n    </template>\n  </oxd-input-field>\n</template>\n\n<script>\nimport {APIService} from '@ohrm/core/util/services/api.service';\nexport default {\n  name: 'ProjectAutocomplete',\n  props: {\n    onlyAllowed: {\n      type: Boolean,\n      required: false,\n      default: true,\n    },\n    excludeProjectIds: {\n      type: Array,\n      required: false,\n      default: () => [],\n    },\n    excludeCustomerName: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/time/projects',\n    );\n    return {\n      http,\n    };\n  },\n  methods: {\n    async loadProjects(serachParam) {\n      return new Promise((resolve) => {\n        if (serachParam.trim()) {\n          const params = {\n            name: this.excludeCustomerName ? serachParam.trim() : undefined,\n            onlyAllowed: this.onlyAllowed,\n            model: 'detailed',\n            excludeProjectIds:\n              this.excludeProjectIds.length > 0\n                ? this.excludeProjectIds\n                : undefined,\n            customerOrProjectName: !this.excludeCustomerName\n              ? serachParam.trim()\n              : undefined,\n          };\n          this.http.getAll(params).then(({data}) => {\n            resolve(\n              data.data.map((project) => {\n                return {\n                  id: project.id,\n                  label: this.excludeCustomerName\n                    ? project.name\n                    : `${project.customer?.name} - ${project.name}`,\n                  _customer: project.customer,\n                };\n              }),\n            );\n          });\n        } else {\n          resolve([]);\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n::v-deep(.oxd-autocomplete-wrapper) {\n  min-width: 150px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}