{"ast":null,"code":"import { required, validDateFormat, shouldNotExceedCharLength } from '@/core/util/validation/rules';\nimport { parseTime, parseDate, formatTime, formatDate, guessTimezone, setClockInterval, getStandardTimezone } from '@/core/util/helper/datefns';\nimport { promiseDebounce } from '@ohrm/oxd';\nimport useLocale from '@/core/util/composable/useLocale';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport { reloadPage, navigate } from '@/core/util/helper/navigation';\nimport TimezoneDropdown from '@/orangehrmAttendancePlugin/components/TimezoneDropdown.vue';\nconst attendanceRecordModal = {\n  date: null,\n  time: null,\n  note: null,\n  timezone: null,\n  previousRecord: null\n};\nexport default {\n  name: 'RecordAttendance',\n  components: {\n    'timezone-dropdown': TimezoneDropdown\n  },\n  props: {\n    isEditable: {\n      type: Boolean,\n      default: false\n    },\n    isTimezoneEditable: {\n      type: Boolean,\n      default: false\n    },\n    attendanceRecordId: {\n      type: Number,\n      default: null\n    },\n    employeeId: {\n      type: Number,\n      default: null\n    },\n    date: {\n      type: String,\n      default: null\n    }\n  },\n  setup(props) {\n    const apiPath = props.employeeId ? `/api/v2/attendance/employees/${props.employeeId}/records` : '/api/v2/attendance/records';\n    const http = new APIService(window.appGlobal.baseUrl, apiPath);\n    const {\n      jsDateFormat,\n      userDateFormat,\n      timeFormat,\n      jsTimeFormat\n    } = useDateFormat();\n    const {\n      locale\n    } = useLocale();\n    return {\n      http,\n      locale,\n      timeFormat,\n      jsTimeFormat,\n      jsDateFormat,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      attendanceRecord: {\n        ...attendanceRecordModal\n      },\n      rules: {\n        date: [required, validDateFormat(this.userDateFormat), promiseDebounce(this.validateDate, 500)],\n        time: [required, promiseDebounce(this.validateDate, 500)],\n        note: [shouldNotExceedCharLength(250)]\n      },\n      previousRecordTimezone: null\n    };\n  },\n  computed: {\n    previousAttendanceRecordDate() {\n      if (!this.attendanceRecord?.previousRecord) return null;\n      return formatDate(parseDate(this.attendanceRecord.previousRecord.userDate), this.jsDateFormat, {\n        locale: this.locale\n      });\n    },\n    previousAttendanceRecordTime() {\n      if (!this.attendanceRecord?.previousRecord) return null;\n      return formatTime(parseTime(this.attendanceRecord.previousRecord.userTime, this.timeFormat), this.jsTimeFormat);\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    // set default timezone\n    if (this.isTimezoneEditable) {\n      const tz = guessTimezone();\n      this.attendanceRecord.timezone = {\n        id: tz.name,\n        label: tz.label,\n        _name: tz.name,\n        _offset: tz.offset\n      };\n    }\n\n    // fetch and set attendance record on initial load\n    this.setCurrentDateTime().then(() => {\n      // then set record date/time every minute\n      !this.date && !this.isEditable && setClockInterval(this.setCurrentDateTime, 60000);\n      let url = '/api/v2/attendance/records/latest';\n      if (this.employeeId) {\n        url = `/api/v2/attendance/records/latest?empNumber=${this.employeeId}`;\n      }\n      return this.attendanceRecordId ? this.http.request({\n        method: 'GET',\n        url\n      }) : null;\n    }).then(response => {\n      if (response) {\n        const {\n          data\n        } = response.data;\n        this.attendanceRecord.previousRecord = data.punchIn;\n      }\n    }).then(() => {\n      this.previousRecordTimezone = getStandardTimezone(this.attendanceRecord.previousRecord?.offset);\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      const timezone = guessTimezone();\n      this.http.request({\n        method: this.attendanceRecordId ? 'PUT' : 'POST',\n        data: {\n          date: this.attendanceRecord.date,\n          time: this.attendanceRecord.time,\n          note: this.attendanceRecord.note,\n          timezoneOffset: this.attendanceRecord.timezone?._offset ?? timezone.offset,\n          timezoneName: this.attendanceRecord.timezone?.id ?? timezone.name\n        }\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.employeeId ? navigate('/attendance/viewAttendanceRecord', undefined, {\n          employeeId: this.employeeId,\n          date: this.date\n        }) : reloadPage();\n      });\n    },\n    setCurrentDateTime() {\n      return new Promise((resolve, reject) => {\n        this.http.request({\n          method: 'GET',\n          url: '/api/v2/attendance/current-datetime'\n        }).then(res => {\n          const {\n            utcDate,\n            utcTime\n          } = res.data.data;\n          const currentDate = parseDate(`${utcDate} ${utcTime} +00:00`, 'yyyy-MM-dd HH:mm xxx');\n          this.attendanceRecord.date = this.date ?? formatDate(currentDate, 'yyyy-MM-dd');\n          this.attendanceRecord.time = formatDate(currentDate, 'HH:mm');\n          resolve();\n        }).catch(error => reject(error));\n      });\n    },\n    validateDate() {\n      if (!this.attendanceRecord.date || !this.attendanceRecord.time) {\n        return true;\n      }\n      if (parseDate(this.attendanceRecord.date) === null) {\n        return true;\n      }\n      const tzOffset = new Date().getTimezoneOffset() / 60 * -1;\n      return new Promise(resolve => {\n        this.http.request({\n          method: 'GET',\n          url: `/api/v2/attendance/${this.attendanceRecordId ? 'punch-out' : 'punch-in'}/overlaps`,\n          params: {\n            date: this.attendanceRecord.date,\n            time: this.attendanceRecord.time,\n            timezoneOffset: this.attendanceRecord.timezone?._offset ?? tzOffset,\n            empNumber: this.employeeId\n          },\n          // Prevent triggering response interceptor on 400\n          validateStatus: status => {\n            return status >= 200 && status < 300 || status == 400;\n          }\n        }).then(res => {\n          const {\n            data,\n            error\n          } = res.data;\n          if (error) {\n            return resolve(error.message);\n          }\n          return data.valid === true ? resolve(true) : resolve(this.$t('attendance.overlapping_records_found'));\n        });\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["required","validDateFormat","shouldNotExceedCharLength","parseTime","parseDate","formatTime","formatDate","guessTimezone","setClockInterval","getStandardTimezone","promiseDebounce","useLocale","APIService","useDateFormat","reloadPage","navigate","TimezoneDropdown","attendanceRecordModal","date","time","note","timezone","previousRecord","name","components","props","isEditable","type","Boolean","default","isTimezoneEditable","attendanceRecordId","Number","employeeId","String","setup","apiPath","http","window","appGlobal","baseUrl","jsDateFormat","userDateFormat","timeFormat","jsTimeFormat","locale","data","isLoading","attendanceRecord","rules","validateDate","previousRecordTimezone","computed","previousAttendanceRecordDate","userDate","previousAttendanceRecordTime","userTime","beforeMount","tz","id","label","_name","_offset","offset","setCurrentDateTime","then","url","request","method","response","punchIn","finally","methods","onSave","timezoneOffset","timezoneName","$toast","saveSuccess","undefined","Promise","resolve","reject","res","utcDate","utcTime","currentDate","catch","error","tzOffset","Date","getTimezoneOffset","params","empNumber","validateStatus","status","message","valid","$t"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAttendancePlugin\\components\\RecordAttendance.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n    <oxd-form-row>\n      <oxd-grid :cols=\"4\" class=\"orangehrm-full-width-grid\">\n        <template v-if=\"attendanceRecord.previousRecord\">\n          <oxd-grid-item\n            :class=\"\n              !attendanceRecord.previousRecord.note ? '--span-column-2' : ''\n            \"\n          >\n            <oxd-input-group :label=\"$t('attendance.punched_in_time')\">\n              <oxd-text type=\"subtitle-2\">\n                {{ previousAttendanceRecordDate }} -\n                {{ previousAttendanceRecordTime }}\n                <oxd-text\n                  tag=\"span\"\n                  class=\"orangehrm-attendance-punchedIn-timezone\"\n                >\n                  {{ `(GMT ${previousRecordTimezone})` }}\n                </oxd-text>\n              </oxd-text>\n            </oxd-input-group>\n          </oxd-grid-item>\n\n          <oxd-grid-item v-if=\"attendanceRecord.previousRecord.note\">\n            <oxd-input-group :label=\"$t('attendance.punched_in_note')\">\n              <oxd-text type=\"subtitle-2\">\n                {{ attendanceRecord.previousRecord.note }}\n              </oxd-text>\n            </oxd-input-group>\n          </oxd-grid-item>\n        </template>\n\n        <!-- Date Selector -->\n        <oxd-grid-item class=\"--offset-row-2\">\n          <date-input\n            :key=\"attendanceRecord.time\"\n            v-model=\"attendanceRecord.date\"\n            :label=\"$t('general.date')\"\n            :rules=\"rules.date\"\n            :disabled=\"!isEditable\"\n            required\n          />\n        </oxd-grid-item>\n\n        <!-- Time  Selector -->\n        <oxd-grid-item class=\"--offset-row-2\">\n          <oxd-input-field\n            v-model=\"attendanceRecord.time\"\n            :label=\"$t('general.time')\"\n            :disabled=\"!isEditable\"\n            :rules=\"rules.time\"\n            type=\"time\"\n            :placeholder=\"$t('attendance.hh_mm')\"\n            required\n          />\n        </oxd-grid-item>\n      </oxd-grid>\n    </oxd-form-row>\n\n    <!-- select timezone -->\n\n    <oxd-grid v-if=\"isTimezoneEditable\" :cols=\"2\">\n      <oxd-grid-item>\n        <timezone-dropdown v-model=\"attendanceRecord.timezone\" required />\n      </oxd-grid-item>\n    </oxd-grid>\n\n    <!-- Note input -->\n    <oxd-form-row>\n      <oxd-grid :cols=\"4\" class=\"orangehrm-full-width-grid\">\n        <oxd-grid-item class=\"--span-column-2\">\n          <oxd-input-field\n            v-model=\"attendanceRecord.note\"\n            :rules=\"rules.note\"\n            :label=\"$t('general.note')\"\n            :placeholder=\"$t('general.type_here')\"\n            type=\"textarea\"\n          />\n        </oxd-grid-item>\n      </oxd-grid>\n    </oxd-form-row>\n    <oxd-divider />\n    <oxd-form-actions>\n      <required-text />\n      <submit-button\n        :label=\"\n          !attendanceRecordId ? $t('attendance.in') : $t('attendance.out')\n        \"\n      />\n    </oxd-form-actions>\n  </oxd-form>\n</template>\n\n<script>\nimport {\n  required,\n  validDateFormat,\n  shouldNotExceedCharLength,\n} from '@/core/util/validation/rules';\nimport {\n  parseTime,\n  parseDate,\n  formatTime,\n  formatDate,\n  guessTimezone,\n  setClockInterval,\n  getStandardTimezone,\n} from '@/core/util/helper/datefns';\nimport {promiseDebounce} from '@ohrm/oxd';\nimport useLocale from '@/core/util/composable/useLocale';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport {reloadPage, navigate} from '@/core/util/helper/navigation';\nimport TimezoneDropdown from '@/orangehrmAttendancePlugin/components/TimezoneDropdown.vue';\n\nconst attendanceRecordModal = {\n  date: null,\n  time: null,\n  note: null,\n  timezone: null,\n  previousRecord: null,\n};\n\nexport default {\n  name: 'RecordAttendance',\n  components: {\n    'timezone-dropdown': TimezoneDropdown,\n  },\n  props: {\n    isEditable: {\n      type: Boolean,\n      default: false,\n    },\n    isTimezoneEditable: {\n      type: Boolean,\n      default: false,\n    },\n    attendanceRecordId: {\n      type: Number,\n      default: null,\n    },\n    employeeId: {\n      type: Number,\n      default: null,\n    },\n    date: {\n      type: String,\n      default: null,\n    },\n  },\n  setup(props) {\n    const apiPath = props.employeeId\n      ? `/api/v2/attendance/employees/${props.employeeId}/records`\n      : '/api/v2/attendance/records';\n    const http = new APIService(window.appGlobal.baseUrl, apiPath);\n    const {jsDateFormat, userDateFormat, timeFormat, jsTimeFormat} =\n      useDateFormat();\n    const {locale} = useLocale();\n    return {\n      http,\n      locale,\n      timeFormat,\n      jsTimeFormat,\n      jsDateFormat,\n      userDateFormat,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      attendanceRecord: {...attendanceRecordModal},\n      rules: {\n        date: [\n          required,\n          validDateFormat(this.userDateFormat),\n          promiseDebounce(this.validateDate, 500),\n        ],\n        time: [required, promiseDebounce(this.validateDate, 500)],\n        note: [shouldNotExceedCharLength(250)],\n      },\n      previousRecordTimezone: null,\n    };\n  },\n  computed: {\n    previousAttendanceRecordDate() {\n      if (!this.attendanceRecord?.previousRecord) return null;\n      return formatDate(\n        parseDate(this.attendanceRecord.previousRecord.userDate),\n        this.jsDateFormat,\n        {locale: this.locale},\n      );\n    },\n    previousAttendanceRecordTime() {\n      if (!this.attendanceRecord?.previousRecord) return null;\n      return formatTime(\n        parseTime(\n          this.attendanceRecord.previousRecord.userTime,\n          this.timeFormat,\n        ),\n        this.jsTimeFormat,\n      );\n    },\n  },\n  beforeMount() {\n    this.isLoading = true;\n    // set default timezone\n    if (this.isTimezoneEditable) {\n      const tz = guessTimezone();\n      this.attendanceRecord.timezone = {\n        id: tz.name,\n        label: tz.label,\n        _name: tz.name,\n        _offset: tz.offset,\n      };\n    }\n\n    // fetch and set attendance record on initial load\n    this.setCurrentDateTime()\n      .then(() => {\n        // then set record date/time every minute\n        !this.date &&\n          !this.isEditable &&\n          setClockInterval(this.setCurrentDateTime, 60000);\n        let url = '/api/v2/attendance/records/latest';\n        if (this.employeeId) {\n          url = `/api/v2/attendance/records/latest?empNumber=${this.employeeId}`;\n        }\n        return this.attendanceRecordId\n          ? this.http.request({method: 'GET', url})\n          : null;\n      })\n\n      .then((response) => {\n        if (response) {\n          const {data} = response.data;\n          this.attendanceRecord.previousRecord = data.punchIn;\n        }\n      })\n      .then(() => {\n        this.previousRecordTimezone = getStandardTimezone(\n          this.attendanceRecord.previousRecord?.offset,\n        );\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n\n      const timezone = guessTimezone();\n\n      this.http\n        .request({\n          method: this.attendanceRecordId ? 'PUT' : 'POST',\n          data: {\n            date: this.attendanceRecord.date,\n            time: this.attendanceRecord.time,\n            note: this.attendanceRecord.note,\n            timezoneOffset:\n              this.attendanceRecord.timezone?._offset ?? timezone.offset,\n            timezoneName: this.attendanceRecord.timezone?.id ?? timezone.name,\n          },\n        })\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          this.employeeId\n            ? navigate('/attendance/viewAttendanceRecord', undefined, {\n                employeeId: this.employeeId,\n                date: this.date,\n              })\n            : reloadPage();\n        });\n    },\n    setCurrentDateTime() {\n      return new Promise((resolve, reject) => {\n        this.http\n          .request({method: 'GET', url: '/api/v2/attendance/current-datetime'})\n          .then((res) => {\n            const {utcDate, utcTime} = res.data.data;\n            const currentDate = parseDate(\n              `${utcDate} ${utcTime} +00:00`,\n              'yyyy-MM-dd HH:mm xxx',\n            );\n            this.attendanceRecord.date =\n              this.date ?? formatDate(currentDate, 'yyyy-MM-dd');\n            this.attendanceRecord.time = formatDate(currentDate, 'HH:mm');\n            resolve();\n          })\n          .catch((error) => reject(error));\n      });\n    },\n    validateDate() {\n      if (!this.attendanceRecord.date || !this.attendanceRecord.time) {\n        return true;\n      }\n      if (parseDate(this.attendanceRecord.date) === null) {\n        return true;\n      }\n      const tzOffset = (new Date().getTimezoneOffset() / 60) * -1;\n      return new Promise((resolve) => {\n        this.http\n          .request({\n            method: 'GET',\n            url: `/api/v2/attendance/${\n              this.attendanceRecordId ? 'punch-out' : 'punch-in'\n            }/overlaps`,\n            params: {\n              date: this.attendanceRecord.date,\n              time: this.attendanceRecord.time,\n              timezoneOffset:\n                this.attendanceRecord.timezone?._offset ?? tzOffset,\n              empNumber: this.employeeId,\n            },\n            // Prevent triggering response interceptor on 400\n            validateStatus: (status) => {\n              return (status >= 200 && status < 300) || status == 400;\n            },\n          })\n          .then((res) => {\n            const {data, error} = res.data;\n            if (error) {\n              return resolve(error.message);\n            }\n            return data.valid === true\n              ? resolve(true)\n              : resolve(this.$t('attendance.overlapping_records_found'));\n          });\n      });\n    },\n  },\n};\n</script>\n\n<style src=\"./record-attendance.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}