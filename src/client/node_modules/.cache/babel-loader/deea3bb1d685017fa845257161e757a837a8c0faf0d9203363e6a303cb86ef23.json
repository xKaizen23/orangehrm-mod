{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nconst formatExtraData = data => {\n  return typeof data === 'string' ? data.split(',').map((item, i) => {\n    return {\n      id: i,\n      label: item\n    };\n  }).filter(item => item.label.trim() != '') : [];\n};\nexport default {\n  name: 'ProfileCustomFields',\n  props: {\n    employeeId: {\n      type: String,\n      required: true\n    },\n    screen: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/pim/employees/${props.employeeId}/custom-fields?screen=${props.screen}`);\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      fields: [],\n      customFieldsModel: {},\n      rules: {\n        default: [shouldNotExceedCharLength(250)]\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.getAll().then(response => {\n      const {\n        data,\n        meta\n      } = response.data;\n      this.customFieldsModel = {\n        ...data\n      };\n      if (meta.fields && meta.fields.length > 0) {\n        this.fields = meta.fields.map(field => {\n          const extraData = formatExtraData(field.extraData);\n          const model = `custom${field.id}`;\n          if (field.fieldType == 1 && data[model]) {\n            const selected = extraData.find(i => i.label == data[model]);\n            this.customFieldsModel[model] = selected || null;\n          }\n          return {\n            id: field.id,\n            label: field.fieldName,\n            type: field.fieldType == 1 ? 'select' : 'input',\n            model,\n            extraData\n          };\n        });\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'PUT',\n        url: `/api/v2/pim/employees/${this.employeeId}/custom-fields`,\n        data: {\n          ...this.customFieldsModel\n        },\n        transformRequest: [data => {\n          for (const key in data) {\n            if (data[key]?.label) data[key] = data[key].label;\n          }\n          return JSON.stringify(data);\n        }]\n      }).then(() => {\n        this.isLoading = false;\n        this.$toast.saveSuccess();\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["APIService","shouldNotExceedCharLength","formatExtraData","data","split","map","item","i","id","label","filter","trim","name","props","employeeId","type","String","required","screen","setup","http","window","appGlobal","baseUrl","isLoading","fields","customFieldsModel","rules","default","beforeMount","getAll","then","response","meta","length","field","extraData","model","fieldType","selected","find","fieldName","finally","methods","onSave","request","method","url","transformRequest","key","JSON","stringify","$toast","saveSuccess"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\ProfileCustomFields.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div v-if=\"fields.length !== 0\" class=\"orangehrm-custom-fields\">\n    <oxd-divider />\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">{{\n        $t('pim.custom_fields')\n      }}</oxd-text>\n      <oxd-divider />\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item v-for=\"field in fields\" :key=\"field.id\">\n              <oxd-input-field\n                v-model=\"customFieldsModel[field.model]\"\n                :type=\"field.type\"\n                :label=\"field.label\"\n                :options=\"field.extraData\"\n                :rules=\"rules.default\"\n                :disabled=\"!$can.update(`${screen}_custom_fields`)\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n        <template v-if=\"$can.update(`${screen}_custom_fields`)\">\n          <oxd-divider />\n          <oxd-form-actions>\n            <submit-button />\n          </oxd-form-actions>\n        </template>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {APIService} from '@/core/util/services/api.service';\nimport {shouldNotExceedCharLength} from '@ohrm/core/util/validation/rules';\n\nconst formatExtraData = (data) => {\n  return typeof data === 'string'\n    ? data\n        .split(',')\n        .map((item, i) => {\n          return {id: i, label: item};\n        })\n        .filter((item) => item.label.trim() != '')\n    : [];\n};\n\nexport default {\n  name: 'ProfileCustomFields',\n  props: {\n    employeeId: {\n      type: String,\n      required: true,\n    },\n    screen: {\n      type: String,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/pim/employees/${props.employeeId}/custom-fields?screen=${props.screen}`,\n    );\n\n    return {\n      http,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      fields: [],\n      customFieldsModel: {},\n      rules: {\n        default: [shouldNotExceedCharLength(250)],\n      },\n    };\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .getAll()\n      .then((response) => {\n        const {data, meta} = response.data;\n        this.customFieldsModel = {...data};\n        if (meta.fields && meta.fields.length > 0) {\n          this.fields = meta.fields.map((field) => {\n            const extraData = formatExtraData(field.extraData);\n            const model = `custom${field.id}`;\n            if (field.fieldType == 1 && data[model]) {\n              const selected = extraData.find((i) => i.label == data[model]);\n              this.customFieldsModel[model] = selected || null;\n            }\n            return {\n              id: field.id,\n              label: field.fieldName,\n              type: field.fieldType == 1 ? 'select' : 'input',\n              model,\n              extraData,\n            };\n          });\n        }\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .request({\n          method: 'PUT',\n          url: `/api/v2/pim/employees/${this.employeeId}/custom-fields`,\n          data: {...this.customFieldsModel},\n          transformRequest: [\n            (data) => {\n              for (const key in data) {\n                if (data[key]?.label) data[key] = data[key].label;\n              }\n              return JSON.stringify(data);\n            },\n          ],\n        })\n        .then(() => {\n          this.isLoading = false;\n          this.$toast.saveSuccess();\n        });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}