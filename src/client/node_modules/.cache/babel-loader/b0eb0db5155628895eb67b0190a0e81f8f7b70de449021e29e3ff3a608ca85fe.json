{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-1e0133f0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0,\n  class: \"deleted-tag\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  return _openBlock(), _createBlock(_component_oxd_input_field, {\n    type: \"select\",\n    label: _ctx.$t('leave.leave_type'),\n    options: $setup.options,\n    \"show-empty-selector\": $props.showEmptySelector\n  }, {\n    option: _withCtx(({\n      data\n    }) => [_createElementVNode(\"span\", null, _toDisplayString(data.label), 1), data.isDeleted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, _toDisplayString(_ctx.$t('general.deleted')), 1)) : _createCommentVNode(\"\", true)]),\n    _: 1\n  }, 8, [\"label\", \"options\", \"show-empty-selector\"]);\n}","map":{"version":3,"mappings":";;;;EA4BiCA,KAAK,EAAC;;;;uBARrCC,aAYkBC;IAXhBC,IAAI,EAAC,QAAQ;IACZC,KAAK,EAAEC,OAAE;IACTC,OAAO,EAAEC,cAAO;IAChB,qBAAmB,EAAEC;;IAEXC,MAAM,WACf,CAA6B;MADXC;IAAI,OACtBC,oBAA6B,+BAApBD,IAAI,CAACN,KAAK,OACRM,IAAI,CAACE,SAAS,kBAAzBC,oBAEM,OAFNC,UAEM,mBADDT,OAAE","names":["class","_createBlock","_component_oxd_input_field","type","label","_ctx","options","$setup","$props","option","data","_createElementVNode","isDeleted","_createElementBlock","_hoisted_1"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmLeavePlugin\\components\\LeaveTypeDropdown.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-input-field\n    type=\"select\"\n    :label=\"$t('leave.leave_type')\"\n    :options=\"options\"\n    :show-empty-selector=\"showEmptySelector\"\n  >\n    <template #option=\"{data}\">\n      <span>{{ data.label }}</span>\n      <div v-if=\"data.isDeleted\" class=\"deleted-tag\">\n        {{ $t('general.deleted') }}\n      </div>\n    </template>\n  </oxd-input-field>\n</template>\n\n<script>\nimport {ref, watchEffect} from 'vue';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nexport default {\n  name: 'LeaveTypeDropdown',\n  props: {\n    eligibleOnly: {\n      type: Boolean,\n      default: true,\n    },\n    employeeId: {\n      type: Number,\n      required: false,\n      default: null,\n    },\n    showEmptySelector: {\n      type: Boolean,\n      default: true,\n    },\n    includeAllocated: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props, context) {\n    const options = ref([]);\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/leave/leave-types${props.eligibleOnly ? '/eligible' : ''}`,\n    );\n\n    watchEffect(async () => {\n      if (!props.eligibleOnly && props.includeAllocated) {\n        // eslint-disable-next-line no-console\n        console.error(\n          '`includeAllocated` prop can true only if `eligibleOnly` prop true',\n        );\n      }\n      http\n        .getAll({\n          empNumber: props.employeeId,\n          includeAllocated:\n            props.eligibleOnly && props.includeAllocated ? true : undefined,\n          ...(props.eligibleOnly === false && {limit: 0}),\n        })\n        .then(({data}) => {\n          options.value = data.data.map((item) => {\n            return {\n              id: item.id,\n              label: item.name,\n              isDeleted: item.deleted,\n            };\n          });\n          if (!props.showEmptySelector && options.value.length > 0) {\n            // this $event is only fired to default select first option\n            // where --select-- options is not shown\n            // eslint-disable-next-line vue/require-explicit-emits\n            context.emit('update:modelValue', options.value[0]);\n          }\n        });\n    });\n\n    return {\n      options,\n    };\n  },\n};\n</script>\n\n<style scoped>\n.deleted-tag {\n  margin-left: auto;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}