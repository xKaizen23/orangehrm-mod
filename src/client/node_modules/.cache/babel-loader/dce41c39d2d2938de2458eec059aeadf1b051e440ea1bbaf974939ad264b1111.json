{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"orangehrm-horizontal-padding orangehrm-vertical-padding\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_text = _resolveComponent(\"oxd-text\");\n  const _component_oxd_divider = _resolveComponent(\"oxd-divider\");\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  const _component_oxd_grid_item = _resolveComponent(\"oxd-grid-item\");\n  const _component_date_input = _resolveComponent(\"date-input\");\n  const _component_oxd_grid = _resolveComponent(\"oxd-grid\");\n  const _component_oxd_form_row = _resolveComponent(\"oxd-form-row\");\n  const _component_required_text = _resolveComponent(\"required-text\");\n  const _component_oxd_button = _resolveComponent(\"oxd-button\");\n  const _component_submit_button = _resolveComponent(\"submit-button\");\n  const _component_oxd_form_actions = _resolveComponent(\"oxd-form-actions\");\n  const _component_oxd_form = _resolveComponent(\"oxd-form\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_oxd_text, {\n    tag: \"h6\",\n    class: \"orangehrm-main-title\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t('general.edit_membership')), 1)]),\n    _: 1\n  }), _createVNode(_component_oxd_divider), _createVNode(_component_oxd_form, {\n    loading: $data.isLoading,\n    onSubmitValid: $options.onSave\n  }, {\n    default: _withCtx(() => [_createVNode(_component_oxd_form_row, null, {\n      default: _withCtx(() => [_createVNode(_component_oxd_grid, {\n        cols: 3,\n        class: \"orangehrm-full-width-grid\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.membership.membership,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.membership.membership = $event),\n            type: \"select\",\n            label: _ctx.$t('pim.membership'),\n            options: $props.memberships,\n            rules: $data.rules.membership,\n            required: \"\"\n          }, null, 8, [\"modelValue\", \"label\", \"options\", \"rules\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.membership.subscriptionPaidBy,\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.membership.subscriptionPaidBy = $event),\n            type: \"select\",\n            label: _ctx.$t('pim.subscription_paid_by'),\n            options: $props.paidBy\n          }, null, 8, [\"modelValue\", \"label\", \"options\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.membership.subscriptionFee,\n            \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.membership.subscriptionFee = $event),\n            label: _ctx.$t('pim.subscription_amount'),\n            rules: $data.rules.subscriptionFee\n          }, null, 8, [\"modelValue\", \"label\", \"rules\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.membership.currencyType,\n            \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.membership.currencyType = $event),\n            type: \"select\",\n            label: _ctx.$t('general.currency'),\n            options: $props.currencies\n          }, null, 8, [\"modelValue\", \"label\", \"options\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_date_input, {\n            modelValue: $data.membership.subscriptionCommenceDate,\n            \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.membership.subscriptionCommenceDate = $event),\n            label: _ctx.$t('pim.subscription_commence_date'),\n            rules: $data.rules.subscriptionCommenceDate\n          }, null, 8, [\"modelValue\", \"label\", \"rules\"])]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, null, {\n          default: _withCtx(() => [_createVNode(_component_date_input, {\n            modelValue: $data.membership.subscriptionRenewalDate,\n            \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.membership.subscriptionRenewalDate = $event),\n            label: _ctx.$t('pim.subscription_renewal_date'),\n            years: $data.yearArray,\n            rules: $data.rules.subscriptionRenewalDate\n          }, null, 8, [\"modelValue\", \"label\", \"years\", \"rules\"])]),\n          _: 1\n        })]),\n        _: 1\n      })]),\n      _: 1\n    }), _createVNode(_component_oxd_form_actions, null, {\n      default: _withCtx(() => [_createVNode(_component_required_text), _createVNode(_component_oxd_button, {\n        type: \"button\",\n        \"display-type\": \"ghost\",\n        label: _ctx.$t('general.cancel'),\n        onClick: $options.onCancel\n      }, null, 8, [\"label\", \"onClick\"]), _createVNode(_component_submit_button)]),\n      _: 1\n    })]),\n    _: 1\n  }, 8, [\"loading\", \"onSubmitValid\"])]), _createVNode(_component_oxd_divider)], 64);\n}","map":{"version":3,"mappings":";;EAoBOA,KAAK,EAAC;AAAyD;;;;;;;;;;;;;;6DAApEC,oBAsEM,OAtENC,UAsEM,GArEJC,aAEWC;IAFDC,GAAG,EAAC,IAAI;IAACL,KAAK,EAAC;;sBACvB,MAAmC,mCAAhCM,OAAE;;MAEPH,aAAeI,yBACfJ,aAgEWK;IAhEAC,OAAO,EAAEC,eAAS;IAAGC,aAAY,EAAEC;;sBAC5C,MAmDe,CAnDfT,aAmDeU;wBAlDb,MAiDW,CAjDXV,aAiDWW;QAjDAC,IAAI,EAAE,CAAC;QAAEf,KAAK,EAAC;;0BACxB,MASgB,CAThBG,aASgBa;4BARd,MAOE,CAPFb,aAOEc;wBANSP,gBAAU,CAACQ,UAAU;uEAArBR,gBAAU,CAACQ,UAAU;YAC9BC,IAAI,EAAC,QAAQ;YACZC,KAAK,EAAEd,OAAE;YACTe,OAAO,EAAEC,kBAAW;YACpBC,KAAK,EAAEb,WAAK,CAACQ,UAAU;YACxBM,QAAQ,EAAR;;;YAGJrB,aAOgBa;4BANd,MAKE,CALFb,aAKEc;wBAJSP,gBAAU,CAACe,kBAAkB;uEAA7Bf,gBAAU,CAACe,kBAAkB;YACtCN,IAAI,EAAC,QAAQ;YACZC,KAAK,EAAEd,OAAE;YACTe,OAAO,EAAEC;;;YAGdnB,aAMgBa;4BALd,MAIE,CAJFb,aAIEc;wBAHSP,gBAAU,CAACgB,eAAe;uEAA1BhB,gBAAU,CAACgB,eAAe;YAClCN,KAAK,EAAEd,OAAE;YACTiB,KAAK,EAAEb,WAAK,CAACgB;;;YAGlBvB,aAOgBa;4BANd,MAKE,CALFb,aAKEc;wBAJSP,gBAAU,CAACiB,YAAY;uEAAvBjB,gBAAU,CAACiB,YAAY;YAChCR,IAAI,EAAC,QAAQ;YACZC,KAAK,EAAEd,OAAE;YACTe,OAAO,EAAEC;;;YAGdnB,aAMgBa;4BALd,MAIE,CAJFb,aAIEyB;wBAHSlB,gBAAU,CAACmB,wBAAwB;uEAAnCnB,gBAAU,CAACmB,wBAAwB;YAC3CT,KAAK,EAAEd,OAAE;YACTiB,KAAK,EAAEb,WAAK,CAACmB;;;YAGlB1B,aAOgBa;4BANd,MAKE,CALFb,aAKEyB;wBAJSlB,gBAAU,CAACoB,uBAAuB;uEAAlCpB,gBAAU,CAACoB,uBAAuB;YAC1CV,KAAK,EAAEd,OAAE;YACTyB,KAAK,EAAErB,eAAS;YAChBa,KAAK,EAAEb,WAAK,CAACoB;;;;;;;QAMtB3B,aASmB6B;wBARjB,MAAiB,CAAjB7B,aAAiB8B,2BACjB9B,aAKE+B;QAJAf,IAAI,EAAC,QAAQ;QACb,cAAY,EAAC,OAAO;QACnBC,KAAK,EAAEd,OAAE;QACT6B,OAAK,EAAEvB;yCAEVT,aAAiBiC;;;;yCAIvBjC,aAAeI","names":["class","_createElementVNode","_hoisted_1","_createVNode","_component_oxd_text","tag","_ctx","_component_oxd_divider","_component_oxd_form","loading","$data","onSubmitValid","$options","_component_oxd_form_row","_component_oxd_grid","cols","_component_oxd_grid_item","_component_oxd_input_field","membership","type","label","options","$props","rules","required","subscriptionPaidBy","subscriptionFee","currencyType","_component_date_input","subscriptionCommenceDate","subscriptionRenewalDate","years","_component_oxd_form_actions","_component_required_text","_component_oxd_button","onClick","_component_submit_button"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\EditMembership.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-horizontal-padding orangehrm-vertical-padding\">\n    <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n      {{ $t('general.edit_membership') }}\n    </oxd-text>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <oxd-grid :cols=\"3\" class=\"orangehrm-full-width-grid\">\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"membership.membership\"\n              type=\"select\"\n              :label=\"$t('pim.membership')\"\n              :options=\"memberships\"\n              :rules=\"rules.membership\"\n              required\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"membership.subscriptionPaidBy\"\n              type=\"select\"\n              :label=\"$t('pim.subscription_paid_by')\"\n              :options=\"paidBy\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"membership.subscriptionFee\"\n              :label=\"$t('pim.subscription_amount')\"\n              :rules=\"rules.subscriptionFee\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <oxd-input-field\n              v-model=\"membership.currencyType\"\n              type=\"select\"\n              :label=\"$t('general.currency')\"\n              :options=\"currencies\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <date-input\n              v-model=\"membership.subscriptionCommenceDate\"\n              :label=\"$t('pim.subscription_commence_date')\"\n              :rules=\"rules.subscriptionCommenceDate\"\n            />\n          </oxd-grid-item>\n          <oxd-grid-item>\n            <date-input\n              v-model=\"membership.subscriptionRenewalDate\"\n              :label=\"$t('pim.subscription_renewal_date')\"\n              :years=\"yearArray\"\n              :rules=\"rules.subscriptionRenewalDate\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </oxd-form-row>\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </div>\n  <oxd-divider />\n</template>\n\n<script>\nimport {\n  required,\n  validDateFormat,\n  endDateShouldBeAfterStartDate,\n  maxCurrency,\n  digitsOnlyWithDecimalPoint,\n} from '@ohrm/core/util/validation/rules';\nimport {yearRange} from '@ohrm/core/util/helper/year-range';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\n\nconst membershipModel = {\n  membership: [],\n  subscriptionFee: '',\n  subscriptionPaidBy: null,\n  currencyType: [],\n  subscriptionCommenceDate: '',\n  subscriptionRenewalDate: '',\n};\n\nexport default {\n  name: 'EditMembership',\n\n  props: {\n    http: {\n      type: Object,\n      required: true,\n    },\n    data: {\n      type: Object,\n      required: true,\n    },\n    currencies: {\n      type: Array,\n      default: () => [],\n    },\n    paidBy: {\n      type: Array,\n      default: () => [],\n    },\n    memberships: {\n      type: Array,\n      default: () => [],\n    },\n  },\n\n  emits: ['close'],\n\n  setup() {\n    const {userDateFormat} = useDateFormat();\n\n    return {\n      userDateFormat,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      membership: {...membershipModel},\n      yearArray: [...yearRange()],\n      rules: {\n        membership: [required],\n        subscriptionCommenceDate: [validDateFormat(this.userDateFormat)],\n        subscriptionRenewalDate: [\n          validDateFormat(this.userDateFormat),\n          endDateShouldBeAfterStartDate(\n            () => this.membership.subscriptionCommenceDate,\n            this.$t('pim.renewal_date_should_be_after_the_commencing_date'),\n          ),\n        ],\n        subscriptionFee: [digitsOnlyWithDecimalPoint, maxCurrency(1000000000)],\n      },\n    };\n  },\n\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.data.id)\n      .then((response) => {\n        const {data} = response.data;\n        this.membership.subscriptionFee = data.subscriptionFee;\n        this.membership.subscriptionCommenceDate =\n          data.subscriptionCommenceDate;\n        this.membership.subscriptionRenewalDate = data.subscriptionRenewalDate;\n        this.membership.membership = this.memberships.find(\n          (item) => item.id === data.membership.id,\n        );\n        this.membership.subscriptionPaidBy = this.paidBy.find(\n          (item) => item.id === data.subscriptionPaidBy,\n        );\n        this.membership.currencyType = this.currencies.find(\n          (item) => item.id === data.currencyType?.id,\n        );\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.data.id, {\n          subscriptionFee: this.membership.subscriptionFee,\n          subscriptionCommenceDate: this.membership.subscriptionCommenceDate,\n          subscriptionRenewalDate: this.membership.subscriptionRenewalDate,\n          membershipId: this.membership.membership.id,\n          subscriptionPaidBy: this.membership.subscriptionPaidBy?.id,\n          currencyTypeId: this.membership.currencyType?.id,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.membership = {...membershipModel};\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}