{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { OxdDialog } from '@ohrm/oxd';\nimport { required, validSelection } from '@ohrm/core/util/validation/rules';\nimport ProjectAutocomplete from '@/orangehrmTimePlugin/components/ProjectAutocomplete.vue';\nexport default {\n  name: 'CopyActivityModal',\n  components: {\n    'oxd-dialog': OxdDialog,\n    'project-autocomplete': ProjectAutocomplete\n  },\n  props: {\n    projectId: {\n      type: Number,\n      required: true\n    }\n  },\n  emits: ['close'],\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      project: null,\n      activities: null,\n      selectedActivities: [],\n      rules: {\n        project: [required, validSelection, () => {\n          if (this.activities !== null && this.activities.length === 0) {\n            return this.$t('time.no_assigned_activities');\n          } else if (Array.isArray(this.activities) && this.selectedActivities.length === 0) {\n            const hasUnique = this.activities.find(activity => activity.unique === true);\n            return hasUnique ? this.$t('time.no_activities_selected') : this.$t('general.already_exists');\n          } else {\n            return true;\n          }\n        }]\n      }\n    };\n  },\n  watch: {\n    project(value) {\n      this.activities = null;\n      this.selectedActivities = [];\n      if (value) {\n        this.isLoading = true;\n        this.http.request({\n          method: 'GET',\n          url: `/api/v2/time/projects/${this.projectId}/activities/copy/${value.id}`,\n          params: {\n            limit: 0\n          }\n        }).then(response => {\n          const {\n            data\n          } = response.data;\n          this.activities = data;\n          this.selectedActivities = Array.isArray(data) ? data.filter(activity => activity.unique === true).map(activity => activity.id) : [];\n          this.isLoading = false;\n        });\n      }\n    }\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http.request({\n        method: 'POST',\n        url: `/api/v2/time/projects/${this.projectId}/activities/copy/${this.project.id}`,\n        data: {\n          activityIds: this.selectedActivities\n        }\n      }).then(() => {\n        this.$toast.updateSuccess();\n        this.onCancel();\n      });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["APIService","OxdDialog","required","validSelection","ProjectAutocomplete","name","components","props","projectId","type","Number","emits","setup","http","window","appGlobal","baseUrl","data","isLoading","project","activities","selectedActivities","rules","length","$t","Array","isArray","hasUnique","find","activity","unique","watch","value","request","method","url","id","params","limit","then","response","filter","map","methods","onSave","activityIds","$toast","updateSuccess","onCancel","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmTimePlugin\\components\\CopyActivityModal.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-dialog class=\"orangehrm-dialog-modal\" @update:show=\"onCancel\">\n    <div class=\"orangehrm-modal-header\">\n      <oxd-text type=\"card-title\">\n        {{ $t('time.copy_activity') }}\n      </oxd-text>\n    </div>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <project-autocomplete\n          v-model=\"project\"\n          :rules=\"rules.project\"\n          :only-allowed=\"false\"\n          :label=\"$t('time.project_name')\"\n          :exclude-project-ids=\"[projectId]\"\n          required\n        />\n      </oxd-form-row>\n      <template v-if=\"activities && activities.length > 0\">\n        <oxd-divider />\n        <oxd-grid :cols=\"2\" class=\"orangehrm-activites-container\">\n          <oxd-grid-item v-for=\"activity in activities\" :key=\"activity.id\">\n            <oxd-input-field\n              v-model=\"selectedActivities\"\n              type=\"checkbox\"\n              :value=\"activity.id\"\n              :disabled=\"!activity.unique\"\n              :option-label=\"activity.name\"\n            />\n          </oxd-grid-item>\n        </oxd-grid>\n      </template>\n\n      <oxd-divider />\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </oxd-dialog>\n</template>\n\n<script>\nimport {APIService} from '@/core/util/services/api.service';\nimport {OxdDialog} from '@ohrm/oxd';\nimport {required, validSelection} from '@ohrm/core/util/validation/rules';\nimport ProjectAutocomplete from '@/orangehrmTimePlugin/components/ProjectAutocomplete.vue';\n\nexport default {\n  name: 'CopyActivityModal',\n  components: {\n    'oxd-dialog': OxdDialog,\n    'project-autocomplete': ProjectAutocomplete,\n  },\n  props: {\n    projectId: {\n      type: Number,\n      required: true,\n    },\n  },\n  emits: ['close'],\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '');\n    return {\n      http,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      project: null,\n      activities: null,\n      selectedActivities: [],\n      rules: {\n        project: [\n          required,\n          validSelection,\n          () => {\n            if (this.activities !== null && this.activities.length === 0) {\n              return this.$t('time.no_assigned_activities');\n            } else if (\n              Array.isArray(this.activities) &&\n              this.selectedActivities.length === 0\n            ) {\n              const hasUnique = this.activities.find(\n                (activity) => activity.unique === true,\n              );\n              return hasUnique\n                ? this.$t('time.no_activities_selected')\n                : this.$t('general.already_exists');\n            } else {\n              return true;\n            }\n          },\n        ],\n      },\n    };\n  },\n  watch: {\n    project(value) {\n      this.activities = null;\n      this.selectedActivities = [];\n      if (value) {\n        this.isLoading = true;\n        this.http\n          .request({\n            method: 'GET',\n            url: `/api/v2/time/projects/${this.projectId}/activities/copy/${value.id}`,\n            params: {limit: 0},\n          })\n          .then((response) => {\n            const {data} = response.data;\n            this.activities = data;\n            this.selectedActivities = Array.isArray(data)\n              ? data\n                  .filter((activity) => activity.unique === true)\n                  .map((activity) => activity.id)\n              : [];\n            this.isLoading = false;\n          });\n      }\n    },\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .request({\n          method: 'POST',\n          url: `/api/v2/time/projects/${this.projectId}/activities/copy/${this.project.id}`,\n          data: {\n            activityIds: this.selectedActivities,\n          },\n        })\n        .then(() => {\n          this.$toast.updateSuccess();\n          this.onCancel();\n        });\n    },\n    onCancel() {\n      this.$emit('close', true);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.orangehrm-activites-container {\n  max-height: 180px;\n  overflow-y: auto;\n  @include oxd-scrollbar();\n}\n::v-deep(.oxd-checkbox-wrapper) {\n  word-break: break-word;\n  .oxd-checkbox-input {\n    flex-shrink: 0;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}