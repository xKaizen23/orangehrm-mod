{"ast":null,"code":"import { navigate } from '@ohrm/core/util/helper/navigation';\nimport { APIService } from '@/core/util/services/api.service';\nimport { required, shouldNotExceedCharLength } from '@ohrm/core/util/validation/rules';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\nconst initialAuthProvider = {\n  name: '',\n  url: '',\n  clientId: '',\n  clientSecret: ''\n};\nexport default {\n  name: 'AddProvider',\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/auth/openid-providers');\n    const {\n      createUniqueValidator\n    } = useServerValidation(http);\n    const providerNameUniqueValidation = createUniqueValidator('OpenIdProvider', 'providerName', {\n      matchByField: 'status',\n      matchByValue: 1\n    });\n    return {\n      http,\n      providerNameUniqueValidation\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      authProvider: {\n        ...initialAuthProvider\n      },\n      rules: {\n        name: [required, this.providerNameUniqueValidation, shouldNotExceedCharLength(40)],\n        clientId: [required, shouldNotExceedCharLength(255)],\n        clientSecret: [required, shouldNotExceedCharLength(255)],\n        url: [required, shouldNotExceedCharLength(2000)]\n      }\n    };\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/openIdProvider');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.create({\n        ...this.authProvider,\n        name: this.authProvider.name.trim()\n      }).then(() => {\n        return this.$toast.saveSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAkFA,SAAQA,QAAQ,QAAO,mCAAmC;AAC1D,SAAQC,UAAU,QAAO,kCAAkC;AAC3D,SACEC,QAAQ,EACRC,yBAAyB,QACpB,kCAAkC;AACzC,OAAOC,mBAAkB,MAAO,4CAA4C;AAE5E,MAAMC,mBAAkB,GAAI;EAC1BC,IAAI,EAAE,EAAE;EACRC,GAAG,EAAE,EAAE;EACPC,QAAQ,EAAE,EAAE;EACZC,YAAY,EAAE;AAChB,CAAC;AAED,eAAe;EACbH,IAAI,EAAE,aAAa;EAEnBI,KAAK,GAAG;IACN,MAAMC,IAAG,GAAI,IAAIV,UAAU,CACzBW,MAAM,CAACC,SAAS,CAACC,OAAO,EACxB,+BAA+B,CAChC;IACD,MAAM;MAACC;IAAqB,IAAIX,mBAAmB,CAACO,IAAI,CAAC;IACzD,MAAMK,4BAA2B,GAAID,qBAAqB,CACxD,gBAAgB,EAChB,cAAc,EACd;MACEE,YAAY,EAAE,QAAQ;MACtBC,YAAY,EAAE;IAChB,CAAC,CACF;IACD,OAAO;MACLP,IAAI;MACJK;IACF,CAAC;EACH,CAAC;EACDG,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,YAAY,EAAE;QAAC,GAAGhB;MAAmB,CAAC;MACtCiB,KAAK,EAAE;QACLhB,IAAI,EAAE,CACJJ,QAAQ,EACR,IAAI,CAACc,4BAA4B,EACjCb,yBAAyB,CAAC,EAAE,CAAC,CAC9B;QACDK,QAAQ,EAAE,CAACN,QAAQ,EAAEC,yBAAyB,CAAC,GAAG,CAAC,CAAC;QACpDM,YAAY,EAAE,CAACP,QAAQ,EAAEC,yBAAyB,CAAC,GAAG,CAAC,CAAC;QACxDI,GAAG,EAAE,CAACL,QAAQ,EAAEC,yBAAyB,CAAC,IAAI,CAAC;MACjD;IACF,CAAC;EACH,CAAC;EACDoB,OAAO,EAAE;IACPC,QAAQ,GAAG;MACTxB,QAAQ,CAAC,uBAAuB,CAAC;IACnC,CAAC;IACDyB,MAAM,GAAG;MACP,IAAI,CAACL,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACT,IAAG,CACLe,MAAM,CAAC;QACN,GAAG,IAAI,CAACL,YAAY;QACpBf,IAAI,EAAE,IAAI,CAACe,YAAY,CAACf,IAAI,CAACqB,IAAI;MACnC,CAAC,EACAC,IAAI,CAAC,MAAM;QACV,OAAO,IAAI,CAACC,MAAM,CAACC,WAAW,EAAE;MAClC,CAAC,EACAF,IAAI,CAAC,MAAM;QACV,IAAI,CAACJ,QAAQ,EAAE;MACjB,CAAC,CAAC;IACN;EACF;AACF,CAAC","names":["navigate","APIService","required","shouldNotExceedCharLength","useServerValidation","initialAuthProvider","name","url","clientId","clientSecret","setup","http","window","appGlobal","baseUrl","createUniqueValidator","providerNameUniqueValidation","matchByField","matchByValue","data","isLoading","authProvider","rules","methods","onCancel","onSave","create","trim","then","$toast","saveSuccess"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\pages\\socialMediaAuth\\AddProvider.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">\n        {{ $t('admin.add_provider') }}\n      </oxd-text>\n      <oxd-divider />\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"authProvider.name\"\n                :rules=\"rules.name\"\n                :label=\"$t('general.name')\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"authProvider.url\"\n                :rules=\"rules.url\"\n                :label=\"$t('admin.url')\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"authProvider.clientId\"\n                :rules=\"rules.clientId\"\n                :label=\"$t('admin.client_id')\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"authProvider.clientSecret\"\n                :rules=\"rules.clientSecret\"\n                :label=\"$t('admin.client_secret')\"\n                type=\"password\"\n                required\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            type=\"button\"\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport {APIService} from '@/core/util/services/api.service';\nimport {\n  required,\n  shouldNotExceedCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport useServerValidation from '@/core/util/composable/useServerValidation';\n\nconst initialAuthProvider = {\n  name: '',\n  url: '',\n  clientId: '',\n  clientSecret: '',\n};\n\nexport default {\n  name: 'AddProvider',\n\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/auth/openid-providers',\n    );\n    const {createUniqueValidator} = useServerValidation(http);\n    const providerNameUniqueValidation = createUniqueValidator(\n      'OpenIdProvider',\n      'providerName',\n      {\n        matchByField: 'status',\n        matchByValue: 1,\n      },\n    );\n    return {\n      http,\n      providerNameUniqueValidation,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      authProvider: {...initialAuthProvider},\n      rules: {\n        name: [\n          required,\n          this.providerNameUniqueValidation,\n          shouldNotExceedCharLength(40),\n        ],\n        clientId: [required, shouldNotExceedCharLength(255)],\n        clientSecret: [required, shouldNotExceedCharLength(255)],\n        url: [required, shouldNotExceedCharLength(2000)],\n      },\n    };\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/openIdProvider');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .create({\n          ...this.authProvider,\n          name: this.authProvider.name.trim(),\n        })\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}