{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_oxd_text = _resolveComponent(\"oxd-text\");\n  const _component_oxd_input_group = _resolveComponent(\"oxd-input-group\");\n  const _component_oxd_grid_item = _resolveComponent(\"oxd-grid-item\");\n  const _component_date_input = _resolveComponent(\"date-input\");\n  const _component_oxd_input_field = _resolveComponent(\"oxd-input-field\");\n  const _component_oxd_grid = _resolveComponent(\"oxd-grid\");\n  const _component_oxd_form_row = _resolveComponent(\"oxd-form-row\");\n  const _component_timezone_dropdown = _resolveComponent(\"timezone-dropdown\");\n  const _component_oxd_divider = _resolveComponent(\"oxd-divider\");\n  const _component_required_text = _resolveComponent(\"required-text\");\n  const _component_submit_button = _resolveComponent(\"submit-button\");\n  const _component_oxd_form_actions = _resolveComponent(\"oxd-form-actions\");\n  const _component_oxd_form = _resolveComponent(\"oxd-form\");\n  return _openBlock(), _createBlock(_component_oxd_form, {\n    loading: $data.isLoading,\n    onSubmitValid: $options.onSave\n  }, {\n    default: _withCtx(() => [_createVNode(_component_oxd_form_row, null, {\n      default: _withCtx(() => [_createVNode(_component_oxd_grid, {\n        cols: 4,\n        class: \"orangehrm-full-width-grid\"\n      }, {\n        default: _withCtx(() => [$data.attendanceRecord.previousRecord ? (_openBlock(), _createElementBlock(_Fragment, {\n          key: 0\n        }, [_createVNode(_component_oxd_grid_item, {\n          class: _normalizeClass(!$data.attendanceRecord.previousRecord.note ? '--span-column-2' : '')\n        }, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_group, {\n            label: _ctx.$t('attendance.punched_in_time')\n          }, {\n            default: _withCtx(() => [_createVNode(_component_oxd_text, {\n              type: \"subtitle-2\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString($options.previousAttendanceRecordDate) + \" - \" + _toDisplayString($options.previousAttendanceRecordTime) + \" \", 1), _createVNode(_component_oxd_text, {\n                tag: \"span\",\n                class: \"orangehrm-attendance-punchedIn-timezone\"\n              }, {\n                default: _withCtx(() => [_createTextVNode(_toDisplayString(`(GMT ${$data.previousRecordTimezone})`), 1)]),\n                _: 1\n              })]),\n              _: 1\n            })]),\n            _: 1\n          }, 8, [\"label\"])]),\n          _: 1\n        }, 8, [\"class\"]), $data.attendanceRecord.previousRecord.note ? (_openBlock(), _createBlock(_component_oxd_grid_item, {\n          key: 0\n        }, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_group, {\n            label: _ctx.$t('attendance.punched_in_note')\n          }, {\n            default: _withCtx(() => [_createVNode(_component_oxd_text, {\n              type: \"subtitle-2\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString($data.attendanceRecord.previousRecord.note), 1)]),\n              _: 1\n            })]),\n            _: 1\n          }, 8, [\"label\"])]),\n          _: 1\n        })) : _createCommentVNode(\"\", true)], 64)) : _createCommentVNode(\"\", true), _createVNode(_component_oxd_grid_item, {\n          class: \"--offset-row-2\"\n        }, {\n          default: _withCtx(() => [(_openBlock(), _createBlock(_component_date_input, {\n            key: $data.attendanceRecord.time,\n            modelValue: $data.attendanceRecord.date,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.attendanceRecord.date = $event),\n            label: _ctx.$t('general.date'),\n            rules: $data.rules.date,\n            disabled: !$props.isEditable,\n            required: \"\"\n          }, null, 8, [\"modelValue\", \"label\", \"rules\", \"disabled\"]))]),\n          _: 1\n        }), _createVNode(_component_oxd_grid_item, {\n          class: \"--offset-row-2\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.attendanceRecord.time,\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.attendanceRecord.time = $event),\n            label: _ctx.$t('general.time'),\n            disabled: !$props.isEditable,\n            rules: $data.rules.time,\n            type: \"time\",\n            placeholder: _ctx.$t('attendance.hh_mm'),\n            required: \"\"\n          }, null, 8, [\"modelValue\", \"label\", \"disabled\", \"rules\", \"placeholder\"])]),\n          _: 1\n        })]),\n        _: 1\n      })]),\n      _: 1\n    }), $props.isTimezoneEditable ? (_openBlock(), _createBlock(_component_oxd_grid, {\n      key: 0,\n      cols: 2\n    }, {\n      default: _withCtx(() => [_createVNode(_component_oxd_grid_item, null, {\n        default: _withCtx(() => [_createVNode(_component_timezone_dropdown, {\n          modelValue: $data.attendanceRecord.timezone,\n          \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.attendanceRecord.timezone = $event),\n          required: \"\"\n        }, null, 8, [\"modelValue\"])]),\n        _: 1\n      })]),\n      _: 1\n    })) : _createCommentVNode(\"\", true), _createVNode(_component_oxd_form_row, null, {\n      default: _withCtx(() => [_createVNode(_component_oxd_grid, {\n        cols: 4,\n        class: \"orangehrm-full-width-grid\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_oxd_grid_item, {\n          class: \"--span-column-2\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_oxd_input_field, {\n            modelValue: $data.attendanceRecord.note,\n            \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.attendanceRecord.note = $event),\n            rules: $data.rules.note,\n            label: _ctx.$t('general.note'),\n            placeholder: _ctx.$t('general.type_here'),\n            type: \"textarea\"\n          }, null, 8, [\"modelValue\", \"rules\", \"label\", \"placeholder\"])]),\n          _: 1\n        })]),\n        _: 1\n      })]),\n      _: 1\n    }), _createVNode(_component_oxd_divider), _createVNode(_component_oxd_form_actions, null, {\n      default: _withCtx(() => [_createVNode(_component_required_text), _createVNode(_component_submit_button, {\n        label: !$props.attendanceRecordId ? _ctx.$t('attendance.in') : _ctx.$t('attendance.out')\n      }, null, 8, [\"label\"])]),\n      _: 1\n    })]),\n    _: 1\n  }, 8, [\"loading\", \"onSubmitValid\"]);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;uBAoBEA,aA0FWC;IA1FAC,OAAO,EAAEC,eAAS;IAAGC,aAAY,EAAEC;;sBAC5C,MAwDe,CAxDfC,aAwDeC;wBAvDb,MAsDW,CAtDXD,aAsDWE;QAtDAC,IAAI,EAAE,CAAC;QAAEC,KAAK,EAAC;;0BACxB,MA2BW,CA3BKP,sBAAgB,CAACQ,cAAc,kBAA/CC,oBA2BWC;UAAAC;QAAA,IA1BTR,aAiBgBS;UAhBbL,KAAK,mBAAkBP,sBAAgB,CAACQ,cAAc,CAACK,IAAI;;4BAI5D,MAWkB,CAXlBV,aAWkBW;YAXAC,KAAK,EAAEC,OAAE;;8BACzB,MASW,CATXb,aASWc;cATDC,IAAI,EAAC;YAAY;gCACzB,MAAkC,mCAA/BhB,qCAA4B,IAAG,KAClC,oBAAGA,qCAA4B,IAAG,GAClC,mBAKWe;gBAJTE,GAAG,EAAC,MAAM;gBACVZ,KAAK,EAAC;;kCAEN,MAAuC,2CAA5BP,4BAAsB;;;;;;;;0BAMpBA,sBAAgB,CAACQ,cAAc,CAACK,IAAI,kBAAzDhB,aAMgBe;UAAAD;QAAA;4BALd,MAIkB,CAJlBR,aAIkBW;YAJAC,KAAK,EAAEC,OAAE;;8BACzB,MAEW,CAFXb,aAEWc;cAFDC,IAAI,EAAC;YAAY;gCACzB,MAA0C,mCAAvClB,sBAAgB,CAACQ,cAAc,CAACK,IAAI;;;;;;oFAO/CV,aASgBS;UATDL,KAAK,EAAC;QAAgB;4BACnC,MAOE,gBAPFV,aAOEuB;YANCT,GAAG,EAAEX,sBAAgB,CAACqB,IAAI;wBAClBrB,sBAAgB,CAACsB,IAAI;uEAArBtB,sBAAgB,CAACsB,IAAI;YAC7BP,KAAK,EAAEC,OAAE;YACTO,KAAK,EAAEvB,WAAK,CAACsB,IAAI;YACjBE,QAAQ,GAAGC,iBAAU;YACtBC,QAAQ,EAAR;;;YAKJvB,aAUgBS;UAVDL,KAAK,EAAC;QAAgB;4BACnC,MAQE,CARFJ,aAQEwB;wBAPS3B,sBAAgB,CAACqB,IAAI;uEAArBrB,sBAAgB,CAACqB,IAAI;YAC7BN,KAAK,EAAEC,OAAE;YACTQ,QAAQ,GAAGC,iBAAU;YACrBF,KAAK,EAAEvB,WAAK,CAACqB,IAAI;YAClBH,IAAI,EAAC,MAAM;YACVU,WAAW,EAAEZ,OAAE;YAChBU,QAAQ,EAAR;;;;;;;QAQQD,yBAAkB,kBAAlC5B,aAIWQ;;MAJ0BC,IAAI,EAAE;;wBACzC,MAEgB,CAFhBH,aAEgBS;0BADd,MAAkE,CAAlET,aAAkE0B;sBAAtC7B,sBAAgB,CAAC8B,QAAQ;qEAAzB9B,sBAAgB,CAAC8B,QAAQ;UAAEJ,QAAQ,EAAR;;;;;yCAK3DvB,aAYeC;wBAXb,MAUW,CAVXD,aAUWE;QAVAC,IAAI,EAAE,CAAC;QAAEC,KAAK,EAAC;;0BACxB,MAQgB,CARhBJ,aAQgBS;UARDL,KAAK,EAAC;QAAiB;4BACpC,MAME,CANFJ,aAMEwB;wBALS3B,sBAAgB,CAACa,IAAI;uEAArBb,sBAAgB,CAACa,IAAI;YAC7BU,KAAK,EAAEvB,WAAK,CAACa,IAAI;YACjBE,KAAK,EAAEC,OAAE;YACTY,WAAW,EAAEZ,OAAE;YAChBE,IAAI,EAAC;;;;;;;QAKbf,aAAe4B,yBACf5B,aAOmB6B;wBANjB,MAAiB,CAAjB7B,aAAiB8B,2BACjB9B,aAIE+B;QAHCnB,KAAK,GAAcU,yBAAkB,GAAGT,OAAE,oBAAoBA,OAAE","names":["_createBlock","_component_oxd_form","loading","$data","onSubmitValid","$options","_createVNode","_component_oxd_form_row","_component_oxd_grid","cols","class","previousRecord","_createElementBlock","_Fragment","key","_component_oxd_grid_item","note","_component_oxd_input_group","label","_ctx","_component_oxd_text","type","tag","_component_date_input","time","date","rules","disabled","$props","required","_component_oxd_input_field","placeholder","_component_timezone_dropdown","timezone","_component_oxd_divider","_component_oxd_form_actions","_component_required_text","_component_submit_button"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAttendancePlugin\\components\\RecordAttendance.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n    <oxd-form-row>\n      <oxd-grid :cols=\"4\" class=\"orangehrm-full-width-grid\">\n        <template v-if=\"attendanceRecord.previousRecord\">\n          <oxd-grid-item\n            :class=\"\n              !attendanceRecord.previousRecord.note ? '--span-column-2' : ''\n            \"\n          >\n            <oxd-input-group :label=\"$t('attendance.punched_in_time')\">\n              <oxd-text type=\"subtitle-2\">\n                {{ previousAttendanceRecordDate }} -\n                {{ previousAttendanceRecordTime }}\n                <oxd-text\n                  tag=\"span\"\n                  class=\"orangehrm-attendance-punchedIn-timezone\"\n                >\n                  {{ `(GMT ${previousRecordTimezone})` }}\n                </oxd-text>\n              </oxd-text>\n            </oxd-input-group>\n          </oxd-grid-item>\n\n          <oxd-grid-item v-if=\"attendanceRecord.previousRecord.note\">\n            <oxd-input-group :label=\"$t('attendance.punched_in_note')\">\n              <oxd-text type=\"subtitle-2\">\n                {{ attendanceRecord.previousRecord.note }}\n              </oxd-text>\n            </oxd-input-group>\n          </oxd-grid-item>\n        </template>\n\n        <!-- Date Selector -->\n        <oxd-grid-item class=\"--offset-row-2\">\n          <date-input\n            :key=\"attendanceRecord.time\"\n            v-model=\"attendanceRecord.date\"\n            :label=\"$t('general.date')\"\n            :rules=\"rules.date\"\n            :disabled=\"!isEditable\"\n            required\n          />\n        </oxd-grid-item>\n\n        <!-- Time  Selector -->\n        <oxd-grid-item class=\"--offset-row-2\">\n          <oxd-input-field\n            v-model=\"attendanceRecord.time\"\n            :label=\"$t('general.time')\"\n            :disabled=\"!isEditable\"\n            :rules=\"rules.time\"\n            type=\"time\"\n            :placeholder=\"$t('attendance.hh_mm')\"\n            required\n          />\n        </oxd-grid-item>\n      </oxd-grid>\n    </oxd-form-row>\n\n    <!-- select timezone -->\n\n    <oxd-grid v-if=\"isTimezoneEditable\" :cols=\"2\">\n      <oxd-grid-item>\n        <timezone-dropdown v-model=\"attendanceRecord.timezone\" required />\n      </oxd-grid-item>\n    </oxd-grid>\n\n    <!-- Note input -->\n    <oxd-form-row>\n      <oxd-grid :cols=\"4\" class=\"orangehrm-full-width-grid\">\n        <oxd-grid-item class=\"--span-column-2\">\n          <oxd-input-field\n            v-model=\"attendanceRecord.note\"\n            :rules=\"rules.note\"\n            :label=\"$t('general.note')\"\n            :placeholder=\"$t('general.type_here')\"\n            type=\"textarea\"\n          />\n        </oxd-grid-item>\n      </oxd-grid>\n    </oxd-form-row>\n    <oxd-divider />\n    <oxd-form-actions>\n      <required-text />\n      <submit-button\n        :label=\"\n          !attendanceRecordId ? $t('attendance.in') : $t('attendance.out')\n        \"\n      />\n    </oxd-form-actions>\n  </oxd-form>\n</template>\n\n<script>\nimport {\n  required,\n  validDateFormat,\n  shouldNotExceedCharLength,\n} from '@/core/util/validation/rules';\nimport {\n  parseTime,\n  parseDate,\n  formatTime,\n  formatDate,\n  guessTimezone,\n  setClockInterval,\n  getStandardTimezone,\n} from '@/core/util/helper/datefns';\nimport {promiseDebounce} from '@ohrm/oxd';\nimport useLocale from '@/core/util/composable/useLocale';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nimport {reloadPage, navigate} from '@/core/util/helper/navigation';\nimport TimezoneDropdown from '@/orangehrmAttendancePlugin/components/TimezoneDropdown.vue';\n\nconst attendanceRecordModal = {\n  date: null,\n  time: null,\n  note: null,\n  timezone: null,\n  previousRecord: null,\n};\n\nexport default {\n  name: 'RecordAttendance',\n  components: {\n    'timezone-dropdown': TimezoneDropdown,\n  },\n  props: {\n    isEditable: {\n      type: Boolean,\n      default: false,\n    },\n    isTimezoneEditable: {\n      type: Boolean,\n      default: false,\n    },\n    attendanceRecordId: {\n      type: Number,\n      default: null,\n    },\n    employeeId: {\n      type: Number,\n      default: null,\n    },\n    date: {\n      type: String,\n      default: null,\n    },\n  },\n  setup(props) {\n    const apiPath = props.employeeId\n      ? `/api/v2/attendance/employees/${props.employeeId}/records`\n      : '/api/v2/attendance/records';\n    const http = new APIService(window.appGlobal.baseUrl, apiPath);\n    const {jsDateFormat, userDateFormat, timeFormat, jsTimeFormat} =\n      useDateFormat();\n    const {locale} = useLocale();\n    return {\n      http,\n      locale,\n      timeFormat,\n      jsTimeFormat,\n      jsDateFormat,\n      userDateFormat,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      attendanceRecord: {...attendanceRecordModal},\n      rules: {\n        date: [\n          required,\n          validDateFormat(this.userDateFormat),\n          promiseDebounce(this.validateDate, 500),\n        ],\n        time: [required, promiseDebounce(this.validateDate, 500)],\n        note: [shouldNotExceedCharLength(250)],\n      },\n      previousRecordTimezone: null,\n    };\n  },\n  computed: {\n    previousAttendanceRecordDate() {\n      if (!this.attendanceRecord?.previousRecord) return null;\n      return formatDate(\n        parseDate(this.attendanceRecord.previousRecord.userDate),\n        this.jsDateFormat,\n        {locale: this.locale},\n      );\n    },\n    previousAttendanceRecordTime() {\n      if (!this.attendanceRecord?.previousRecord) return null;\n      return formatTime(\n        parseTime(\n          this.attendanceRecord.previousRecord.userTime,\n          this.timeFormat,\n        ),\n        this.jsTimeFormat,\n      );\n    },\n  },\n  beforeMount() {\n    this.isLoading = true;\n    // set default timezone\n    if (this.isTimezoneEditable) {\n      const tz = guessTimezone();\n      this.attendanceRecord.timezone = {\n        id: tz.name,\n        label: tz.label,\n        _name: tz.name,\n        _offset: tz.offset,\n      };\n    }\n\n    // fetch and set attendance record on initial load\n    this.setCurrentDateTime()\n      .then(() => {\n        // then set record date/time every minute\n        !this.date &&\n          !this.isEditable &&\n          setClockInterval(this.setCurrentDateTime, 60000);\n        let url = '/api/v2/attendance/records/latest';\n        if (this.employeeId) {\n          url = `/api/v2/attendance/records/latest?empNumber=${this.employeeId}`;\n        }\n        return this.attendanceRecordId\n          ? this.http.request({method: 'GET', url})\n          : null;\n      })\n\n      .then((response) => {\n        if (response) {\n          const {data} = response.data;\n          this.attendanceRecord.previousRecord = data.punchIn;\n        }\n      })\n      .then(() => {\n        this.previousRecordTimezone = getStandardTimezone(\n          this.attendanceRecord.previousRecord?.offset,\n        );\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n\n      const timezone = guessTimezone();\n\n      this.http\n        .request({\n          method: this.attendanceRecordId ? 'PUT' : 'POST',\n          data: {\n            date: this.attendanceRecord.date,\n            time: this.attendanceRecord.time,\n            note: this.attendanceRecord.note,\n            timezoneOffset:\n              this.attendanceRecord.timezone?._offset ?? timezone.offset,\n            timezoneName: this.attendanceRecord.timezone?.id ?? timezone.name,\n          },\n        })\n        .then(() => {\n          return this.$toast.saveSuccess();\n        })\n        .then(() => {\n          this.employeeId\n            ? navigate('/attendance/viewAttendanceRecord', undefined, {\n                employeeId: this.employeeId,\n                date: this.date,\n              })\n            : reloadPage();\n        });\n    },\n    setCurrentDateTime() {\n      return new Promise((resolve, reject) => {\n        this.http\n          .request({method: 'GET', url: '/api/v2/attendance/current-datetime'})\n          .then((res) => {\n            const {utcDate, utcTime} = res.data.data;\n            const currentDate = parseDate(\n              `${utcDate} ${utcTime} +00:00`,\n              'yyyy-MM-dd HH:mm xxx',\n            );\n            this.attendanceRecord.date =\n              this.date ?? formatDate(currentDate, 'yyyy-MM-dd');\n            this.attendanceRecord.time = formatDate(currentDate, 'HH:mm');\n            resolve();\n          })\n          .catch((error) => reject(error));\n      });\n    },\n    validateDate() {\n      if (!this.attendanceRecord.date || !this.attendanceRecord.time) {\n        return true;\n      }\n      if (parseDate(this.attendanceRecord.date) === null) {\n        return true;\n      }\n      const tzOffset = (new Date().getTimezoneOffset() / 60) * -1;\n      return new Promise((resolve) => {\n        this.http\n          .request({\n            method: 'GET',\n            url: `/api/v2/attendance/${\n              this.attendanceRecordId ? 'punch-out' : 'punch-in'\n            }/overlaps`,\n            params: {\n              date: this.attendanceRecord.date,\n              time: this.attendanceRecord.time,\n              timezoneOffset:\n                this.attendanceRecord.timezone?._offset ?? tzOffset,\n              empNumber: this.employeeId,\n            },\n            // Prevent triggering response interceptor on 400\n            validateStatus: (status) => {\n              return (status >= 200 && status < 300) || status == 400;\n            },\n          })\n          .then((res) => {\n            const {data, error} = res.data;\n            if (error) {\n              return resolve(error.message);\n            }\n            return data.valid === true\n              ? resolve(true)\n              : resolve(this.$t('attendance.overlapping_records_found'));\n          });\n      });\n    },\n  },\n};\n</script>\n\n<style src=\"./record-attendance.scss\" lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}