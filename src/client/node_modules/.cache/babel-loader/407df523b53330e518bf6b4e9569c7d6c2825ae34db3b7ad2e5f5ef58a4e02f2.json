{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@ohrm/core/util/helper/navigation';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport PasswordInput from '@/core/components/inputs/PasswordInput';\nimport { required, validSelection, shouldNotExceedCharLength, shouldNotLessThanCharLength } from '@ohrm/core/util/validation/rules';\nimport { promiseDebounce } from '@ohrm/oxd';\nconst userModel = {\n  id: '',\n  username: '',\n  role: null,\n  employee: null,\n  status: null,\n  changePassword: false,\n  password: '',\n  passwordConfirm: ''\n};\nexport default {\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete,\n    'password-input': PasswordInput\n  },\n  props: {\n    systemUserId: {\n      type: Number,\n      required: true\n    },\n    isPasswordRequired: {\n      type: Boolean,\n      default: true\n    }\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/api/v2/admin/users');\n    http.setIgnorePath('/api/v2/admin/validation/user-name');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      user: {\n        ...userModel\n      },\n      rules: {\n        username: [required, shouldNotLessThanCharLength(5), shouldNotExceedCharLength(40), promiseDebounce(this.validateUserName, 500)],\n        role: [required],\n        employee: [required, validSelection],\n        status: [required]\n      },\n      userRoles: [{\n        id: 1,\n        label: this.$t('general.admin')\n      }, {\n        id: 2,\n        label: this.$t('general.ess')\n      }],\n      userStatuses: [{\n        id: 1,\n        label: this.$t('general.enabled')\n      }, {\n        id: 2,\n        label: this.$t('general.disabled')\n      }]\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.get(this.systemUserId).then(response => {\n      const {\n        data\n      } = response.data;\n      this.user.id = data.id;\n      this.user.username = data.userName;\n      this.user.role = this.userRoles.find(item => item.id === data.userRole.id);\n      this.user.employee = {\n        id: data.employee.empNumber,\n        label: `${data.employee.firstName} ${data.employee.middleName} ${data.employee.lastName}`,\n        isPastEmployee: data.employee.terminationId\n      };\n      if (data.status) {\n        this.user.status = {\n          id: 1,\n          label: this.$t('general.enabled')\n        };\n      } else {\n        this.user.status = {\n          id: 2,\n          label: this.$t('general.disabled')\n        };\n      }\n    }).finally(() => {\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onCancel() {\n      navigate('/admin/viewSystemUsers');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http.update(this.systemUserId, {\n        username: this.user.username.trim(),\n        password: this.user.password,\n        status: this.user.status && this.user.status.id === 1,\n        userRoleId: this.user.role?.id,\n        empNumber: this.user.employee?.id,\n        changePassword: this.user.changePassword\n      }).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel();\n      });\n    },\n    validateUserName(user) {\n      return new Promise(resolve => {\n        if (user) {\n          this.http.request({\n            method: 'GET',\n            url: `/api/v2/admin/validation/user-name`,\n            params: {\n              userName: this.user.username.trim(),\n              userId: this.systemUserId\n            }\n          }).then(response => {\n            const {\n              data\n            } = response.data;\n            return data.valid === true ? resolve(true) : resolve(this.$t('general.already_exists'));\n          });\n        } else {\n          resolve(true);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["APIService","navigate","EmployeeAutocomplete","PasswordInput","required","validSelection","shouldNotExceedCharLength","shouldNotLessThanCharLength","promiseDebounce","userModel","id","username","role","employee","status","changePassword","password","passwordConfirm","components","props","systemUserId","type","Number","isPasswordRequired","Boolean","default","setup","http","window","appGlobal","baseUrl","setIgnorePath","data","isLoading","user","rules","validateUserName","userRoles","label","$t","userStatuses","beforeMount","get","then","response","userName","find","item","userRole","empNumber","firstName","middleName","lastName","isPastEmployee","terminationId","finally","methods","onCancel","onSave","update","trim","userRoleId","$toast","updateSuccess","Promise","resolve","request","method","url","params","userId","valid"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmAdminPlugin\\pages\\systemUser\\EditSystemUser.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <div class=\"orangehrm-background-container\">\n    <div class=\"orangehrm-card-container\">\n      <oxd-text tag=\"h6\" class=\"orangehrm-main-title\">{{\n        $t('admin.edit_user')\n      }}</oxd-text>\n      <oxd-divider />\n\n      <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n        <oxd-form-row>\n          <oxd-grid :cols=\"2\" class=\"orangehrm-full-width-grid\">\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"user.role\"\n                type=\"select\"\n                :label=\"$t('general.user_role')\"\n                :rules=\"rules.role\"\n                :options=\"userRoles\"\n                required\n              />\n            </oxd-grid-item>\n            <oxd-grid-item>\n              <employee-autocomplete\n                v-model=\"user.employee\"\n                :rules=\"rules.employee\"\n                required\n              />\n            </oxd-grid-item>\n\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"user.status\"\n                type=\"select\"\n                :label=\"$t('general.status')\"\n                :rules=\"rules.status\"\n                :options=\"userStatuses\"\n                required\n              />\n            </oxd-grid-item>\n\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"user.username\"\n                :label=\"$t('general.username')\"\n                :rules=\"rules.username\"\n                required\n                autocomplete=\"off\"\n              />\n            </oxd-grid-item>\n\n            <oxd-grid-item>\n              <oxd-input-field\n                v-model=\"user.changePassword\"\n                type=\"checkbox\"\n                value=\"true\"\n                :true-value=\"true\"\n                :false-value=\"false\"\n                option-label=\"Yes\"\n                :label=\"$t('general.change_password_question')\"\n              />\n            </oxd-grid-item>\n          </oxd-grid>\n        </oxd-form-row>\n\n        <password-input\n          v-if=\"user.changePassword\"\n          v-model:password=\"user.password\"\n          v-model:passwordConfirm=\"user.passwordConfirm\"\n          :is-password-required=\"isPasswordRequired\"\n        />\n\n        <oxd-divider />\n        <oxd-form-actions>\n          <required-text />\n          <oxd-button\n            type=\"button\"\n            display-type=\"ghost\"\n            :label=\"$t('general.cancel')\"\n            @click=\"onCancel\"\n          />\n          <submit-button />\n        </oxd-form-actions>\n      </oxd-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {APIService} from '@/core/util/services/api.service';\nimport {navigate} from '@ohrm/core/util/helper/navigation';\nimport EmployeeAutocomplete from '@/core/components/inputs/EmployeeAutocomplete';\nimport PasswordInput from '@/core/components/inputs/PasswordInput';\nimport {\n  required,\n  validSelection,\n  shouldNotExceedCharLength,\n  shouldNotLessThanCharLength,\n} from '@ohrm/core/util/validation/rules';\nimport {promiseDebounce} from '@ohrm/oxd';\n\nconst userModel = {\n  id: '',\n  username: '',\n  role: null,\n  employee: null,\n  status: null,\n  changePassword: false,\n  password: '',\n  passwordConfirm: '',\n};\n\nexport default {\n  components: {\n    'employee-autocomplete': EmployeeAutocomplete,\n    'password-input': PasswordInput,\n  },\n  props: {\n    systemUserId: {\n      type: Number,\n      required: true,\n    },\n    isPasswordRequired: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  setup() {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      '/api/v2/admin/users',\n    );\n    http.setIgnorePath('/api/v2/admin/validation/user-name');\n    return {\n      http,\n    };\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      user: {...userModel},\n      rules: {\n        username: [\n          required,\n          shouldNotLessThanCharLength(5),\n          shouldNotExceedCharLength(40),\n          promiseDebounce(this.validateUserName, 500),\n        ],\n        role: [required],\n        employee: [required, validSelection],\n        status: [required],\n      },\n      userRoles: [\n        {id: 1, label: this.$t('general.admin')},\n        {id: 2, label: this.$t('general.ess')},\n      ],\n      userStatuses: [\n        {id: 1, label: this.$t('general.enabled')},\n        {id: 2, label: this.$t('general.disabled')},\n      ],\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http\n      .get(this.systemUserId)\n      .then((response) => {\n        const {data} = response.data;\n        this.user.id = data.id;\n        this.user.username = data.userName;\n        this.user.role = this.userRoles.find(\n          (item) => item.id === data.userRole.id,\n        );\n        this.user.employee = {\n          id: data.employee.empNumber,\n          label: `${data.employee.firstName} ${data.employee.middleName} ${data.employee.lastName}`,\n          isPastEmployee: data.employee.terminationId,\n        };\n        if (data.status) {\n          this.user.status = {id: 1, label: this.$t('general.enabled')};\n        } else {\n          this.user.status = {id: 2, label: this.$t('general.disabled')};\n        }\n      })\n      .finally(() => {\n        this.isLoading = false;\n      });\n  },\n\n  methods: {\n    onCancel() {\n      navigate('/admin/viewSystemUsers');\n    },\n    onSave() {\n      this.isLoading = true;\n      this.http\n        .update(this.systemUserId, {\n          username: this.user.username.trim(),\n          password: this.user.password,\n          status: this.user.status && this.user.status.id === 1,\n          userRoleId: this.user.role?.id,\n          empNumber: this.user.employee?.id,\n          changePassword: this.user.changePassword,\n        })\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel();\n        });\n    },\n    validateUserName(user) {\n      return new Promise((resolve) => {\n        if (user) {\n          this.http\n            .request({\n              method: 'GET',\n              url: `/api/v2/admin/validation/user-name`,\n              params: {\n                userName: this.user.username.trim(),\n                userId: this.systemUserId,\n              },\n            })\n            .then((response) => {\n              const {data} = response.data;\n              return data.valid === true\n                ? resolve(true)\n                : resolve(this.$t('general.already_exists'));\n            });\n        } else {\n          resolve(true);\n        }\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}