{"ast":null,"code":"import { APIService } from '@/core/util/services/api.service';\nimport { OxdDialog } from '@ohrm/oxd';\nimport { required, shouldNotExceedCharLength, validDateFormat } from '@ohrm/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\nconst terminationModel = {\n  terminationReason: null,\n  date: '',\n  note: null\n};\nexport default {\n  name: 'TerminateModal',\n  components: {\n    'oxd-dialog': OxdDialog\n  },\n  props: {\n    employeeId: {\n      type: String,\n      required: true\n    },\n    terminationReasons: {\n      type: Array,\n      required: true\n    },\n    terminationId: {\n      type: Number,\n      required: false,\n      default: null\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/pim/employees/${props.employeeId}/terminations`);\n    const {\n      userDateFormat\n    } = useDateFormat();\n    return {\n      http,\n      userDateFormat\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      termination: {\n        ...terminationModel\n      },\n      rules: {\n        terminationReason: [required],\n        date: [required, validDateFormat(this.userDateFormat)],\n        note: [shouldNotExceedCharLength(250)]\n      }\n    };\n  },\n  beforeMount() {\n    if (this.terminationId) {\n      this.isLoading = true;\n      this.http.get(this.terminationId).then(response => {\n        const {\n          data\n        } = response.data;\n        this.termination.terminationReason = this.terminationReasons.find(item => item.id === data.terminationReason?.id);\n        this.termination.date = data.date;\n        this.termination.note = data.note;\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    }\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      const payload = {\n        date: this.termination.date,\n        note: this.termination.note,\n        terminationReasonId: this.termination.terminationReason?.id\n      };\n      this.submitData(payload, this.terminationId).then(() => {\n        return this.$toast.updateSuccess();\n      }).then(() => {\n        this.onCancel(true);\n      });\n    },\n    async submitData(payload, id) {\n      return !id ? this.http.create(payload) : this.http.update(id, payload);\n    },\n    onCancel(reload) {\n      this.$emit('close', reload);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["APIService","OxdDialog","required","shouldNotExceedCharLength","validDateFormat","useDateFormat","terminationModel","terminationReason","date","note","name","components","props","employeeId","type","String","terminationReasons","Array","terminationId","Number","default","emits","setup","http","window","appGlobal","baseUrl","userDateFormat","data","isLoading","termination","rules","beforeMount","get","then","response","find","item","id","finally","methods","onSave","payload","terminationReasonId","submitData","$toast","updateSuccess","onCancel","create","update","reload","$emit"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\TerminateModal.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-dialog class=\"orangehrm-dialog-modal\" @update:show=\"onCancel(false)\">\n    <div class=\"orangehrm-modal-header\">\n      <oxd-text type=\"card-title\">\n        {{ $t('pim.terminate_employment') }}\n      </oxd-text>\n    </div>\n    <oxd-divider />\n    <oxd-form :loading=\"isLoading\" @submit-valid=\"onSave\">\n      <oxd-form-row>\n        <date-input\n          v-model=\"termination.date\"\n          :label=\"$t('pim.termination_date')\"\n          :rules=\"rules.date\"\n          required\n        />\n      </oxd-form-row>\n      <oxd-form-row>\n        <oxd-input-field\n          v-model=\"termination.terminationReason\"\n          type=\"select\"\n          :label=\"$t('pim.termination_reason')\"\n          :rules=\"rules.terminationReason\"\n          :options=\"terminationReasons\"\n          required\n        />\n      </oxd-form-row>\n      <oxd-form-row>\n        <oxd-input-field\n          v-model=\"termination.note\"\n          type=\"textarea\"\n          :label=\"$t('general.note')\"\n          :placeholder=\"$t('general.type_here')\"\n          :rules=\"rules.note\"\n        />\n      </oxd-form-row>\n      <oxd-divider />\n\n      <oxd-form-actions>\n        <required-text />\n        <oxd-button\n          type=\"button\"\n          display-type=\"ghost\"\n          :label=\"$t('general.cancel')\"\n          @click=\"onCancel(false)\"\n        />\n        <submit-button />\n      </oxd-form-actions>\n    </oxd-form>\n  </oxd-dialog>\n</template>\n\n<script>\nimport {APIService} from '@/core/util/services/api.service';\nimport {OxdDialog} from '@ohrm/oxd';\nimport {\n  required,\n  shouldNotExceedCharLength,\n  validDateFormat,\n} from '@ohrm/core/util/validation/rules';\nimport useDateFormat from '@/core/util/composable/useDateFormat';\n\nconst terminationModel = {\n  terminationReason: null,\n  date: '',\n  note: null,\n};\n\nexport default {\n  name: 'TerminateModal',\n  components: {\n    'oxd-dialog': OxdDialog,\n  },\n  props: {\n    employeeId: {\n      type: String,\n      required: true,\n    },\n    terminationReasons: {\n      type: Array,\n      required: true,\n    },\n    terminationId: {\n      type: Number,\n      required: false,\n      default: null,\n    },\n  },\n  emits: ['close'],\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/pim/employees/${props.employeeId}/terminations`,\n    );\n    const {userDateFormat} = useDateFormat();\n\n    return {\n      http,\n      userDateFormat,\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      termination: {...terminationModel},\n      rules: {\n        terminationReason: [required],\n        date: [required, validDateFormat(this.userDateFormat)],\n        note: [shouldNotExceedCharLength(250)],\n      },\n    };\n  },\n\n  beforeMount() {\n    if (this.terminationId) {\n      this.isLoading = true;\n      this.http\n        .get(this.terminationId)\n        .then((response) => {\n          const {data} = response.data;\n          this.termination.terminationReason = this.terminationReasons.find(\n            (item) => item.id === data.terminationReason?.id,\n          );\n          this.termination.date = data.date;\n          this.termination.note = data.note;\n        })\n        .finally(() => {\n          this.isLoading = false;\n        });\n    }\n  },\n  methods: {\n    onSave() {\n      this.isLoading = true;\n      const payload = {\n        date: this.termination.date,\n        note: this.termination.note,\n        terminationReasonId: this.termination.terminationReason?.id,\n      };\n      this.submitData(payload, this.terminationId)\n        .then(() => {\n          return this.$toast.updateSuccess();\n        })\n        .then(() => {\n          this.onCancel(true);\n        });\n    },\n    async submitData(payload, id) {\n      return !id ? this.http.create(payload) : this.http.update(id, payload);\n    },\n    onCancel(reload) {\n      this.$emit('close', reload);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}