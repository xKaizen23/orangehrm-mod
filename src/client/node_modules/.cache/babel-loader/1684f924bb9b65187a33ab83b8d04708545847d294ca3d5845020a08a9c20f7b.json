{"ast":null,"code":"import { onBeforeMount, reactive, toRefs } from 'vue';\nimport { APIService } from '@ohrm/core/util/services/api.service';\nimport { OxdSpinner } from '@ohrm/oxd';\nexport default {\n  name: 'JobSpecDownload',\n  components: {\n    'oxd-loading-spinner': OxdSpinner\n  },\n  props: {\n    resourceId: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const http = new APIService(window.appGlobal.baseUrl, `/api/v2/admin/job-titles/${props.resourceId}/specification`);\n    const state = reactive({\n      isLoading: false,\n      file: {\n        id: '',\n        filename: '',\n        fileType: '',\n        fileSize: 0\n      }\n    });\n    const fetchFile = async () => {\n      state.isLoading = true;\n      http.request({\n        method: 'GET',\n        // Prevent triggering response interceptor on 404\n        validateStatus: status => {\n          return status >= 200 && status < 300 || status == 404;\n        }\n      }).then(({\n        data\n      }) => {\n        state.file = {\n          ...data.data\n        };\n      }).finally(() => {\n        state.isLoading = false;\n      });\n    };\n    const downloadFile = () => {\n      if (!state.file.id) return;\n      const downUrl = `${window.appGlobal.baseUrl}/admin/viewJobSpecification/attachId/${state.file.id}`;\n      window.open(downUrl, '_blank');\n    };\n    if (props.resourceId) {\n      onBeforeMount(fetchFile);\n    }\n    return {\n      ...toRefs(state),\n      downloadFile\n    };\n  }\n};","map":{"version":3,"mappings":"AA8CA,SAAQA,aAAa,EAAEC,QAAQ,EAAEC,MAAM,QAAO,KAAK;AACnD,SAAQC,UAAU,QAAO,sCAAsC;AAC/D,SAAQC,UAAU,QAAO,WAAW;AAEpC,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,UAAU,EAAE;IACV,qBAAqB,EAAEF;EACzB,CAAC;EACDG,KAAK,EAAE;IACLC,UAAU,EAAE;MACVC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,KAAK,CAACL,KAAK,EAAE;IACX,MAAMM,IAAG,GAAI,IAAIV,UAAU,CACzBW,MAAM,CAACC,SAAS,CAACC,OAAO,EACvB,4BAA2BT,KAAK,CAACC,UAAW,gBAAe,CAC7D;IACD,MAAMS,KAAI,GAAIhB,QAAQ,CAAC;MACrBiB,SAAS,EAAE,KAAK;MAChBC,IAAI,EAAE;QACJC,EAAE,EAAE,EAAE;QACNC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;IAEF,MAAMC,SAAQ,GAAI,YAAY;MAC5BP,KAAK,CAACC,SAAQ,GAAI,IAAI;MACtBL,IAAG,CACAY,OAAO,CAAC;QACPC,MAAM,EAAE,KAAK;QACb;QACAC,cAAc,EAAGC,MAAM,IAAK;UAC1B,OAAQA,MAAK,IAAK,GAAE,IAAKA,MAAK,GAAI,GAAG,IAAKA,MAAK,IAAK,GAAG;QACzD;MACF,CAAC,EACAC,IAAI,CAAC,CAAC;QAACC;MAAI,CAAC,KAAK;QAChBb,KAAK,CAACE,IAAG,GAAI;UACX,GAAGW,IAAI,CAACA;QACV,CAAC;MACH,CAAC,EACAC,OAAO,CAAC,MAAM;QACbd,KAAK,CAACC,SAAQ,GAAI,KAAK;MACzB,CAAC,CAAC;IACN,CAAC;IAED,MAAMc,YAAW,GAAI,MAAM;MACzB,IAAI,CAACf,KAAK,CAACE,IAAI,CAACC,EAAE,EAAE;MACpB,MAAMa,OAAM,GAAK,GAAEnB,MAAM,CAACC,SAAS,CAACC,OAAQ,wCAAuCC,KAAK,CAACE,IAAI,CAACC,EAAG,EAAC;MAClGN,MAAM,CAACoB,IAAI,CAACD,OAAO,EAAE,QAAQ,CAAC;IAChC,CAAC;IAED,IAAI1B,KAAK,CAACC,UAAU,EAAE;MACpBR,aAAa,CAACwB,SAAS,CAAC;IAC1B;IAEA,OAAO;MACL,GAAGtB,MAAM,CAACe,KAAK,CAAC;MAChBe;IACF,CAAC;EACH;AACF,CAAC","names":["onBeforeMount","reactive","toRefs","APIService","OxdSpinner","name","components","props","resourceId","type","Number","required","setup","http","window","appGlobal","baseUrl","state","isLoading","file","id","filename","fileType","fileSize","fetchFile","request","method","validateStatus","status","then","data","finally","downloadFile","downUrl","open"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\orangehrm-5.7\\src\\client\\src\\orangehrmPimPlugin\\components\\JobSpecDownload.vue"],"sourcesContent":["<!--\n/**\n * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures\n * all the essential functionalities required for any enterprise.\n * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com\n *\n * OrangeHRM is free software: you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or (at your option) any later version.\n *\n * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with OrangeHRM.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n -->\n\n<template>\n  <oxd-input-group :label=\"$t('general.job_specification')\">\n    <div :class=\"{'input-container': true, '--disabled': !file.id}\">\n      <oxd-text\n        class=\"input-container-filename\"\n        tag=\"p\"\n        :title=\"file.filename\"\n        @click=\"downloadFile\"\n      >\n        {{ file.id ? file.filename : 'Not Defined' }}\n      </oxd-text>\n      <oxd-icon-button\n        v-if=\"!isLoading && file.id\"\n        class=\"input-container-icon\"\n        name=\"download\"\n        @click=\"downloadFile\"\n      />\n      <oxd-loading-spinner\n        v-if=\"isLoading\"\n        class=\"input-container-loader\"\n        :with-container=\"false\"\n      />\n    </div>\n  </oxd-input-group>\n</template>\n\n<script>\nimport {onBeforeMount, reactive, toRefs} from 'vue';\nimport {APIService} from '@ohrm/core/util/services/api.service';\nimport {OxdSpinner} from '@ohrm/oxd';\n\nexport default {\n  name: 'JobSpecDownload',\n  components: {\n    'oxd-loading-spinner': OxdSpinner,\n  },\n  props: {\n    resourceId: {\n      type: Number,\n      required: true,\n    },\n  },\n  setup(props) {\n    const http = new APIService(\n      window.appGlobal.baseUrl,\n      `/api/v2/admin/job-titles/${props.resourceId}/specification`,\n    );\n    const state = reactive({\n      isLoading: false,\n      file: {\n        id: '',\n        filename: '',\n        fileType: '',\n        fileSize: 0,\n      },\n    });\n\n    const fetchFile = async () => {\n      state.isLoading = true;\n      http\n        .request({\n          method: 'GET',\n          // Prevent triggering response interceptor on 404\n          validateStatus: (status) => {\n            return (status >= 200 && status < 300) || status == 404;\n          },\n        })\n        .then(({data}) => {\n          state.file = {\n            ...data.data,\n          };\n        })\n        .finally(() => {\n          state.isLoading = false;\n        });\n    };\n\n    const downloadFile = () => {\n      if (!state.file.id) return;\n      const downUrl = `${window.appGlobal.baseUrl}/admin/viewJobSpecification/attachId/${state.file.id}`;\n      window.open(downUrl, '_blank');\n    };\n\n    if (props.resourceId) {\n      onBeforeMount(fetchFile);\n    }\n\n    return {\n      ...toRefs(state),\n      downloadFile,\n    };\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.input-container {\n  position: relative;\n  display: flex;\n  align-items: center;\n  @include oxd-input-control();\n  @include oxd-input-control-size();\n  border: $oxd-input-control-border--active;\n  min-height: 45px;\n  cursor: pointer;\n  text-decoration: underline;\n  &-filename {\n    text-overflow: ellipsis;\n    overflow: hidden;\n    width: 75%;\n    white-space: nowrap;\n  }\n  &-loader {\n    position: absolute;\n    right: 10px;\n  }\n  &-icon {\n    font-size: inherit !important;\n    min-width: unset;\n    min-height: unset;\n    border-radius: 0.65rem;\n    padding: 0.3rem;\n    margin-left: auto;\n  }\n  &.--disabled {\n    cursor: not-allowed;\n    text-decoration: none;\n  }\n  ::v-deep(.oxd-loading-spinner) {\n    width: 1rem;\n    height: 1rem;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}